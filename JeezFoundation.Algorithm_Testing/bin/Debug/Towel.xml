<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Towel</name>
    </assembly>
    <members>
        <member name="T:Towel.ArrayHelper">
            <summary>Static helper methods for arrays.</summary>
        </member>
        <member name="M:Towel.ArrayHelper.NewFromRanges(System.Range[])">
            <summary>Constructs a new 1D array from a sequence of ranges.</summary>
            <returns>A new 1D array from the sequence of ranges.</returns>
            <inheritdoc cref="M:Towel.ArrayHelper.NewFromRanges``2(``1,System.Range[])"/>
        </member>
        <member name="M:Towel.ArrayHelper.NewFromRanges``1(System.Func{System.Int32,``0},System.Range[])">
            <inheritdoc cref="M:Towel.ArrayHelper.NewFromRanges``2(``1,System.Range[])"/>
        </member>
        <member name="M:Towel.ArrayHelper.NewFromRanges``2(``1,System.Range[])">
            <summary>Constructs a new 1D array from a sequence of ranges and a selction method.</summary>
            <typeparam name="T">The element type of the array to construct.</typeparam>
            <typeparam name="TSelect">The type of method for selecting <typeparamref name="T"/> from <see cref="T:System.Int32"/> values.</typeparam>
            <param name="select">The method for selecting <typeparamref name="T"/> from <see cref="T:System.Int32"/> values.</param>
            <param name="ranges">The ranges to construct the array from.</param>
            <returns>A new 1D array from the sequence of ranges and the selction method.</returns>
        </member>
        <member name="T:Towel.ICloneable`1">
            <summary>A type that has clonable instances.</summary>
            <typeparam name="T">The type of instances that can be cloned.</typeparam>
        </member>
        <member name="M:Towel.ICloneable`1.Clone">
            <summary>Clones a <typeparamref name="T"/>.</summary>
            <returns>A clone of the <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Towel.CommandLine">
            <summary>Contains static helpers for handling command line input and output.</summary>
        </member>
        <member name="M:Towel.CommandLine.HandleArguments(System.String[])">
            <summary>Handles the command line arguments by invoking the relative <see cref="T:Towel.CommandLine.CommandAttribute"/> method in the calling <see cref="T:System.Reflection.Assembly"/>.</summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="M:Towel.CommandLine.DefaultVersion(System.Reflection.Assembly)">
            <summary>Gets the default output for the version command.</summary>
            <param name="assembly">The application assembly.</param>
        </member>
        <member name="M:Towel.CommandLine.DefaultHelp(System.Reflection.Assembly,System.String)">
            <summary>Gets the default output for the help command.</summary>
            <param name="assembly">The application assembly.</param>
            <param name="command">The command to get the default help output for.</param>
        </member>
        <member name="T:Towel.CommandLine.CommandAttribute">
            <summary>Indicates that a method is invocable from the command line arguments.</summary>
        </member>
        <member name="T:Towel.CompareResult">
            <summary>The result of a comparison between two values.</summary>
        </member>
        <member name="F:Towel.CompareResult.Less">
            <summary>The left operand is less than the right operand.</summary>
        </member>
        <member name="F:Towel.CompareResult.Equal">
            <summary>The left operand is equal to the right operand.</summary>
        </member>
        <member name="F:Towel.CompareResult.Greater">
            <summary>The left operand is greater than the right operand.</summary>
        </member>
        <member name="T:Towel.ConsoleHelper">
            <summary>Contains static helper methods for <see cref="T:System.Console"/>.</summary>
        </member>
        <member name="M:Towel.ConsoleHelper.FlushInputBuffer(System.Boolean)">
            <summary>Flushes the console input buffer.</summary>
            <param name="intercept">
            Determines whether to display the pressed key in the console window.
            true to not display the pressed key; otherwise, false.
            </param>
        </member>
        <member name="M:Towel.ConsoleHelper.PressToContinue(System.ConsoleKey)">
            <summary>Prompts the user to press [enter] in the console before continuing.</summary>
            <param name="key">The key to wait for the user to press before continuing.</param>
        </member>
        <member name="M:Towel.ConsoleHelper.PromptPressToContinue(System.String,System.ConsoleKey)">
            <summary>Prompts the user to press [enter] in the console before continuing.</summary>
            <param name="prompt">The prompt to display to the user. Default: "Press [enter] to continue...".</param>
            <param name="key">The key to wait for the user to press before continuing.</param>
        </member>
        <member name="M:Towel.ConsoleHelper.IntMenu(System.ValueTuple{System.String,System.Action}[])">
            <summary>Prompts the user to select a menu option in the console before continuing.</summary>
            <param name="options">The options of the menu.</param>
        </member>
        <member name="M:Towel.ConsoleHelper.IntMenu(System.String,System.String,System.String,System.ValueTuple{System.String,System.Action}[])">
            <summary>Prompts the user to select a menu option in the console before continuing.</summary>
            <param name="title">The title of the menu.</param>
            <param name="prompt">The prompt message to display when requesting console input from the user.</param>
            <param name="invalidMessage">The message to display if invalid input is detected.</param>
            <param name="options">The options of the menu.</param>
        </member>
        <member name="M:Towel.ConsoleHelper.GetInput``1(System.String,System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}},System.Predicate{``0})">
            <summary>Gets console input from the user.</summary>
            <typeparam name="T">The generic type of console input to get from the user.</typeparam>
            <param name="prompt">The prompt message to display when requesting console input from the user.</param>
            <param name="invalidMessage">The message to display if invalid input is detected.</param>
            <param name="tryParse">The <see cref="M:Towel.Statics.TryParse``1(System.String)"/> method for converting <see cref="T:System.String"/> into a <typeparamref name="T"/> value.</param>
            <param name="validation">The predicate for validating the value of the input.</param>
            <returns>The validated value of the console input provided by the user.</returns>
        </member>
        <member name="M:Towel.ConsoleHelper.HiddenReadLine(System.Char)">
            <summary>Similar to <see cref="M:System.Console.ReadLine"/> but with hidden input characters.</summary>
            <param name="shownCharacter">The display character to use for all input.</param>
            <returns>The <see cref="T:System.String"/> input provided by the user.</returns>
        </member>
        <member name="M:Towel.ConsoleHelper.AnimatedEllipsis(System.Func{System.Boolean},System.Action,System.Int32)">
            <summary>Animates an elipsis in the console to indicate processing.</summary>
            <param name="condition">The condition of the loop.</param>
            <param name="delay">The delay function.</param>
            <param name="length">The length of the ellipsis.</param>
        </member>
        <member name="M:Towel.ConsoleHelper.ProgressBar(System.Action{System.Action{System.Double}},System.Int32,System.Char,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>Displays a progress bar in the console.</summary>
            <param name="action">The action to track the progress of.</param>
            <param name="length">The character length of the progress bar (must be >= 6).</param>
            <param name="header">The header character of the progress bar.</param>
            <param name="footer">The footer character of the progress bar.</param>
            <param name="done">The character for represening completed progress.</param>
            <param name="remaining">The character representing ongoing processing.</param>
            <param name="errorDigit">The characters to display in the numerical display when an invalid percentage is recieved.</param>
            <param name="postClear">Whether or not to clear the progress bar from the view when complete.</param>
        </member>
        <member name="T:Towel.Constant`1">
            <summary>Contains generic static numerical constant values.</summary>
            <typeparam name="T">The generic numeric type of the constants.</typeparam>
        </member>
        <member name="P:Towel.Constant`1.Zero">
            <summary>Zero [0]</summary>
        </member>
        <member name="P:Towel.Constant`1.One">
            <summary>One [1]</summary>
        </member>
        <member name="P:Towel.Constant`1.Two">
            <summary>Two [2]</summary>
        </member>
        <member name="P:Towel.Constant`1.Three">
            <summary>Three [3]</summary>
        </member>
        <member name="P:Towel.Constant`1.Four">
            <summary>Four [4]</summary>
        </member>
        <member name="P:Towel.Constant`1.Ten">
            <summary>Ten [10]</summary>
        </member>
        <member name="P:Towel.Constant`1.NegativeOne">
            <summary>Negative One [-1]</summary>
        </member>
        <member name="P:Towel.Constant`1.Pi">
            <summary>Ï€ [3.14...]</summary>
        </member>
        <member name="P:Towel.Constant`1.Ï€">
            <summary>Ï€ [3.14...]</summary>
        </member>
        <member name="P:Towel.Constant`1.Pi2">
            <summary>2Ï€ [6.28...]</summary>
        </member>
        <member name="P:Towel.Constant`1.Ï€2">
            <summary>2Ï€ [6.28...]</summary>
        </member>
        <member name="P:Towel.Constant`1.PiOver2">
            <summary>Ï€ / 2</summary>
        </member>
        <member name="P:Towel.Constant`1.Ï€Over2">
            <summary>Ï€ / 2</summary>
        </member>
        <member name="P:Towel.Constant`1.Pi3Over2">
            <summary>3Ï€/2</summary>
        </member>
        <member name="P:Towel.Constant`1.Ï€3Over2">
            <summary>3Ï€/2</summary>
        </member>
        <member name="P:Towel.Constant`1.FourOverPiSquared">
            <summary>4/(Ï€^2)</summary>
        </member>
        <member name="P:Towel.Constant`1.FourOverÏ€Squared">
            <summary>4/(Ï€^2)</summary>
        </member>
        <member name="P:Towel.Constant`1.Negative4OverPiSquared">
            <summary>-4/(Ï€^2)</summary>
        </member>
        <member name="P:Towel.Constant`1.Negative4OverÏ€Squared">
            <summary>-4/(Ï€^2)</summary>
        </member>
        <member name="M:Towel.Constant`1.ComputePi(System.Predicate{`0})">
            <summary>Computes the value of pi for the provided generic type.</summary>
            <param name="predicate">The cancellation token for cutting off computation.</param>
            <returns>The computed value of pi.</returns>
        </member>
        <member name="T:Towel.DataStructures.IArray`2">
            <summary>An indexed fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
            <typeparam name="TIndex">The generic type of the indexing.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IArray`2.Item(`1)">
            <summary>Allows indexed access of the array.</summary>
            <param name="index">The index of the array to get/set.</param>
            <returns>The value at the desired index.</returns>
        </member>
        <member name="P:Towel.DataStructures.IArray`2.Length">
            <summary>The length of the array.</summary>
        </member>
        <member name="T:Towel.DataStructures.IArray`1">
            <summary>An indexed fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.Array`1">
            <summary>Contiguous fixed-sized data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.Array`1.#ctor(System.Int32)">
            <summary>Constructs an array that implements a traversal delegate function
            which is an optimized "foreach" implementation.</summary>
            <param name="size">The length of the array in memory.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.#ctor(`0[])">
            <summary>Constructs by wrapping an existing array.</summary>
            <param name="array">The array to be wrapped.</param>
        </member>
        <member name="P:Towel.DataStructures.Array`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Array`1.Length">
            <summary>The length of the array.</summary>
        </member>
        <member name="M:Towel.DataStructures.Array`1.op_Implicit(`0[])~Towel.DataStructures.Array{`0}">
            <summary>Implicitly converts a C# System array into a Towel array.</summary>
            <param name="array">The array to be represented as a Towel array.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.op_Implicit(Towel.DataStructures.Array{`0})~`0[]">
            <summary>Implicitly converts a Towel array into a C# System array.</summary>
            <param name="array">The array to be represented as a C# System array.</param>
        </member>
        <member name="M:Towel.DataStructures.Array`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Array`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Array`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Array`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.IAvlTree`1">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IAvlTree`2">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.AvlTree">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.IAvlTree`1"/> and <see cref="T:Towel.DataStructures.IAvlTree`2"/>.</summary>
        </member>
        <member name="T:Towel.DataStructures.AvlTreeLinked">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.AvlTreeLinked`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked.New``1(System.Func{``0,``0,Towel.CompareResult})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.AvlTreeLinked`2"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.AvlTreeLinked`2"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.AvlTreeLinked`2">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.#ctor(`1)">
            <summary>Constructs an AVL Tree.</summary>
            <param name="compare">The comparison function for sorting <typeparamref name="T"/> values.</param>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.#ctor(Towel.DataStructures.AvlTreeLinked{`0,`1})">
            <summary>This constructor if for cloning purposes.</summary>
            <param name="tree">The tree to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`2.CurrentLeast">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`2.CurrentGreatest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`2.Compare">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.AvlTreeLinked`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.ContainsSift``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.TryGet``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.TryRemoveSift``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.StepperBreak``1(`0,`0,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.StepperReverseBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.StepperReverseBreak``1(`0,`0,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.Height(Towel.DataStructures.AvlTreeLinked{`0,`1}.Node)">
            <summary>
            This is just a protection against the null valued leaf nodes, which have a height of "-1".<br/>
            Runtime: O(1)
            </summary>
            <param name="node">The node to find the hight of.</param>
            <returns>Returns "-1" if null (leaf) or the height property of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.RemoveLeftMost(Towel.DataStructures.AvlTreeLinked{`0,`1}.Node,Towel.DataStructures.AvlTreeLinked{`0,`1}.Node@)">
            <summary>Removes the left-most child of an AVL Tree node and returns it
            through the out parameter.</summary>
            <param name="node">The tree to remove the left-most child from.</param>
            <param name="leftMost">The left-most child of this AVL tree.</param>
            <returns>The updated tree with the removal.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.RemoveRightMost(Towel.DataStructures.AvlTreeLinked{`0,`1}.Node,Towel.DataStructures.AvlTreeLinked{`0,`1}.Node@)">
            <summary>Removes the right-most child of an AVL Tree node and returns it
            through the out parameter.</summary>
            <param name="node">The tree to remove the right-most child from.</param>
            <param name="rightMost">The right-most child of this AVL tree.</param>
            <returns>The updated tree with the removal.</returns>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.SetHeight(Towel.DataStructures.AvlTreeLinked{`0,`1}.Node)">
            <summary>
            Sets the height of a tree based on its children's heights.<br/>
            Runtime: O(1)
            </summary>
            <param name="node">The tree to have its height adjusted.</param>
        </member>
        <member name="M:Towel.DataStructures.AvlTreeLinked`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.IBag`1">
            <summary>A bag between instances of two types. The polymorphism base for bag implementations in Towel.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IBag`1.Item(`0)">
            <summary>Allows indexed look-up of the structure. (Set does not replace the Add() method)</summary>
            <param name="countedValue">The "index" to access of the structure.</param>
            <returns>The value at the index of the requested key.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.TryGet(`0)">
            <summary>Tries to get the count of a value.</summary>
            <param name="value">The value to get the count of.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key was found or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the get failed.<br/>
            - <see cref="T:System.Int32"/>? Value: the value if the key was found or default if not.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.TrySet(`0,System.Int32)">
            <summary>Sets value in the bag.</summary>
            <param name="value">The value to be set.</param>
            <param name="count">The number of values to set.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key+value was set or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the set failed.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.TryAdd(`0,System.Int32)">
            <summary>Tries to add a value to the bag.</summary>
            <param name="value">The value to be added.</param>
            <param name="count">The number of values to be added.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the values was added or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add failed.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.TryRemove(`0)">
            <summary>Tries to remove a value from the bag.</summary>
            <param name="value">The value to remove from the bag.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the values were removed or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the remove failed.<br/>
            - <see cref="T:System.Int32"/>? OldCount: the count of the value before the removal.<br/>
            - <see cref="T:System.Int32"/>? NewCount: the count of the value after the removal.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.TryRemove(`0,System.Int32)">
            <summary>Tries to remove a value from the bag.</summary>
            <param name="value">The value to be removed.</param>
            <param name="count">The number of values to be removed.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the values were removed or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the remove failed.<br/>
            - <see cref="T:System.Int32"/>? OldCount: the count of the value before the removal.<br/>
            - <see cref="T:System.Int32"/>? NewCount: the count of the value after the removal.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.GetCounts">
            <summary>Gets an enumerator that will traverse the pairs of the bag.</summary>
            <returns>An enumerator that will traverse the pairs of the bag.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.CountsToArray">
            <summary>Gets an array with all the pairs in the bag.</summary>
            <returns>An array with all the pairs in the bag.</returns>
        </member>
        <member name="M:Towel.DataStructures.IBag`1.CountsBreak``1(``0)">
            <summary>Performs a function on every pair in a bag.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="step">The step function to perform on every pair.</param>
            <returns>The status of traversal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Bag">
            <summary>Static Extension class for bag interface implementers.</summary>
        </member>
        <member name="M:Towel.DataStructures.Bag.Get``1(Towel.DataStructures.IBag{``0},``0)">
            <summary>Gets the count of a <paramref name="value"/> in a <paramref name="bag"/>.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
            <param name="bag">The bag to get the count of a <paramref name="value"/> in.</param>
            <param name="value">The value to get the count of.</param>
            <returns>The count of the <paramref name="value"/>s in the <paramref name="bag"/>.</returns>
        </member>
        <member name="M:Towel.DataStructures.Bag.Set``1(Towel.DataStructures.IBag{``0},``0,System.Int32)">
            <summary>Sets the <paramref name="count"/> of a <paramref name="value"/> in a <paramref name="bag"/>.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
            <param name="bag">The bag to set the value count in.</param>
            <param name="value">The value to set the <paramref name="count"/> of.</param>
            <param name="count">The count to set the number of <paramref name="value"/>'s to.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Existed: True if the value already existed or false.<br/>
            - <see cref="T:System.Int32"/>? OldCount: The previous count if the value existed or default.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Bag.Counts``1(Towel.DataStructures.IBag{``0},System.Action{System.ValueTuple{System.Int32,``0}})">
            <summary>Performs a function on every pair in a bag.</summary>
            <typeparam name="T">The type of values in the bag.</typeparam>
            <param name="bag">The bag to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
        </member>
        <member name="M:Towel.DataStructures.Bag.Counts``2(Towel.DataStructures.IBag{``0},``1)">
            <summary>Performs a function on every pair in a bag.</summary>
            <typeparam name="T">The type of values in the bag.</typeparam>
            <typeparam name="TStep">The type of step function to perform on every pair.</typeparam>
            <param name="bag">The bag to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
        </member>
        <member name="M:Towel.DataStructures.Bag.CountsBreak``1(Towel.DataStructures.IBag{``0},System.Func{System.ValueTuple{System.Int32,``0},Towel.StepStatus})">
            <summary>Performs a function on every pair in a bag.</summary>
            <typeparam name="T">The type of values in the bag.</typeparam>
            <param name="bag">The bag to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="T:Towel.DataStructures.BagMap">
            <summary>Static helpers.</summary>
        </member>
        <member name="M:Towel.DataStructures.BagMap.New``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.BagMap`2"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.BagMap`2"/>.</returns>
        </member>
        <member name="M:Towel.DataStructures.BagMap.NewHashLinked``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.BagMap`2"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.BagMap`2"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.BagMap`2">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="TMap">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.#ctor(Towel.DataStructures.BagMap{`0,`1})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="bag">The bag to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.BagMap`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.BagMap`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TryAdd(`0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TryGet(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TrySet(`0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.TryRemove(`0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.CountsBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.GetCounts">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.BagMap`2.CountsToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.BTreeLinked">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.BTreeLinked`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked.New``1(System.Byte,System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.DataStructures.BTreeLinked`2.#ctor(System.Byte,`1)" />
            <inheritdoc cref="T:Towel.DataStructures.BTreeLinked`2" />
            <returns>The new constructed <see cref="T:Towel.DataStructures.BTreeLinked`2"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.BTreeLinked`2">
            <summary>B-Tree Data structure.</summary>
            <typeparam name="T">The type to store</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.#ctor(System.Byte,`1)">
            <summary>Creates a B-Tree having nodes of given maximum size. Maximum size must be even</summary>
            <param name="maxdegree">The maximum degree/children a node can have. Must be even</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
        </member>
        <member name="P:Towel.DataStructures.BTreeLinked`2.Count">
            <inheritdoc />
        </member>
        <member name="P:Towel.DataStructures.BTreeLinked`2.Compare">
            <inheritdoc />
        </member>
        <member name="P:Towel.DataStructures.BTreeLinked`2.MaxDegree">
            <summary>The fixed size of a node within this tree</summary>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.Search(`0,Towel.DataStructures.BTreeLinked{`0,`1}.Node@,System.Int32@)">
            <summary>
            Searches for an value in the tree and provides the
            node it is contained in and its index in the array (as 'out' variables)
            if it exists. Otherwise provides the leaf node where the value shold be inserted
            </summary>
            <param name="value">The value to search</param>
            <param name="node">The node found</param>
            <param name="index">The index at which it is found</param>
            <returns>Returns true if value exists in the tree, otherwise false</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.TryAdd(`0,Towel.DataStructures.BTreeLinked{`0,`1}.Node)">
            <summary>
            Finds the best index at which the insertion can be done and
            inserts the value at the given index, displacing the values as necessary <br/> <br/>
            Before using this method, ensure that the node is <br/>
            1. A leaf node <br/>
            2. Can support adding a value in it, i.e Count is at most MaxDegree-1 after insertion
            </summary>
            <param name="value">value to add</param>
            <param name="node">The node in which the value is to be added</param>
            <returns>returns true if addition was successful. If a duplicate is found, addition fails and the method returns false</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.Split(Towel.DataStructures.BTreeLinked{`0,`1}.Node)">
            <summary>
            Splits the full node into a node having two child nodes<br/><br/>
            Before calling this method, ensure that <br/>
            1. the node is full <br/>
            2. the parent node is Not full (Not applicable for the Root node)
            </summary>
            <param name="fullNode">The node to split</param>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.TryAdd(`0)">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.TryRemove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.ToArray">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.NextNode(Towel.DataStructures.BTreeLinked{`0,`1}.Node,System.Int32)">
            <summary>Given a value's index in a node, returns the node and index of the value which is next to the given value.</summary>
            <param name="node">The node in which the current value is contained</param>
            <param name="index">The index of the value within the node</param>
            <returns>The node and index of the next value</returns>
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.StepperBreak``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Towel.DataStructures.BTreeLinked`2.Clone">
            <inheritdoc />
        </member>
        <member name="T:Towel.DataStructures.IDataStructure`1">
            <summary>Polymorphism base for all data structures in Towel.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IDataStructure`1.ToArray">
            <summary>Constructs an array with the values of this data structure.</summary>
            <returns>An array with the values of this data structure.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure">
            <summary>Contains static members for <see cref="T:Towel.DataStructures.IDataStructure`1"/>.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IAuditable`1">
            <summary>Property of a data structure (does it have a contains method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IAuditable`1.Contains(`0)">
            <summary>Checks if the data structure contains a value.</summary>
            <param name="value">The value to look for in the data structure.</param>
            <returns>True if the value exists in the data structure. False if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IHashing`2">
            <summary>Represents a type that is hashing values of type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of values this type is hashing.</typeparam>
            <typeparam name="THash">The type that is hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IHashing`2.Hash">
            <summary>Gets the value of the type that is hashing <typeparamref name="T"/> values.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IComparing`2">
            <summary>Represents a type that is comparing values of type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of values this type is comparing.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IComparing`2.Compare">
            <summary>Gets the value of the comparer that is comparing <typeparamref name="T"/> values.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IAddable`1">
            <summary>Property of a data structure (does it have a Add method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IAddable`1.TryAdd(`0)">
            <summary>Tries to add a value to a data structure.</summary>
            <param name="value">The value to add to the data structure.</param>
            <returns>True if the value was added or false if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IRemovable`1">
            <summary>Property of a data structure (does it have a Romove method).</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IRemovable`1.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if the value was removed or false if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.ICountable">
            <summary>Property of a data structure (does it have a Count method).</summary>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.ICountable.Count">
            <summary>Gets the current count of the data structure.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IClearable">
            <summary>Property of a data structure (does it have a Clear method).</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.IClearable.Clear">
            <summary>Returns the data structure to an empty state.</summary>
        </member>
        <member name="T:Towel.DataStructures.DataStructure.IEquating`2">
            <summary>Represents a type that is equality checking values of type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of values this type is equality checking.</typeparam>
            <typeparam name="TEquate">The type that is equality checking <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.DataStructure.IEquating`2.Equate">
            <summary>Gets the value of the type that is checking <typeparamref name="T"/> values for equality.</summary>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.Add``1(Towel.DataStructures.DataStructure.IAddable{``0},``0)">
            <summary>Adds a value to a data structure.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="addable">The data structure to add the value to.</param>
            <param name="value">The value to add to the data structure.</param>
        </member>
        <member name="M:Towel.DataStructures.DataStructure.Remove``1(Towel.DataStructures.DataStructure.IRemovable{``0},``0)">
            <summary>Removes a value from a data structure.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="removable">The data structure to removable the value from.</param>
            <param name="value">The value to remove from the data structure.</param>
        </member>
        <member name="T:Towel.DataStructures.Graph">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.IGraph`1"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.Graph.Add``1(Towel.DataStructures.IGraph{``0},``0,``0)">
            <summary>Adds an edge to a graph.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="graph">The data structure to add the value to.</param>
            <param name="a">The start of the edge.</param>
            <param name="b">The end of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.Graph.Remove``1(Towel.DataStructures.IGraph{``0},``0)">
            <summary>Removes a value from a graph.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <param name="graph">The data structure to remove the value from.</param>
            <param name="value">The value to be removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Graph.Remove``1(Towel.DataStructures.IGraph{``0},``0,``0)">
            <summary>Removes an edge from a graph.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="graph">The data structure to remove the value from.</param>
            <param name="a">The start of the edge.</param>
            <param name="b">The end of the edge.</param>
        </member>
        <member name="M:Towel.DataStructures.Graph.Edges``1(Towel.DataStructures.IGraph{``0},System.Action{System.ValueTuple{``0,``0}})">
            <summary>Invokes a function on every edge in the graph.</summary>
            <typeparam name="T">The type of values stored in this graph.</typeparam>
            <param name="graph">The graph to traverse the edges of.</param>
            <param name="step">The function on every edge in the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.Graph.Edges``2(Towel.DataStructures.IGraph{``0},``1)">
            <summary>Invokes a function on every edge in the graph.</summary>
            <typeparam name="T">The type of values stored in this graph.</typeparam>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="graph">The graph to traverse the edges of.</param>
            <param name="step">The function on every edge in the graph.</param>
        </member>
        <member name="M:Towel.DataStructures.Graph.EdgesBreak``1(Towel.DataStructures.IGraph{``0},System.Func{System.ValueTuple{``0,``0},Towel.StepStatus})">
            <summary>Invokes a function on every edge in the graph.</summary>
            <typeparam name="T">The type of values stored in this graph.</typeparam>
            <param name="graph">The graph to traverse the edges of.</param>
            <param name="step">The function on every edge in the graph.</param>
            <returns>The status of iteration.</returns>
        </member>
        <member name="T:Towel.DataStructures.IGraph`1">
            <summary>A graph data structure that stores nodes and edges.</summary>
            <typeparam name="T">The generic node type to store in the graph.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IGraph`1.EdgeCount">
            <summary>The number of edges in the graph.</summary>
        </member>
        <member name="P:Towel.DataStructures.IGraph`1.NodeCount">
            <summary>The number of nodes in the graph.</summary>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Adjacent(`0,`0)">
            <summary>Checks if an edge exists from <paramref name="a"/> to <paramref name="b"/>.</summary>
            <param name="a">The start of the edge.</param>
            <param name="b">The end of the edge.</param>
            <returns>True if an edge exists from <paramref name="a"/> to <paramref name="b"/>; False if not</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.Neighbors(`0,System.Action{`0})">
            <summary>Gets all the nodes adjacent to a and performs the provided delegate on each.</summary>
            <param name="a">The node to find all the adjacent node to.</param>
            <param name="function">The delegate to perform on each adjacent node to a.</param>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.GetNeighbours(`0)">
            <summary>Gets enumerator of all neighbours of a node</summary>
            <param name="node">The node to get neighbours of</param>
            <returns>IEnumerable of all neighbours of the given node</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.TryAdd(`0,`0)">
            <summary>Adds an edge to the graph starting at a and ending at b.</summary>
            <param name="start">The stating point of the edge to add.</param>
            <param name="end">The ending point of the edge to add.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the edge was added or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add failed
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.TryRemove(`0,`0)">
            <summary>Removes an edge from the graph.</summary>
            <param name="start">The starting point of the edge to remove.</param>
            <param name="end">The ending point of the edge to remove.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the edge was removed or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the remove failed
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IGraph`1.EdgesBreak``1(``0)">
            <summary>Invokes a function on every edge in the graph.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="step">The function to perform on every edge in the graph.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphSetOmnitree">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.GraphSetOmnitree`3"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree.New``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.GraphSetOmnitree`3"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.GraphSetOmnitree`3"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphSetOmnitree`3">
            <summary>Stores the graph as a set-hash of nodes and quadtree of edges.</summary>
            <typeparam name="T">The generic type of this data structure.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.GraphSetOmnitree`3.Edge">
            <summary>Represents an edge in a graph.</summary>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.Edge.Start">
            <summary>The starting node of the edge.</summary>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.Edge.End">
            <summary>The ending node of the edge.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.#ctor(Towel.DataStructures.GraphSetOmnitree{`0,`1,`2})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="graph">The graph to construct a clone of.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.#ctor(`1,`2,System.Func{`0,`0,Towel.CompareResult})">
            <summary>Constructs a new GraphSetOmnitree.</summary>
            <param name="equate">The equate delegate for the data structure to use.</param>
            <param name="compare">The compare delegate for the data structure to use.</param>
            <param name="hash">The hash delegate for the datastructure to use.</param>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.Equate">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.EdgeCount">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphSetOmnitree`3.NodeCount">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.TryAdd(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.TryRemove(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.Adjacent(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.Neighbors(`0,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.EdgesBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.GetNeighbours(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphSetOmnitree`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.GraphMap">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.GraphMap`3"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphMap.New``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.GraphMap`3"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.GraphMap`3"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphMap`3">
            <summary>Stores a graph as a map and nested map (adjacency matrix).</summary>
            <typeparam name="T">The generic node type of this graph.</typeparam>
            <typeparam name="TEquate">The type of the equate function.</typeparam>
            <typeparam name="THash">The type of the hash function.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.#ctor(`1,`2)">
            <summary>Constructs a new GraphMap.</summary>
            <param name="equate">The equate delegate for the data structure to use.</param>
            <param name="hash">The hash function for the data structure to use.</param>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.#ctor(Towel.DataStructures.GraphMap{`0,`1,`2})">
            <summary>Constructor for cloning purposes.</summary>
            <param name="graph">The graph to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`3.Equate">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`3.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`3.EdgeCount">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphMap`3.NodeCount">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.TryAdd(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.TryRemove(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.Adjacent(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.Neighbors(`0,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.EdgesBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.GetNeighbours(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphMap`3.Clear">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.IGraphWeighted`2">
            <summary>A weighted graph data structure that stores nodes, edges with their corresponding weights.</summary>
            <typeparam name="T">The generic node type of this graph.</typeparam>
            <typeparam name="TWeight">The generic weight type of this graph.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IGraphWeighted`2.TryAdd(`0,`0,`1)">
            <summary>Adds a weighted edge to the graph </summary>
            <param name="start">The starting point of the edge to add</param>
            <param name="end">The ending point of the edge to add</param>
            <param name="weight">The weight of the edge</param>
            <returns>
            (<see cref="T:System.Boolean"/> Success, <see cref="T:System.Exception"/>? Exception)<br/>
            - <see cref="T:System.Boolean"/> Success: true if the value was added or false<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add was not successful
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IGraphWeighted`2.Adjacent(`0,`0,`1@)">
            <summary>Checks if b is adjacent to a.</summary>
            <param name="a">The starting point of the edge to check.</param>
            <param name="b">The ending point of the edge to check.</param>
            <param name="weight">The weight of the edge, if it exists.</param>
            <returns>True if b is adjacent to a; False if not</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraphWeighted`2.GetWeight(`0,`0)">
            <summary>Gets the weight of an edge.</summary>
            <param name="a">The starting node of the edge.</param>
            <param name="b">The ending node of the edge.</param>
            <returns>The weight of the edge.</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraphWeighted`2.EdgesToArray">
            <summary>Enumerates and returns all edges present in the graph</summary>
            <returns>Array of Tuple of nodes that represent an edge</returns>
        </member>
        <member name="M:Towel.DataStructures.IGraphWeighted`2.EdgesAndWeightsToArray">
            <summary>Enumerates and returns all edges present in the graph</summary>
            <returns>Array of Tuple of nodes and weight that represent an edge</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphWeighted">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.IGraphWeighted`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphWeighted.Add``2(Towel.DataStructures.IGraphWeighted{``0,``1},``0,``0,``1)">
            <summary>Adds an edge to a weighted graph</summary>
            <typeparam name="T">The generic node type of this graph.</typeparam>
            <typeparam name="TWeight">The generic weight type of this graph.</typeparam>
            <param name="graph">The data structure to add the value to.</param>
            <param name="start">The starting point of the edge.</param>
            <param name="end">The ending point of the edge.</param>
            <param name="weight">The weight of the edge.</param>
        </member>
        <member name="T:Towel.DataStructures.GraphWeightedMap">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.GraphWeightedMap`4"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap.New``2(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.GraphWeightedMap`4"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TWeight">The type of weight stored in the edges in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.GraphWeightedMap`4"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.GraphWeightedMap`4">
            <summary>Implements a weighted graph. Implements a Dictionary of Nodes and edges.</summary>
            <typeparam name="T">The generic node type of this graph.</typeparam>
            <typeparam name="TWeight">The generic weight type of this graph.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.#ctor(`2,`3)">
            <summary>Constructs a new graph.</summary>
            <param name="equate">The function for equality checking <typeparamref name="T"/> values.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
        </member>
        <member name="P:Towel.DataStructures.GraphWeightedMap`4.Equate">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphWeightedMap`4.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphWeightedMap`4.EdgeCount">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.GraphWeightedMap`4.NodeCount">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.TryAdd(`0,`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.Adjacent(`0,`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.Adjacent(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.Neighbors(`0,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.TryRemove(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.EdgesBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.EdgesToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.EdgesAndWeightsToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.GetNeighbours(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.GraphWeightedMap`4.GetWeight(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.IHeap`1">
            <summary>Stores items based on priorities and allows access to the highest priority item.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Enqueue(`0)">
            <summary>Enqueues an item into the heap.</summary>
            <param name="value">The value to queue in the heap.</param>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Dequeue">
            <summary>Removes and returns the highest priority item.</summary>
            <returns>The highest priority item from the heap.</returns>
        </member>
        <member name="M:Towel.DataStructures.IHeap`1.Peek">
            <summary>Returns the highest priority item.</summary>
            <returns>The highest priority item in the heap.</returns>
        </member>
        <member name="T:Towel.DataStructures.IHeap`2">
            <summary>Stores items based on priorities and allows access to the highest priority item.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.Heap">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.IAvlTree`2"/>.</summary>
        </member>
        <member name="T:Towel.DataStructures.HeapArray">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.HeapArray`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.HeapArray.New``1(System.Func{``0,``0,Towel.CompareResult},System.Nullable{System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.HeapArray`2"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="minimumCapacity">The capacity you want this priority queue to have.</param>
            <returns>The newly constructed <see cref="T:Towel.DataStructures.HeapArray`2"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.HeapArray`2">
            <summary>A heap with static priorities implemented as a array.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.#ctor(`1,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Towel.DataStructures.HeapArray.New``1(System.Func{``0,``0,Towel.CompareResult},System.Nullable{System.Int32})"/>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`2.Compare">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`2.CurrentCapacity">
            <summary>
            The maximum items the queue can hold.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`2.MinimumCapacity">
            <summary>
            The minumum capacity of this queue to limit low-level resizing.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.HeapArray`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.LeftChild(System.Int32)">
            <summary>Gets the index of the left child of the provided item.</summary>
            <param name="parent">The item to find the left child of.</param>
            <returns>The index of the left child of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.RightChild(System.Int32)">
            <summary>Gets the index of the right child of the provided item.</summary>
            <param name="parent">The item to find the right child of.</param>
            <returns>The index of the right child of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Parent(System.Int32)">
            <summary>Gets the index of the parent of the provided item.</summary>
            <param name="child">The item to find the parent of.</param>
            <returns>The index of the parent of the provided item.</returns>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Enqueue(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Requeue(`0)">
            <summary>
            Requeues an item after a change has occured.<br/>
            Runtime: O(n)
            </summary>
            <param name="item">The item to requeue.</param>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.ShiftUp(System.Int32)">
            <summary>
            Standard priority queue algorithm for up sifting.<br/>
            Runtime: O(ln(n)), Î©(1)
            </summary>
            <param name="index">The index to be up sifted.</param>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.ShiftDown(System.Int32)">
            <summary>
            Standard priority queue algorithm for sifting down.<br/>
            Runtime: O(ln(n)), Î©(1)
            </summary>
            <param name="index">The index to be down sifted.</param>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.HeapArray`2.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.Link">
            <summary>Represents a link between objects.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link.Size">
            <summary>The number of values in the tuple.</summary>
        </member>
        <member name="T:Towel.DataStructures.Link`1">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`1.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`1.#ctor(`0)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`1.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Implicit(System.ValueTuple{`0})~Towel.DataStructures.Link{`0}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Implicit(Towel.DataStructures.Link{`0})~System.ValueTuple{`0}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Implicit(System.Tuple{`0})~Towel.DataStructures.Link{`0}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Implicit(Towel.DataStructures.Link{`0})~System.Tuple{`0}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.op_Implicit(Towel.DataStructures.LinkStruct{`0})~Towel.DataStructures.Link{`0}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Equals(Towel.DataStructures.Link{`0})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`1.Deconstruct(`0@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`1">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`1.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.#ctor(`0)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`1.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Implicit(System.ValueTuple{`0})~Towel.DataStructures.LinkStruct{`0}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Implicit(Towel.DataStructures.LinkStruct{`0})~System.ValueTuple{`0}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Implicit(System.Tuple{`0})~Towel.DataStructures.LinkStruct{`0}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Implicit(Towel.DataStructures.LinkStruct{`0})~System.Tuple{`0}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.op_Implicit(Towel.DataStructures.Link{`0})~Towel.DataStructures.LinkStruct{`0}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Equals(Towel.DataStructures.LinkStruct{`0})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`1.Deconstruct(`0@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`2">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`2.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`2.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`2.#ctor(`0,`1)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`2.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Implicit(System.ValueTuple{`0,`1})~Towel.DataStructures.Link{`0,`1}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Implicit(Towel.DataStructures.Link{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Implicit(System.Tuple{`0,`1})~Towel.DataStructures.Link{`0,`1}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Implicit(Towel.DataStructures.Link{`0,`1})~System.Tuple{`0,`1}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1})~Towel.DataStructures.Link{`0,`1}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Equals(Towel.DataStructures.Link{`0,`1})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`2.Deconstruct(`0@,`1@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`2">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.#ctor(`0,`1)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Implicit(System.ValueTuple{`0,`1})~Towel.DataStructures.LinkStruct{`0,`1}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1})~System.ValueTuple{`0,`1}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Implicit(System.Tuple{`0,`1})~Towel.DataStructures.LinkStruct{`0,`1}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1})~System.Tuple{`0,`1}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.op_Implicit(Towel.DataStructures.Link{`0,`1})~Towel.DataStructures.LinkStruct{`0,`1}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Equals(Towel.DataStructures.LinkStruct{`0,`1})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`2.Deconstruct(`0@,`1@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`3">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`3.#ctor(`0,`1,`2)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`3.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Towel.DataStructures.Link{`0,`1,`2}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Implicit(Towel.DataStructures.Link{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Implicit(System.Tuple{`0,`1,`2})~Towel.DataStructures.Link{`0,`1,`2}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Implicit(Towel.DataStructures.Link{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2})~Towel.DataStructures.Link{`0,`1,`2}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Equals(Towel.DataStructures.Link{`0,`1,`2})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`3.Deconstruct(`0@,`1@,`2@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`3">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.#ctor(`0,`1,`2)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`3.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Towel.DataStructures.LinkStruct{`0,`1,`2}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2})~System.ValueTuple{`0,`1,`2}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Implicit(System.Tuple{`0,`1,`2})~Towel.DataStructures.LinkStruct{`0,`1,`2}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.op_Implicit(Towel.DataStructures.Link{`0,`1,`2})~Towel.DataStructures.LinkStruct{`0,`1,`2}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Equals(Towel.DataStructures.LinkStruct{`0,`1,`2})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`3.Deconstruct(`0@,`1@,`2@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`4">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`4.#ctor(`0,`1,`2,`3)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`4.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~Towel.DataStructures.Link{`0,`1,`2,`3}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Implicit(System.Tuple{`0,`1,`2,`3})~Towel.DataStructures.Link{`0,`1,`2,`3}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3})~System.Tuple{`0,`1,`2,`3}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})~Towel.DataStructures.Link{`0,`1,`2,`3}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Equals(Towel.DataStructures.Link{`0,`1,`2,`3})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`4.Deconstruct(`0@,`1@,`2@,`3@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`4">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.#ctor(`0,`1,`2,`3)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`4.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})~System.ValueTuple{`0,`1,`2,`3}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Implicit(System.Tuple{`0,`1,`2,`3})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})~System.Tuple{`0,`1,`2,`3}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Equals(Towel.DataStructures.LinkStruct{`0,`1,`2,`3})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`4.Deconstruct(`0@,`1@,`2@,`3@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`5">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`5.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~Towel.DataStructures.Link{`0,`1,`2,`3,`4}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Implicit(System.Tuple{`0,`1,`2,`3,`4})~Towel.DataStructures.Link{`0,`1,`2,`3,`4}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4})~System.Tuple{`0,`1,`2,`3,`4}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})~Towel.DataStructures.Link{`0,`1,`2,`3,`4}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`5.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Equals(Towel.DataStructures.Link{`0,`1,`2,`3,`4})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`5.Deconstruct(`0@,`1@,`2@,`3@,`4@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`5">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`5.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})~System.ValueTuple{`0,`1,`2,`3,`4}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Implicit(System.Tuple{`0,`1,`2,`3,`4})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})~System.Tuple{`0,`1,`2,`3,`4}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Equals(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`5.Deconstruct(`0@,`1@,`2@,`3@,`4@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`6">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
            <typeparam name="T6">The type of #6 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Value6">
            <summary>The #6 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
            <param name="value6">The #6 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`6.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Implicit(System.Tuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})~System.Tuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`6.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Equals(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`6.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
            <param name="value6">The #6 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`6">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
            <typeparam name="T6">The type of #6 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Value6">
            <summary>The #6 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
            <param name="value6">The #6 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`6.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})~System.ValueTuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Implicit(System.Tuple{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})~System.Tuple{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Equals(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`6.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
            <param name="value6">The #6 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.Link`7">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
            <typeparam name="T6">The type of #6 value in the link.</typeparam>
            <typeparam name="T7">The type of #7 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value6">
            <summary>The #6 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Value7">
            <summary>The #7 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.Link`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Constructs a link of values.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
            <param name="value6">The #6 value to be linked.</param>
            <param name="value7">The #7 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.Link`7.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Implicit(System.Tuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})~System.Tuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.Link`7.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Equals(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Link`7.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,`6@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
            <param name="value6">The #6 value of the link.</param>
            <param name="value7">The #7 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.LinkStruct`7">
            <summary>Represents a link between objects.</summary>
            <typeparam name="T1">The type of #1 value in the link.</typeparam>
            <typeparam name="T2">The type of #2 value in the link.</typeparam>
            <typeparam name="T3">The type of #3 value in the link.</typeparam>
            <typeparam name="T4">The type of #4 value in the link.</typeparam>
            <typeparam name="T5">The type of #5 value in the link.</typeparam>
            <typeparam name="T6">The type of #6 value in the link.</typeparam>
            <typeparam name="T7">The type of #7 value in the link.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value1">
            <summary>The #1 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value2">
            <summary>The #2 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value3">
            <summary>The #3 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value4">
            <summary>The #4 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value5">
            <summary>The #5 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value6">
            <summary>The #6 value of the link.</summary>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Value7">
            <summary>The #7 value of the link.</summary>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Creates a link between objects.</summary>
            <param name="value1">The #1 value to be linked.</param>
            <param name="value2">The #2 value to be linked.</param>
            <param name="value3">The #3 value to be linked.</param>
            <param name="value4">The #4 value to be linked.</param>
            <param name="value5">The #5 value to be linked.</param>
            <param name="value6">The #6 value to be linked.</param>
            <param name="value7">The #7 value to be linked.</param>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Size">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.LinkStruct`7.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})~System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Implicit(System.Tuple{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a tuple to a link.</summary>
            <param name="tuple">The tuple to convert to a link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Implicit(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})~System.Tuple{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a link to a tuple.</summary>
            <param name="link">The link to convert to a tuple.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.op_Implicit(Towel.DataStructures.Link{`0,`1,`2,`3,`4,`5,`6})~Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Converts a class link to a struct link.</summary>
            <param name="link">The class link to convert to a struct link.</param>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Types">
            <summary>Gets the types of the values of this link.</summary>
            <returns>The types of the values of this link.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Equals(Towel.DataStructures.LinkStruct{`0,`1,`2,`3,`4,`5,`6})">
            <summary>Check for equality with another link.</summary>
            <param name="b">The other link to check for equality with.</param>
            <returns>True if equal; false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.LinkStruct`7.Deconstruct(`0@,`1@,`2@,`3@,`4@,`5@,`6@)">
            <summary>Deconstructs the link.</summary>
            <param name="value1">The #1 value of the link.</param>
            <param name="value2">The #2 value of the link.</param>
            <param name="value3">The #3 value of the link.</param>
            <param name="value4">The #4 value of the link.</param>
            <param name="value5">The #5 value of the link.</param>
            <param name="value6">The #6 value of the link.</param>
            <param name="value7">The #7 value of the link.</param>
        </member>
        <member name="T:Towel.DataStructures.IList`1">
            <summary>A primitive dynamic sized data structure.</summary>
            <typeparam name="T">The type of items to store in the list.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IList`1.TryRemoveFirst``1(System.Exception@,``0)">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <param name="predicate">The predicate to determine removal.</param>
            <returns>True if the value was removed. False if the value did not exist.</returns>
        </member>
        <member name="M:Towel.DataStructures.IList`1.RemoveAll``1(``0)">
            <summary>Removes all occurences of predicated values from the list.</summary>
            <typeparam name="TPredicate">The type of predicate to determine removals.</typeparam>
            <param name="predicate">The predicate to determine removals.</param>
        </member>
        <member name="T:Towel.DataStructures.List">
            <summary>Contains static extension methods for IList types.</summary>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveAll``1(Towel.DataStructures.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Removes all predicated values from an <see cref="T:Towel.DataStructures.IList`1"/>.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The <see cref="T:Towel.DataStructures.IList`1"/> to remove values from.</param>
            <param name="predicate">The predicate for selecting removals from the <see cref="T:Towel.DataStructures.IList`1"/>.</param>
        </member>
        <member name="M:Towel.DataStructures.List.TryRemoveFirst``1(Towel.DataStructures.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Tries to removes the first predicated value from an <see cref="T:Towel.DataStructures.IList`1"/>.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The <see cref="T:Towel.DataStructures.IList`1"/> to remove an element from.</param>
            <param name="predicate">The predicate for selecting the removal from the <see cref="T:Towel.DataStructures.IList`1"/>.</param>
            <returns>True if the predicated element was found and removed. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.List.TryRemoveFirst``1(Towel.DataStructures.IList{``0},System.Func{``0,System.Boolean},System.Exception@)">
            <summary>Tries to removes the first predicated value from an <see cref="T:Towel.DataStructures.IList`1"/>.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The <see cref="T:Towel.DataStructures.IList`1"/> to remove an element from.</param>
            <param name="predicate">The predicate for selecting the removal from the <see cref="T:Towel.DataStructures.IList`1"/>.</param>
            <param name="exception">The exception that occured if the removal failed.</param>
            <returns>True if the predicated element was found and removed. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveFirst``1(Towel.DataStructures.IList{``0},System.Func{``0,System.Boolean})">
            <summary>Removes the first equality by object reference.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the value from.</param>
            <param name="predicate">The predicate to determine removal.</param>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveFirst``1(Towel.DataStructures.IList{``0},``0)">
            <summary>Removes the first occurence of an item in the list.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the value from.</param>
            <param name="value">The value to remove the first occurence of.</param>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveFirst``1(Towel.DataStructures.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes the first occurence of an item in the list.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the value from.</param>
            <param name="value">The value to remove the first occurence of.</param>
            <param name="equate">The delegate for performing equality checks.</param>
        </member>
        <member name="M:Towel.DataStructures.List.TryRemoveFirst``1(Towel.DataStructures.IList{``0},``0)">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the value from.</param>
            <param name="value">The value to remove the first occurence of.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.List.TryRemoveFirst``1(Towel.DataStructures.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes the first occurence of an item in the list or returns false.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the value from.</param>
            <param name="value">The value to remove the first occurence of.</param>
            <param name="equate">The delegate for performing equality checks.</param>
            <returns>True if the item was found and removed; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveAll``1(Towel.DataStructures.IList{``0},``0)">
            <summary>Removes all occurences of an item in the list.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the values from.</param>
            <param name="value">The value to remove all occurences of.</param>
        </member>
        <member name="M:Towel.DataStructures.List.RemoveAll``1(Towel.DataStructures.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of an item in the list.</summary>
            <typeparam name="T">The generic type of values inside the <see cref="T:Towel.DataStructures.IList`1"/>.</typeparam>
            <param name="iList">The list to remove the values from.</param>
            <param name="value">The value to remove all occurences of.</param>
            <param name="equate">The delegate for performing equality checks.</param>
        </member>
        <member name="T:Towel.DataStructures.ListLinked`1">
            <summary>Implements a growing, singularly-linked list data structure that inherits InterfaceTraversable.</summary>
            <typeparam name="T">The type of objects to be placed in the list.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.#ctor">
            <summary>Creates an instance of a <see cref="T:Towel.DataStructures.ListLinked`1"/>.<br/></summary>
        </member>
        <member name="P:Towel.DataStructures.ListLinked`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.RemoveFirst(System.Func{`0,System.Boolean})">
            <summary>Removes the first equality by object reference.</summary>
            <param name="predicate">The predicate to determine removal.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.RemoveAll``1(``0)">
            <summary>Removes all predicated items from the list.</summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="predicate">The predicate to determine removal.</param>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.TryRemoveFirst(System.Func{`0,System.Boolean})">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <param name="predicate">The predicate to determine removal.</param>
            <returns>True if the value was removed. False if the value did not exist.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.TryRemoveFirst(System.Func{`0,System.Boolean},System.Exception@)">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <param name="predicate">The predicate to determine removal.</param>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <returns>True if the value was removed. False if the value did not exist.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.TryRemoveFirst``1(System.Exception@,``0)">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <param name="predicate">The predicate to determine removal.</param>
            <returns>True if the value was removed. False if the value did not exist.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListLinked`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.ListArray`1">
            <summary>A list implemented as a growing array.</summary>
            <typeparam name="T">The type of objects to be placed in the list.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.#ctor">
            <summary>Creates an instance of a <see cref="T:Towel.DataStructures.ListArray`1"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of a ListArray, and sets it's minimum capacity.<br/>
            Runtime: O(1)
            </summary>
            <param name="expectedCount">The initial and smallest array size allowed by this list.</param>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.Item(System.Int32)">
            <summary>Look-up and set an indexed item in the list.</summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.ListArray`1.CurrentCapacity">
            <summary>
            Gets the current capacity of the list.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Add(`0,System.Int32)">
            <summary>Adds an item at a given index.</summary>
            <param name="addition">The item to be added.</param>
            <param name="index">The index to add the item at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index &lt; 0 || index &gt; <see cref="P:Towel.DataStructures.ListArray`1.CurrentCapacity"/></exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:Towel.DataStructures.ListArray`1.Count"/> == <see cref="P:Towel.DataStructures.ListArray`1.CurrentCapacity"/> &amp;&amp; <see cref="P:Towel.DataStructures.ListArray`1.CurrentCapacity"/> &gt; <see cref="F:System.Int32.MaxValue"/> / 2</exception>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Remove(System.Int32)">
            <summary>
            Removes the item at a specific index.<br/>
            Runtime: O(n), Î©(n - index), Îµ(n - index)
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveWithoutShrink(System.Int32)">
            <summary>
            Removes the item at a specific index.<br/>
            Runtime: Î˜(n - index)
            </summary>
            <param name="index">The index of the item to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when: index &lt; 0 || index &gt;= _count</exception>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveAll``1(``0)">
            <summary>
            Removes all predicated items from the list.<br/>
            Runtime: Î˜(n)
            </summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="predicate">The predicate to determine removals.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveAllWithoutShrink``1(``0)">
            <summary>
            Removes all predicated items from the list.<br/>
            Runtime: Î˜(n)
            </summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="predicate">The predicate to determine removals.</param>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveFirst(System.Func{`0,System.Boolean})">
            <summary>
            Removes the first predicated value from the list.<br/>
            Runtime: O(n), Î©(1)
            </summary>
            <param name="predicate">The predicate to determine removals.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="predicate"/> does not find a <typeparamref name="T"/> in the list.</exception>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveFirstWithoutShrink(`0,System.Func{`0,`0,System.Boolean})">
            <summary>
            Removes the first occurence of a value from the list without causing the list to shrink.<br/>
            Runtime: O(n), Î©(1)
            </summary>
            <param name="value">The value to remove.</param>
            <param name="equate">The delegate providing the equality check.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="value"/> is not found in the list.</exception>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.RemoveFirstWithoutShrink(System.Func{`0,System.Boolean})">
            <summary>
            Removes the first predicated value from the list wihtout shrinking the list.<br/>
            Runtime: O(n), Î©(1)
            </summary>
            <param name="predicate">The predicate to determine removals.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="predicate"/> does not find a <typeparamref name="T"/> in the list.</exception>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.TryRemoveFirst(System.Func{`0,System.Boolean},System.Exception@)">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <param name="predicate">The predicate to determine removals.</param>
            <param name="exception">The exception that occured if the removal failed.</param>
            <returns>True if the item was found and removed. False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.TryRemoveFirst``1(System.Exception@,``0)">
            <summary>Tries to remove the first predicated value if the value exists.</summary>
            <typeparam name="TPredicate">The type of predicate to determine removal.</typeparam>
            <param name="exception">The exception that occurred if the remove failed.</param>
            <param name="predicate">The predicate to determine removal.</param>
            <returns>True if the value was removed. False if the value did not exist.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.GetEnumerator">
            <summary>Gets the enumerator for the data structure.</summary>
            <returns>The enumerator for the data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.ListArray`1.Trim">
            <summary>Resizes this allocation to the current count.</summary>
        </member>
        <member name="T:Towel.DataStructures.IMap`2">
            <summary>A map between instances of two types. The polymorphism base for Map implementations in Towel.</summary>
            <typeparam name="T">The generic type to be stored in this data structure.</typeparam>
            <typeparam name="TKey">The type of keys used to look up items in this structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IMap`2.Item(`1)">
            <summary>Allows indexed look-up of the structure. (Set does not replace the Add() method)</summary>
            <param name="key">The "index" to access of the structure.</param>
            <returns>The value at the index of the requested key.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TryGet(`1)">
            <summary>Tries to get a value by key.</summary>
            <param name="key">The key of the value to get.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key was found or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the get failed.<br/>
            - <typeparamref name="T"/>? Value: the value if the key was found or default if not.
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TrySet(`1,`0)">
            <summary>Sets value in the map.</summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be set.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key+value was set or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the set failed.<br/>
            - <see cref="T:System.Boolean"/>? Existed: if the key existed prior to being set<br/>
            - <typeparamref name="T"/>? OldValue: the previous value if the key existed prior to being set
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TryAdd(`1,`0)">
            <summary>Tries to add a value to the map.</summary>
            <param name="key">The key of the value.</param>
            <param name="value">The value to be added.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key+value was added or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add failed
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TryRemoveOrUpdate``2(`1,``0,``1)">
            <summary>Tries to update a value in the map the relative key exists.</summary>
            <typeparam name="TRemovePredicate">The type of predicate determining if the pair should be removed.</typeparam>
            <typeparam name="TUpdate">The type of function to update the value.</typeparam>
            <param name="key">The key of the value to update.</param>
            <param name="removePredicate">The predicate determining if the pair should be removed.</param>
            <param name="update">The function to update the value relative to the key.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key was found or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add failed<br/>
            - <typeparamref name="T"/>? OldValue: the non-updated value if the key was found or default if not<br/>
            - <typeparamref name="T"/>? NewValue: the updated value if the key was found or default if not
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TryUpdate``1(`1,``0)">
            <summary>Tries to update a value in the map the relative key exists.</summary>
            <typeparam name="TUpdate">The type of function to update the value.</typeparam>
            <param name="key">The key of the value to update.</param>
            <param name="update">The function to update the value relative to the key.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key was found or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add failed<br/>
            - <typeparamref name="T"/>? OldValue: the non-updated value if the key was found or default if not<br/>
            - <typeparamref name="T"/>? NewValue: the updated value if the key was found or default if not
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.TryAddOrUpdate``1(`1,`0,``0)">
            <summary>Adds or updates the value at the given key.</summary>
            <typeparam name="TUpdate">The type of function to update the value if present.</typeparam>
            <param name="key">The key of the value to add or update.</param>
            <param name="value">The value to add if not already present.</param>
            <param name="update">The function to update the value if present.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the value was added or updated or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add or update failed.<br/>
            - <see cref="T:System.Boolean"/>? Existed: if the key existed prior to the add or update<br/>
            - <typeparamref name="T"/>? OldValue: the old value if the key existed prior to the add or update
            </returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.GetKeys">
            <summary>Gets an enumerator that will traverse the keys of the map.</summary>
            <returns>An enumerator that will traverse the keys of the map.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.KeysToArray">
            <summary>Gets an array with all the keys in the map.</summary>
            <returns>An array with all the keys in the map.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.KeysBreak``1(``0)">
            <summary>Performs a function on every key in a map.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="step">The step function to perform on every key.</param>
            <returns>The status of traversal.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.GetPairs">
            <summary>Gets an enumerator that will traverse the pairs of the map.</summary>
            <returns>An enumerator that will traverse the pairs of the map.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.PairsToArray">
            <summary>Gets an array with all the pairs in the map.</summary>
            <returns>An array with all the pairs in the map.</returns>
        </member>
        <member name="M:Towel.DataStructures.IMap`2.PairsBreak``1(``0)">
            <summary>Performs a function on every pair in a map.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="step">The step function to perform on every pair.</param>
            <returns>The status of traversal.</returns>
        </member>
        <member name="T:Towel.DataStructures.Map">
            <summary>Static Extension class for Map interface implementers.</summary>
        </member>
        <member name="M:Towel.DataStructures.Map.Update``2(Towel.DataStructures.IMap{``0,``1},``1,System.Func{``0,``0})">
            <summary>Updates a value in the map the relative key exists.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to update the value in.</param>
            <param name="key">The key of the value to update.</param>
            <param name="update">The function to update the value relative to the key.</param>
            <returns>
            (<typeparamref name="T"/> OldValue, <typeparamref name="T"/> NewValue)<br/>
            - <typeparamref name="T"/> OldValue: the value relative tothe key before to the update<br/>
            - <typeparamref name="T"/> NewValue: the value relative tothe key after to the update
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.AddOrUpdate``2(Towel.DataStructures.IMap{``0,``1},``1,``0,System.Func{``0,``0})">
            <summary>Adds or updates the value at the given key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to add or update the value in.</param>
            <param name="key">The key of the value to add or update.</param>
            <param name="value">The value to add if not already present.</param>
            <param name="update">The function to update the value if present.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Existed, <typeparamref name="T"/> OldValue)<br/>
            - <see cref="T:System.Boolean"/> Existed: true if the key was already in the map<br/>
            - <typeparamref name="T"/> OldValue: the value relative tothe key before to the update if it existed or default
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.Update``3(Towel.DataStructures.IMap{``0,``1},``1,``2)">
            <summary>Updates a value in the map the relative key exists.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <typeparam name="TUpdate">The type of function to update the value.</typeparam>
            <param name="map">The map to update the value in.</param>
            <param name="key">The key of the value to update.</param>
            <param name="update">The function to update the value relative to the key.</param>
            <returns>
            (<typeparamref name="T"/> OldValue, <typeparamref name="T"/> NewValue)<br/>
            - <typeparamref name="T"/> OldValue: the value relative tothe key before to the update<br/>
            - <typeparamref name="T"/> NewValue: the value relative tothe key after to the update
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.AddOrUpdate``3(Towel.DataStructures.IMap{``0,``1},``1,``0,``2)">
            <summary>Adds or updates the value at the given key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <typeparam name="TUpdate">The type of function to update the value.</typeparam>
            <param name="map">The map to add or update the value in.</param>
            <param name="key">The key of the value to add or update.</param>
            <param name="value">The value to add if not already present.</param>
            <param name="update">The function to update the value if present.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Existed: true if the key was already in the map<br/>
            - <typeparamref name="T"/> OldValue: the value relative tothe key before to the update if it existed or default
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.TryUpdate``2(Towel.DataStructures.IMap{``0,``1},``1,System.Func{``0,``0})">
            <summary>Tries to update a value in the map the relative key exists.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to update the value in.</param>
            <param name="key">The key of the value to update.</param>
            <param name="update">The function to update the value relative to the key.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the key was found or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the update failed<br/>
            - <typeparamref name="T"/>? OldValue: the value if the key was found or default if not<br/>
            - <typeparamref name="T"/>? NewValue: the value if the key was found or default if not
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.TryAddOrUpdate``2(Towel.DataStructures.IMap{``0,``1},``1,``0,System.Func{``0,``0})">
            <summary>Tries to add or update the value at the given key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to add or update the value in.</param>
            <param name="key">The key of the value to add or update.</param>
            <param name="value">The value to add if not already present.</param>
            <param name="update">The function to update the value if present.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the value was added or updated or false if not.<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add or update failed<br/>
            - <see cref="T:System.Boolean"/>? Existed: true if the key-value pair was added or updated or false<br/>
            - <typeparamref name="T"/>? OldValue: the previous value if the key existed before the add or update operation
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.Add``2(Towel.DataStructures.IMap{``0,``1},``1,``0)">
            <summary>Adds a value to a map by key.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to add the value to.</param>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value to add to the map.</param>
        </member>
        <member name="M:Towel.DataStructures.Map.Set``2(Towel.DataStructures.IMap{``0,``1},``1,``0)">
            <summary>Sets a value in a map relative to a key.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="map">The map to set the value in.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Existed, <typeparamref name="T"/> OldValue)<br/>
            - <see cref="T:System.Boolean"/> Existed: true if the key was already in the map<br/>
            - <typeparamref name="T"/> OldValue: the value relative tothe key before to the update if it existed or default
            </returns>
        </member>
        <member name="M:Towel.DataStructures.Map.Get``2(Towel.DataStructures.IMap{``0,``1},``1)">
            <summary>Gets a value in a map relative to a key.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="map">The map to set the value in.</param>
            <param name="key">The key.</param>
            <returns>The value relative to the key.</returns>
        </member>
        <member name="M:Towel.DataStructures.Map.Keys``2(Towel.DataStructures.IMap{``0,``1},System.Action{``1})">
            <summary>Performs a function on every key in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to traverse the keys of.</param>
            <param name="step">The step function to perform on every key.</param>
        </member>
        <member name="M:Towel.DataStructures.Map.Keys``3(Towel.DataStructures.IMap{``0,``1},``2)">
            <summary>Performs a function on every key in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <typeparam name="TStep">The type of step function to perform on every key.</typeparam>
            <param name="map">The map to traverse the keys of.</param>
            <param name="step">The step function to perform on every key.</param>
        </member>
        <member name="M:Towel.DataStructures.Map.KeysBreak``2(Towel.DataStructures.IMap{``0,``1},System.Func{``1,Towel.StepStatus})">
            <summary>Performs a function on every key in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to traverse the keys of.</param>
            <param name="step">The step function to perform on every key.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="M:Towel.DataStructures.Map.Pairs``2(Towel.DataStructures.IMap{``0,``1},System.Action{System.ValueTuple{``0,``1}})">
            <summary>Performs a function on every pair in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
        </member>
        <member name="M:Towel.DataStructures.Map.Pairs``3(Towel.DataStructures.IMap{``0,``1},``2)">
            <summary>Performs a function on every pair in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <typeparam name="TStep">The type of step function to perform on every pair.</typeparam>
            <param name="map">The map to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
        </member>
        <member name="M:Towel.DataStructures.Map.PairsBreak``2(Towel.DataStructures.IMap{``0,``1},System.Func{System.ValueTuple{``0,``1},Towel.StepStatus})">
            <summary>Performs a function on every pair in a map.</summary>
            <typeparam name="T">The type of values in the map.</typeparam>
            <typeparam name="TKey">The type of keys in the map.</typeparam>
            <param name="map">The map to traverse the pairs of.</param>
            <param name="step">The step function to perform on every pair.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="T:Towel.DataStructures.MapHashLinked">
            <summary>Static helpers.</summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked.New``2(System.Func{``1,``1,System.Boolean},System.Func{``1,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.MapHashLinked`4"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TKey">The type of keys used to look up values.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.MapHashLinked`4"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.MapHashLinked`4">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The generic type of the structure.</typeparam>
            <typeparam name="TKey">The generic key type of this map.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="TKey"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="TKey"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.#ctor(`2,`3,System.Nullable{System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.MapHashLinked`4"/>.</summary>
            <param name="equate">The function for quality checking <typeparamref name="TKey"/> values.</param>
            <param name="hash">The function for hashing <typeparamref name="TKey"/> values.</param>
            <param name="expectedCount">The expected count of the map.</param>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.#ctor(Towel.DataStructures.MapHashLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="map">The map to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`4.TableSize">
            <summary>The current size of the hashed table.</summary>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`4.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`4.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`4.Equate">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.MapHashLinked`4.Item(`1)">
            <summary>Gets the value of a specified key.</summary>
            <param name="key">The key to get the value of.</param>
            <returns>The value of the key.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryAdd(`1,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryAddOrUpdate``1(`1,`0,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryRemoveOrUpdate``2(`1,``0,``1)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryUpdate``1(`1,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryGet(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TrySet(`1,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.TryRemoveWithoutTrim(`1)">
            <summary>Tries to remove a keyed value without shrinking the hash table.</summary>
            <param name="key">The key of the value to remove.</param>
            <returns>True if the removal was successful for false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.Trim">
            <summary>
            Trims the table to an appropriate size based on the current count.<br/>
            Runtime: O(n), Î©(1)
            </summary>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.KeysBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.GetKeys">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.PairsBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.GetPairs">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.KeysToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.MapHashLinked`4.PairsToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.Omnitree">
            <summary>Contains the necessary type definitions for the various omnitree types.</summary>
            <summary>Contains the necessary type definitions for the various omnitree types.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`1">
            <summary>Represents a 1D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`1.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`1.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`1.#ctor(`0)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`1">
            <summary>Represents a 1D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`1.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`1.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`1.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`1.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`2">
            <summary>Delegate for locating an item in 1D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`2">
            <summary>Delegate for getting the 1D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`2">
            <summary>Delegate for getting the 1D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``2(Towel.DataStructures.Omnitree.GetBoundings{``0,``1})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Bounds{``0},System.Func{``0,``0,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Vector{``0},System.Func{``0,``0,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Bounds{``0},System.Func{``0,``0,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``1(Towel.DataStructures.Omnitree.Vector{``0},Towel.DataStructures.Omnitree.Vector{``0},System.Func{``0,``0,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``1(Towel.DataStructures.Omnitree.Bounds{``0},Towel.DataStructures.Omnitree.Vector{``0},System.Func{``0,``0,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``2(Towel.DataStructures.IOmnitreePoints{``0,``1},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``2(Towel.DataStructures.IOmnitreePoints{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``2(Towel.DataStructures.IOmnitreeBounds{``0,``1},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``2(Towel.DataStructures.IOmnitreeBounds{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`2">
            <summary>Represents a 2D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`2.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`2.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`2.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`2.#ctor(`0,`1)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`2">
            <summary>Represents a 2D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`2.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`2.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`2.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`2.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`2.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`2.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`3">
            <summary>Delegate for locating an item in 2D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`3">
            <summary>Delegate for getting the 2D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`3">
            <summary>Delegate for getting the 2D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``3(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Bounds{``0,``1},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Vector{``0,``1},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Bounds{``0,``1},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``2(Towel.DataStructures.Omnitree.Vector{``0,``1},Towel.DataStructures.Omnitree.Vector{``0,``1},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``2(Towel.DataStructures.Omnitree.Bounds{``0,``1},Towel.DataStructures.Omnitree.Vector{``0,``1},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``3(Towel.DataStructures.IOmnitreePoints{``0,``1,``2},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``3(Towel.DataStructures.IOmnitreePoints{``0,``1,``2},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``3(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``3(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`3">
            <summary>Represents a 3D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`3.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`3.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`3.#ctor(`0,`1,`2)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`3">
            <summary>Represents a 3D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Min3">
            <summary>The minimum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`3.Max3">
            <summary>The maximum value along the 3 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`3.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`3.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`4">
            <summary>Delegate for locating an item in 3D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
            <param name="axis3">The location of the item along the 3 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`4">
            <summary>Delegate for getting the 3D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`4">
            <summary>Delegate for getting the 3D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``4(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2,``3})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Vector{``0,``1,``2},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``3(Towel.DataStructures.Omnitree.Vector{``0,``1,``2},Towel.DataStructures.Omnitree.Vector{``0,``1,``2},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean},System.Func{``2,``2,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``3(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2},Towel.DataStructures.Omnitree.Vector{``0,``1,``2},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="Axis3">The generic type of the 3 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <param name="compare3">The delegate for comparing values along the the 3 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``4(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``4(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``4(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``4(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`4">
            <summary>Represents a 4D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`4.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`4.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`4.#ctor(`0,`1,`2,`3)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`4">
            <summary>Represents a 4D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Min3">
            <summary>The minimum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Max3">
            <summary>The maximum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Min4">
            <summary>The minimum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`4.Max4">
            <summary>The maximum value along the 4 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`4.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`4.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`5">
            <summary>Delegate for locating an item in 4D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
            <param name="axis3">The location of the item along the 3 dimension.</param>
            <param name="axis4">The location of the item along the 4 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`5">
            <summary>Delegate for getting the 4D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`5">
            <summary>Delegate for getting the 4D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``5(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2,``3,``4})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``4(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean},System.Func{``2,``2,System.Boolean},System.Func{``3,``3,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``4(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="Axis3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="Axis4">The generic type of the 4 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <param name="compare3">The delegate for comparing values along the the 3 dimension.</param>
            <param name="compare4">The delegate for comparing values along the the 4 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``5(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``5(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``5(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``5(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`5">
            <summary>Represents a 5D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`5.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`5.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`5">
            <summary>Represents a 5D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Min3">
            <summary>The minimum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Max3">
            <summary>The maximum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Min4">
            <summary>The minimum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Max4">
            <summary>The maximum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Min5">
            <summary>The minimum value along the 5 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`5.Max5">
            <summary>The maximum value along the 5 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`5.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`5.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`6">
            <summary>Delegate for locating an item in 5D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
            <param name="axis3">The location of the item along the 3 dimension.</param>
            <param name="axis4">The location of the item along the 4 dimension.</param>
            <param name="axis5">The location of the item along the 5 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`6">
            <summary>Delegate for getting the 5D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`6">
            <summary>Delegate for getting the 5D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``6(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2,``3,``4,``5})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``5(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean},System.Func{``2,``2,System.Boolean},System.Func{``3,``3,System.Boolean},System.Func{``4,``4,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``5(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="Axis3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="Axis4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="Axis5">The generic type of the 5 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <param name="compare3">The delegate for comparing values along the the 3 dimension.</param>
            <param name="compare4">The delegate for comparing values along the the 4 dimension.</param>
            <param name="compare5">The delegate for comparing values along the the 5 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``6(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``6(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``6(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``6(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`6">
            <summary>Represents a 6D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`6.Axis6">
            <summary>The value along axis 6.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`6.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
            <param name="axis6">The location along axis 6.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`6">
            <summary>Represents a 6D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min3">
            <summary>The minimum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max3">
            <summary>The maximum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min4">
            <summary>The minimum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max4">
            <summary>The maximum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min5">
            <summary>The minimum value along the 5 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max5">
            <summary>The maximum value along the 5 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Min6">
            <summary>The minimum value along the 6 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`6.Max6">
            <summary>The maximum value along the 6 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`6.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`6.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`7">
            <summary>Delegate for locating an item in 6D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
            <param name="axis3">The location of the item along the 3 dimension.</param>
            <param name="axis4">The location of the item along the 4 dimension.</param>
            <param name="axis5">The location of the item along the 5 dimension.</param>
            <param name="axis6">The location of the item along the 6 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`7">
            <summary>Delegate for getting the 6D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
            <param name="min6">The minimum bound of the item along the 6 dimension.</param>
            <param name="max6">The maximum bound of the item along the 6 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`7">
            <summary>Delegate for getting the 6D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
            <param name="min6">The minimum bound of the item along the 6 dimension.</param>
            <param name="max6">The maximum bound of the item along the 6 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``7(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2,``3,``4,``5,``6})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``6(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean},System.Func{``2,``2,System.Boolean},System.Func{``3,``3,System.Boolean},System.Func{``4,``4,System.Boolean},System.Func{``5,``5,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``6(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="Axis3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="Axis4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="Axis5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="Axis6">The generic type of the 6 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <param name="compare3">The delegate for comparing values along the the 3 dimension.</param>
            <param name="compare4">The delegate for comparing values along the the 4 dimension.</param>
            <param name="compare5">The delegate for comparing values along the the 5 dimension.</param>
            <param name="compare6">The delegate for comparing values along the the 6 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``7(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``7(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5,``6},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``7(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``7(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5,``6},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Vector`7">
            <summary>Represents a 7D vector.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis1">
            <summary>The value along axis 1.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis2">
            <summary>The value along axis 2.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis3">
            <summary>The value along axis 3.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis4">
            <summary>The value along axis 4.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis5">
            <summary>The value along axis 5.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis6">
            <summary>The value along axis 6.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Vector`7.Axis7">
            <summary>The value along axis 7.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Vector`7.Default">
            <summary>Returns a vector with defaulted values.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Vector`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>A location along each axis.</summary>
            <param name="axis1">The location along axis 1.</param>
            <param name="axis2">The location along axis 2.</param>
            <param name="axis3">The location along axis 3.</param>
            <param name="axis4">The location along axis 4.</param>
            <param name="axis5">The location along axis 5.</param>
            <param name="axis6">The location along axis 6.</param>
            <param name="axis7">The location along axis 7.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bounds`7">
            <summary>Represents a 7D bounding box.</summary>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min1">
            <summary>The minimum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max1">
            <summary>The maximum value along the 1 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min2">
            <summary>The minimum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max2">
            <summary>The maximum value along the 2 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min3">
            <summary>The minimum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max3">
            <summary>The maximum value along the 3 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min4">
            <summary>The minimum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max4">
            <summary>The maximum value along the 4 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min5">
            <summary>The minimum value along the 5 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max5">
            <summary>The maximum value along the 5 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min6">
            <summary>The minimum value along the 6 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max6">
            <summary>The maximum value along the 6 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Min7">
            <summary>The minimum value along the 7 dimension.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bounds`7.Max7">
            <summary>The maximum value along the 7 dimension.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bounds`7.None">
            <summary>Extends infinitely along each axis.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bounds`7.#ctor(Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>A set of values denoting a range (or lack of range) along each axis.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Location`8">
            <summary>Delegate for locating an item in 7D space.</summary>
            <typeparam name="T">The generic type of the item to locate.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
            <param name="item">The item to locate.</param>
            <param name="axis1">The location of the item along the 1 dimension.</param>
            <param name="axis2">The location of the item along the 2 dimension.</param>
            <param name="axis3">The location of the item along the 3 dimension.</param>
            <param name="axis4">The location of the item along the 4 dimension.</param>
            <param name="axis5">The location of the item along the 5 dimension.</param>
            <param name="axis6">The location of the item along the 6 dimension.</param>
            <param name="axis7">The location of the item along the 7 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBounds`8">
            <summary>Delegate for getting the 7D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
            <param name="min6">The minimum bound of the item along the 6 dimension.</param>
            <param name="max6">The maximum bound of the item along the 6 dimension.</param>
            <param name="min7">The minimum bound of the item along the 7 dimension.</param>
            <param name="max7">The maximum bound of the item along the 7 dimension.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.GetBoundings`8">
            <summary>Delegate for getting the 7D bounding box of an item.</summary>
            <typeparam name="T">The generic type of the item to get the bounding box of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
            <param name="item">The item to get the bounding box of.</param>
            <param name="min1">The minimum bound of the item along the 1 dimension.</param>
            <param name="max1">The maximum bound of the item along the 1 dimension.</param>
            <param name="min2">The minimum bound of the item along the 2 dimension.</param>
            <param name="max2">The maximum bound of the item along the 2 dimension.</param>
            <param name="min3">The minimum bound of the item along the 3 dimension.</param>
            <param name="max3">The maximum bound of the item along the 3 dimension.</param>
            <param name="min4">The minimum bound of the item along the 4 dimension.</param>
            <param name="max4">The maximum bound of the item along the 4 dimension.</param>
            <param name="min5">The minimum bound of the item along the 5 dimension.</param>
            <param name="max5">The maximum bound of the item along the 5 dimension.</param>
            <param name="min6">The minimum bound of the item along the 6 dimension.</param>
            <param name="max6">The maximum bound of the item along the 6 dimension.</param>
            <param name="min7">The minimum bound of the item along the 7 dimension.</param>
            <param name="max7">The maximum bound of the item along the 7 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.ConvertToGetBounds``8(Towel.DataStructures.Omnitree.GetBoundings{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>Converts an Omnitree.GetBoundings delegate into an Omnitree.GetBounds delegate.</summary>
            <typeparam name="T">The generic type to get the bounds of.</typeparam>
            <typeparam name="A1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="A2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="A3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="A4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="A5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="A6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="A7">The generic type of the 7 dimension.</typeparam>
            <param name="getBoundings">The Omnitree.GetBoundings to convert into a Omnitree.GetBounds.</param>
            <returns>The converted Omnitree.GetBounds delegate.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.InclusionCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult},System.Func{``6,``6,Towel.CompareResult})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult},System.Func{``6,``6,Towel.CompareResult})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EncapsulationCheck``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult},System.Func{``6,``6,Towel.CompareResult})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.EqualsCheck``7(Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,System.Boolean},System.Func{``1,``1,System.Boolean},System.Func{``2,``2,System.Boolean},System.Func{``3,``3,System.Boolean},System.Func{``4,``4,System.Boolean},System.Func{``5,``5,System.Boolean},System.Func{``6,``6,System.Boolean})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.StraddlesLines``7(Towel.DataStructures.Omnitree.Bounds{``0,``1,``2,``3,``4,``5,``6},Towel.DataStructures.Omnitree.Vector{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``0,Towel.CompareResult},System.Func{``1,``1,Towel.CompareResult},System.Func{``2,``2,Towel.CompareResult},System.Func{``3,``3,Towel.CompareResult},System.Func{``4,``4,Towel.CompareResult},System.Func{``5,``5,Towel.CompareResult},System.Func{``6,``6,Towel.CompareResult})">
            <summary>Checks if a bounds straddles a point if the point extended as a plane along each dimension.</summary>
            <typeparam name="Axis1">The generic type of the 1 dimension.</typeparam>
            <typeparam name="Axis2">The generic type of the 2 dimension.</typeparam>
            <typeparam name="Axis3">The generic type of the 3 dimension.</typeparam>
            <typeparam name="Axis4">The generic type of the 4 dimension.</typeparam>
            <typeparam name="Axis5">The generic type of the 5 dimension.</typeparam>
            <typeparam name="Axis6">The generic type of the 6 dimension.</typeparam>
            <typeparam name="Axis7">The generic type of the 7 dimension.</typeparam>
            <param name="bounds">The bounds to determine if it straddles the extended point.</param>
            <param name="vector">The point representing an extended plan along each axis.</param>
            <param name="compare1">The delegate for comparing values along the the 1 dimension.</param>
            <param name="compare2">The delegate for comparing values along the the 2 dimension.</param>
            <param name="compare3">The delegate for comparing values along the the 3 dimension.</param>
            <param name="compare4">The delegate for comparing values along the the 4 dimension.</param>
            <param name="compare5">The delegate for comparing values along the the 5 dimension.</param>
            <param name="compare6">The delegate for comparing values along the the 6 dimension.</param>
            <param name="compare7">The delegate for comparing values along the the 7 dimension.</param>
            <returns>True if the extended point was straddled or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``8(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <typeparam name="Axis7">The geneic type of the 7D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``8(Towel.DataStructures.IOmnitreePoints{``0,``1,``2,``3,``4,``5,``6,``7},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <typeparam name="Axis7">The geneic type of the 7D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``8(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <typeparam name="Axis7">The geneic type of the 7D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Remove``8(Towel.DataStructures.IOmnitreeBounds{``0,``1,``2,``3,``4,``5,``6,``7},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Removes all occurences of a value from the omnitree.</summary>
            <typeparam name="T">The generic value type being stored in the omnitree.</typeparam>
            <typeparam name="Axis1">The geneic type of the 1D axis.</typeparam>
            <typeparam name="Axis2">The geneic type of the 2D axis.</typeparam>
            <typeparam name="Axis3">The geneic type of the 3D axis.</typeparam>
            <typeparam name="Axis4">The geneic type of the 4D axis.</typeparam>
            <typeparam name="Axis5">The geneic type of the 5D axis.</typeparam>
            <typeparam name="Axis6">The geneic type of the 6D axis.</typeparam>
            <typeparam name="Axis7">The geneic type of the 7D axis.</typeparam>
            <param name="omnitree">The omnitree to remove from.</param>
            <param name="removal">The value to have all occurences removed.</param>
            <param name="equate">The delegate for checking for equality.</param>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Keyword">
            <summary>Omnitree keywords for syntax sugar.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Keyword.None">
            <summary>Non-existant bound.</summary>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.Bound`1">
            <summary>Represents a bound in ND space.</summary>
            <typeparam name="T">The generic type of the bound.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bound`1.Exists">
            <summary>Whether or not the bounds exists.</summary>
        </member>
        <member name="P:Towel.DataStructures.Omnitree.Bound`1.Value">
            <summary>The value of the bound if it exists or default if it does not.</summary>
        </member>
        <member name="F:Towel.DataStructures.Omnitree.Bound`1.None">
            <summary>Represents a null bound meaning it does not exist.</summary>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bound`1.op_Implicit(`0)~Towel.DataStructures.Omnitree.Bound{`0}">
            <summary>Converts a value to a bound.</summary>
            <param name="value">The value to convert into a bound.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bound`1.op_Implicit(Towel.DataStructures.Omnitree.Keyword)~Towel.DataStructures.Omnitree.Bound{`0}">
            <summary>Implicitly converts the "None" keyword into a non-existant bound.</summary>
            <param name="keyword">The keyword to convert into a non-existant bound.</param>
        </member>
        <member name="M:Towel.DataStructures.Omnitree.Bound`1.Compare(System.Func{`0,`0,Towel.CompareResult})">
            <summary>Gets the bound compare delegate from a value compare delegate.</summary>
            <param name="compare">The value compare to wrap into a bounds compare.</param>
            <returns>The bounds compare.</returns>
        </member>
        <member name="T:Towel.DataStructures.Omnitree.SubdivisionOverride`3">
            <summary>A delegate for determining the point of subdivision in a set of values and current bounds.</summary>
            <typeparam name="T">The generic type of the values to find the point of subdivision.</typeparam>
            <typeparam name="TAxis">The type of axis along with the values are to be subdivided.</typeparam>
            <typeparam name="TBounds">The type of bounds currently constraining the data.</typeparam>
            <param name="bounds">The current bounds of the set of values.</param>
            <param name="values">The values to find the point of subdivision.</param>
            <returns>The point of subdivision.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`2">
            <summary>Inheritance base for 1D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`3">
            <summary>Inheritance base for 2D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`4">
            <summary>Inheritance base for 3D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`5">
            <summary>Inheritance base for 4D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`6">
            <summary>Inheritance base for 5D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`7">
            <summary>Inheritance base for 6D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`8">
            <summary>Inheritance base for 7D omnitrees.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
            <typeparam name="Axis7">The type 7D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`2">
            <summary>Inheritance base for 1D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`2.Item(`1)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`2.Locate">
            <summary>The delegate being used by the omnitree to locate items in 1D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(System.Action{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`2.Stepper(System.Func{`0,Towel.StepStatus},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2">
            <summary>Omnitree that stores points along 1 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`2.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1},System.Func{`1,`1,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1}})">
            <summary>Constructs a new 1D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 1D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Item(`1)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`2.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Vector{`1},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(`1,`1)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(`1)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Remove(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Action{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Func{`0,Towel.StepStatus},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Action{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.Stepper(System.Func{`0,Towel.StepStatus},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`2.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`3">
            <summary>Inheritance base for 2D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`3.Item(`1,`2)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`3.Locate">
            <summary>The delegate being used by the omnitree to locate items in 2D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(System.Action{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`3.Stepper(System.Func{`0,Towel.StepStatus},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3">
            <summary>Omnitree that stores points along 2 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`3.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2}})">
            <summary>Constructs a new 2D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 2D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Item(`1,`2)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`3.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(`1,`1,`2,`2)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(`1,`2)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(`1,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Remove(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Action{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Action{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.Stepper(System.Func{`0,Towel.StepStatus},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`3.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`4">
            <summary>Inheritance base for 3D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`4.Item(`1,`2,`3)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`4.Locate">
            <summary>The delegate being used by the omnitree to locate items in 3D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(System.Action{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`4.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4">
            <summary>Omnitree that stores points along 3 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`4.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2,`3},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}})">
            <summary>Constructs a new 3D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 3D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Item(`1,`2,`3)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`4.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(`1,`2,`3)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(`1,`2,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Remove(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Action{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Action{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`4.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`5">
            <summary>Inheritance base for 4D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`5.Item(`1,`2,`3,`4)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`5.Locate">
            <summary>The delegate being used by the omnitree to locate items in 4D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(System.Action{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`5.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5">
            <summary>Omnitree that stores points along 4 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`5.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2,`3,`4},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}})">
            <summary>Constructs a new 4D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 4D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Item(`1,`2,`3,`4)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`5.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(`1,`2,`3,`4)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(`1,`2,`3,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Remove(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Action{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`5.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`6">
            <summary>Inheritance base for 5D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`6.Item(`1,`2,`3,`4,`5)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`6.Locate">
            <summary>The delegate being used by the omnitree to locate items in 5D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(System.Action{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`6.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6">
            <summary>Omnitree that stores points along 5 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`6.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2,`3,`4,`5},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}})">
            <summary>Constructs a new 5D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 5D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Item(`1,`2,`3,`4,`5)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`6.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(`1,`2,`3,`4,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Remove(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Action{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`6.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`7">
            <summary>Inheritance base for 6D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`7.Item(`1,`2,`3,`4,`5,`6)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`7.Locate">
            <summary>The delegate being used by the omnitree to locate items in 6D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(System.Action{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`7.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7">
            <summary>Omnitree that stores points along 6 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`7.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2,`3,`4,`5,`6},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}})">
            <summary>Constructs a new 6D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 6D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Item(`1,`2,`3,`4,`5,`6)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <param name="axis6">The coordinate along axis 6.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`7.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(`1,`2,`3,`4,`5,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Remove(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Action{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`7.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreePoints`8">
            <summary>Inheritance base for 7D omnitrees that store points.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
            <typeparam name="Axis7">The type 7D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`8.Item(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Steps through the values at a given location.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>A Stepper of the items at the given coordinates.</returns>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreePoints`8.Locate">
            <summary>The delegate being used by the omnitree to locate items in 7D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(System.Action{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreePoints`8.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8">
            <summary>Omnitree that stores points along 7 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
            <typeparam name="Axis7">The type 7D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Branch,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Branch">
            <summary>A branch in the tree. Only contains nodes.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Branch.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="T:Towel.DataStructures.OmnitreePointsLinked`8.Leaf">
            <summary>A branch in the tree. Only contains items.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.#ctor(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.#ctor(Towel.DataStructures.Omnitree.Location{`0,`1,`2,`3,`4,`5,`6,`7},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},System.Func{`7,`7,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`7,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}})">
            <summary>Constructs a new 7D omnitree that stores points.</summary>
            <param name="locate">The delegate for locating items in 7D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="compare7">The delegate for comparing values along the 7D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
            <param name="subdivisionOverride7">The subdivision overide to be used when splitting the 7 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Item(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Steps through all the items at a given coordinate.</summary>
            <param name="axis1">The coordinate along axis 1.</param>
            <param name="axis2">The coordinate along axis 2.</param>
            <param name="axis3">The coordinate along axis 3.</param>
            <param name="axis4">The coordinate along axis 4.</param>
            <param name="axis5">The coordinate along axis 5.</param>
            <param name="axis6">The coordinate along axis 6.</param>
            <param name="axis7">The coordinate along axis 7.</param>
            <returns>The stepper for the items at the given coordinate.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Locate">
            <summary>The location function the Omnitree is using.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Compare7">
            <summary>The comparison function the Omnitree is using along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.BranchCount">
            <summary>Counts the current number of branches in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreePointsLinked`8.LeafCount">
            <summary>Counts the current number of leaves in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Add(`0,Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="location">The location of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.CountSubSpace(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Counts the number of items in a sub space.</summary>
            <param name="node">The current traversal node.</param>
            <param name="bounds">The bounds of the sub space being counted.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Remove(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Action{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.Stepper(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="vector">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.ShrinkChild(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Branch,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.ReduceParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.IncreaseParentCounts(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreePointsLinked`8.GetEncapsulationParent(Towel.DataStructures.OmnitreePointsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="vector">The coordinates of the value.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`2">
            <summary>Inheritance base for 1D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`2.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 1D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.CountSubSpaceEncapsulated(`1,`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.CountSubSpaceOverlapped(`1,`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(System.Action{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`2.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`2">
            <summary>Omnitree that stores bounds along 1 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`2.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1},System.Func{`1,`1,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1}})">
            <summary>Constructs a new 1D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 1D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1},System.Func{`1,`1,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1}})">
            <summary>Constructs a new 1D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 1D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 1D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`2.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(`1,`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(`1)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(`1,`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(`1)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(`1,`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(`1)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Update(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(`1,`1)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,`1)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.RemoveOverlapped(`1,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(System.Action{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Action{`0},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Action{`0},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1},Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1},Towel.DataStructures.Omnitree.Vector{`1})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`2.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1}.Node,Towel.DataStructures.Omnitree.Bounds{`1})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`3">
            <summary>Inheritance base for 2D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`3.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 2D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.CountSubSpaceEncapsulated(`1,`1,`2,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.CountSubSpaceOverlapped(`1,`1,`2,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`1,`2,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(System.Action{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`3.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`3">
            <summary>Omnitree that stores bounds along 2 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`3.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2}})">
            <summary>Constructs a new 2D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 2D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2}})">
            <summary>Constructs a new 2D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 2D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 2D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`3.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(`1,`1,`2,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(`1,`2)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(`1,`1,`2,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(`1,`2)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(`1,`1,`2,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(`1,`2)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(`1,`1,`2,`2)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`1,`2,`2)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`1,`2,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`2)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.RemoveOverlapped(`1,`2,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Action{`0},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Action{`0},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2},Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2},Towel.DataStructures.Omnitree.Vector{`1,`2})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`3.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`4">
            <summary>Inheritance base for 3D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`4.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 3D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(System.Action{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`4.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`4">
            <summary>Omnitree that stores bounds along 3 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`4.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2,`3},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}})">
            <summary>Constructs a new 3D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 3D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2,`3},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3}})">
            <summary>Constructs a new 3D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 3D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 3D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`4.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(`1,`2,`3)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(`1,`2,`3)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(`1,`1,`2,`2,`3,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(`1,`2,`3)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`1,`2,`2,`3,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`2,`3)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.RemoveOverlapped(`1,`2,`3,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Action{`0},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Action{`0},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3},Towel.DataStructures.Omnitree.Vector{`1,`2,`3})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`4.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`5">
            <summary>Inheritance base for 4D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`5.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 4D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(System.Action{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`5.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`5">
            <summary>Omnitree that stores bounds along 4 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`5.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2,`3,`4},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}})">
            <summary>Constructs a new 4D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 4D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2,`3,`4},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4}})">
            <summary>Constructs a new 4D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 4D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 4D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`5.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(`1,`2,`3,`4)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(`1,`2,`3,`4)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(`1,`2,`3,`4)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`2,`3,`4)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.RemoveOverlapped(`1,`2,`3,`4,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Action{`0},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`5.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`6">
            <summary>Inheritance base for 5D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`6.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 5D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`6.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`6">
            <summary>Omnitree that stores bounds along 5 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`6.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2,`3,`4,`5},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}})">
            <summary>Constructs a new 5D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 5D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2,`3,`4,`5},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5}})">
            <summary>Constructs a new 5D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 5D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 5D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`6.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(`1,`2,`3,`4,`5)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(`1,`2,`3,`4,`5)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`2,`3,`4,`5)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.RemoveOverlapped(`1,`2,`3,`4,`5,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`6.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`7">
            <summary>Inheritance base for 6D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`7.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 6D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`7.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`7">
            <summary>Omnitree that stores bounds along 6 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`7.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2,`3,`4,`5,`6},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}})">
            <summary>Constructs a new 6D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 6D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2,`3,`4,`5,`6},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6}})">
            <summary>Constructs a new 6D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 6D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 6D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`7.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(`1,`2,`3,`4,`5,`6)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.RemoveOverlapped(`1,`2,`3,`4,`5,`6,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`7.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitreeBounds`8">
            <summary>Inheritance base for 7D omnitrees that store bounds.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
            <typeparam name="Axis7">The type 7D axis.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.IOmnitreeBounds`8.GetBounds">
            <summary>The delegate being used by the omnitree to get the bounds of values in 7D space.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where equality is met.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space where predicate is met.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The predicate constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.IOmnitreeBounds`8.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The step function to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`8">
            <summary>Omnitree that stores bounds along 7 dimensions implemented as a linked tree.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
            <typeparam name="Axis1">The type 1D axis.</typeparam>
            <typeparam name="Axis2">The type 2D axis.</typeparam>
            <typeparam name="Axis3">The type 3D axis.</typeparam>
            <typeparam name="Axis4">The type 4D axis.</typeparam>
            <typeparam name="Axis5">The type 5D axis.</typeparam>
            <typeparam name="Axis6">The type 6D axis.</typeparam>
            <typeparam name="Axis7">The type 7D axis.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.OmnitreeBoundsLinked`8.Node">
            <summary>Can be a leaf or a branch.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.Item(System.Int32)">
            <summary>Gets child by index.</summary>
            <param name="child_index">The index of the child to get.</param>
            <returns>The child of the given index or null if non-existent.</returns>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.Depth">
            <summary>The depth this node is located in the Omnitree.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Node.#ctor(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Constructs a node.</summary>
            <param name="bounds">The bounds of this node.</param>
            <param name="parent">The parent of this node.</param>
            <param name="index">The number of values stored in this node and its children.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.#ctor(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>This constructor is for cloning purposes</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.#ctor(Towel.DataStructures.Omnitree.GetBounds{`0,`1,`2,`3,`4,`5,`6,`7},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},System.Func{`7,`7,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`7,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}})">
            <summary>Constructs a new 7D omnitree that stores bounds.</summary>
            <param name="getBounds">The delegate for getting object bounds in 7D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="compare7">The delegate for comparing values along the 7D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
            <param name="subdivisionOverride7">The subdivision overide to be used when splitting the 7 dimension.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.#ctor(Towel.DataStructures.Omnitree.GetBoundings{`0,`1,`2,`3,`4,`5,`6,`7},System.Func{`1,`1,Towel.CompareResult},System.Func{`2,`2,Towel.CompareResult},System.Func{`3,`3,Towel.CompareResult},System.Func{`4,`4,Towel.CompareResult},System.Func{`5,`5,Towel.CompareResult},System.Func{`6,`6,Towel.CompareResult},System.Func{`7,`7,Towel.CompareResult},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`1,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`2,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`3,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`4,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`5,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`6,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}},Towel.DataStructures.Omnitree.SubdivisionOverride{`0,`7,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7}})">
            <summary>Constructs a new 7D omnitree that stores bounds.</summary>
            <param name="getBoundings">The delegate for getting object bounds in 7D space.</param>
            <param name="compare1">The delegate for comparing values along the 1D axis.</param>
            <param name="compare2">The delegate for comparing values along the 2D axis.</param>
            <param name="compare3">The delegate for comparing values along the 3D axis.</param>
            <param name="compare4">The delegate for comparing values along the 4D axis.</param>
            <param name="compare5">The delegate for comparing values along the 5D axis.</param>
            <param name="compare6">The delegate for comparing values along the 6D axis.</param>
            <param name="compare7">The delegate for comparing values along the 7D axis.</param>
            <param name="subdivisionOverride1">The subdivision overide to be used when splitting the 1 dimension.</param>
            <param name="subdivisionOverride2">The subdivision overide to be used when splitting the 2 dimension.</param>
            <param name="subdivisionOverride3">The subdivision overide to be used when splitting the 3 dimension.</param>
            <param name="subdivisionOverride4">The subdivision overide to be used when splitting the 4 dimension.</param>
            <param name="subdivisionOverride5">The subdivision overide to be used when splitting the 5 dimension.</param>
            <param name="subdivisionOverride6">The subdivision overide to be used when splitting the 6 dimension.</param>
            <param name="subdivisionOverride7">The subdivision overide to be used when splitting the 7 dimension.</param>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Dimensions">
            <summary>The number of dimensions in this tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.GetBounds">
            <summary>The delegate being used by the omnitree to locate items in 7D space.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare1">
            <summary>The comparison function the Omnitree is using along the 1D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare2">
            <summary>The comparison function the Omnitree is using along the 2D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare3">
            <summary>The comparison function the Omnitree is using along the 3D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare4">
            <summary>The comparison function the Omnitree is using along the 4D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare5">
            <summary>The comparison function the Omnitree is using along the 5D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare6">
            <summary>The comparison function the Omnitree is using along the 6D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Compare7">
            <summary>The comparison function the Omnitree is using along the 7D axis.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.Count">
            <summary>The current number of items in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.MaxDepth">
            <summary>Finds the current maximum depth of the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="P:Towel.DataStructures.OmnitreeBoundsLinked`8.NodeCount">
            <summary>Counts the current number of nodes in the tree. NOT AN O(1) OPERATION. Intended for educational purposes only.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.TryAdd(`0)">
            <summary>Tries to add a value.</summary>
            <param name="value">The value to be added.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Add(`0)">
            <summary>Adds an item to the tree.</summary>
            <param name="addition">The item to be added.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Add(`0,Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},System.Int32)">
            <summary>Recursive version of the add function.</summary>
            <param name="addition">The item to be added.</param>
            <param name="node">The current node for tree trversal.</param>
            <param name="bounds">The bounds of the addition.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Clear">
            <summary>Returns the tree to an empty state.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Clone">
            <summary>Creates a shallow clone of this data structure.</summary>
            <returns>A shallow clone of this data structure.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items encapsulated by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.CountSubSpaceOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Counts the number of items overlapped by a sub space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
            <returns>The number of items in the provided sub space.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update">
            <summary>Iterates through the entire tree and ensures each item is in the proper leaf.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Recursive version of the Update method.</summary>
            <param name="node">The current node of iteration.</param>
            <param name="depth">The current depth of iteration.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Update(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Iterates through the provided dimensions and ensures each item is in the proper leaf.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(System.Predicate{`0})">
            <summary>Removes all the items qualified by the delegate.</summary>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Predicate{`0})">
            <summary>Recursive version of the remove method.</summary>
            <param name="node">The current node of traversal.</param>
            <param name="where">The predicate to qualify removals.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items encapsulated in a given space.</summary>
            <param name="axis1">The coordinate along the 1D axis.</param>
            <param name="axis2">The coordinate along the 2D axis.</param>
            <param name="axis3">The coordinate along the 3D axis.</param>
            <param name="axis4">The coordinate along the 4D axis.</param>
            <param name="axis5">The coordinate along the 5D axis.</param>
            <param name="axis6">The coordinate along the 6D axis.</param>
            <param name="axis7">The coordinate along the 7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Removes all the items overlapping a given space.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveEncapsulated(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7},System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.TryRemove(`0)">
            <summary>Tries to remove a value.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(`0)">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Removes all instances of a given value.</summary>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7)">
            <summary>Removes all the items in a given space.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <returns>The number of items that were removed.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.RemoveOverlapped(`1,`2,`3,`4,`5,`6,`7,System.Predicate{`0})">
            <summary>Removes all the items in a given space validated by a predicate.</summary>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
            <param name="where">The equality constraint of the removal.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Stepper(System.Action{`0})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.Stepper(System.Func{`0,Towel.StepStatus})">
            <summary>Traverses every item in the tree and performs the delegate in them.</summary>
            <param name="step">The delegate to perform on every item in the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Action{`0},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Action{`0},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperEncapsulated(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`1,`2,`2,`3,`3,`4,`4,`5,`5,`6,`6,`7,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Func{`0,Towel.StepStatus},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`1},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`2},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`3},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`4},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`5},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`6},Towel.DataStructures.Omnitree.Bound{`7},Towel.DataStructures.Omnitree.Bound{`7})">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="min1">The minimum coordinate of the space along the 1 axis.</param>
            <param name="max1">The maximum coordinate of the space along the 1 axis.</param>
            <param name="min2">The minimum coordinate of the space along the 2 axis.</param>
            <param name="max2">The maximum coordinate of the space along the 2 axis.</param>
            <param name="min3">The minimum coordinate of the space along the 3 axis.</param>
            <param name="max3">The maximum coordinate of the space along the 3 axis.</param>
            <param name="min4">The minimum coordinate of the space along the 4 axis.</param>
            <param name="max4">The maximum coordinate of the space along the 4 axis.</param>
            <param name="min5">The minimum coordinate of the space along the 5 axis.</param>
            <param name="max5">The maximum coordinate of the space along the 5 axis.</param>
            <param name="min6">The minimum coordinate of the space along the 6 axis.</param>
            <param name="max6">The maximum coordinate of the space along the 6 axis.</param>
            <param name="min7">The minimum coordinate of the space along the 7 axis.</param>
            <param name="max7">The maximum coordinate of the space along the 7 axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Action{`0},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.StepperOverlapped(System.Func{`0,Towel.StepStatus},`1,`2,`3,`4,`5,`6,`7)">
            <summary>Performs and specialized traversal of the structure and performs a delegate on every node within the provided dimensions.</summary>
            <param name="step">The delegate to perform on all items in the tree within the given bounds.</param>
            <param name="axis1">The axis of the removal along the  1D axis.</param>
            <param name="axis2">The axis of the removal along the  2D axis.</param>
            <param name="axis3">The axis of the removal along the  3D axis.</param>
            <param name="axis4">The axis of the removal along the  4D axis.</param>
            <param name="axis5">The axis of the removal along the  5D axis.</param>
            <param name="axis6">The axis of the removal along the  6D axis.</param>
            <param name="axis7">The axis of the removal along the  7D axis.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.DetermineChildIndex(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Computes the child index that contains the desired dimensions.</summary>
            <param name="pointOfDivision">The point of division to compare against.</param>
            <param name="bounds">The dimensions to determine the child index.</param>
            <returns>The computed child index based on the coordinates relative to the center of the node.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.ShrinkChild(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Converts a branch back into a leaf when the count is reduced.</summary>
            <param name="parent">The parent to shrink a child of.</param>
            <param name="child_index">The index of the child to shrink.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.ReduceParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Reduces the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the reduction.</param>
            <param name="reduction">The amount to reduce the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.IncreaseParentCounts(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,System.Int32)">
            <summary>Increases the counts of all the parents of a given node by a given amount.</summary>
            <param name="parent">The starting parent of the increase.</param>
            <param name="increase">The amount to increase the parent counts by.</param>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.InclusionCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks a node for inclusion (overlap) between two bounds.</summary>
            <returns>True if the spaces overlap; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space encapsulates a point.</summary>
            <returns>True if the space encapsulates the point; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EncapsulationCheck(Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks if a space (left) encapsulates another space (right).</summary>
            <returns>True if the left space encapsulates the right; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.EqualsCheck(Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7},Towel.DataStructures.Omnitree.Vector{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Checks for equality between two locations.</summary>
            <returns>True if equal; False if not;</returns>
        </member>
        <member name="M:Towel.DataStructures.OmnitreeBoundsLinked`8.GetEncapsulationParent(Towel.DataStructures.OmnitreeBoundsLinked{`0,`1,`2,`3,`4,`5,`6,`7}.Node,Towel.DataStructures.Omnitree.Bounds{`1,`2,`3,`4,`5,`6,`7})">
            <summary>Gets the nearest parent that encapsulates a location.</summary>
            <param name="node">The starting node to find the encapsulating parent of the location.</param>
            <param name="bounds">The bounds to get the encapsulating parent from.</param>
            <returns>The nearest node that encapsulates the given location.</returns>
        </member>
        <member name="T:Towel.DataStructures.IOmnitree`1">
            <summary>A Spacial Partitioning data structure.</summary>
            <typeparam name="T">The type of items to store in the omnitree.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IOmnitree`1.Dimensions">
            <summary>The number of dimensions this tree is sorting on.</summary>
        </member>
        <member name="T:Towel.DataStructures.IQueue`1">
            <summary>Implements First-In-First-Out queue data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.IQueue`1.Newest">
            <summary>The current newest element in the queue.</summary>
        </member>
        <member name="P:Towel.DataStructures.IQueue`1.Oldest">
            <summary>The current oldest element in the queue.</summary>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Enqueue(`0)">
            <summary>Adds an item to the back of the queue.</summary>
            <param name="enqueue">The item to add to the queue.</param>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Peek">
            <summary>Gets the next item in the queue without removing it.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="M:Towel.DataStructures.IQueue`1.Dequeue">
            <summary>Removes the oldest item in the queue.</summary>
            <returns>The next item in the queue.</returns>
        </member>
        <member name="T:Towel.DataStructures.QueueLinked`1">
            <summary>Implements First-In-First-Out queue data structure using a linked list.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.#ctor">
            <summary>
            Creates an instance of a queue.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Newest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Oldest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.QueueLinked`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Enqueue(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueLinked`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.QueueArray`1">
            <summary>Implements First-In-First-Out queue data structure using an array.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.#ctor">
            <summary>Constructs a new queue.</summary>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.#ctor(System.Int32)">
            <summary>Constructs a new queue.</summary>
            <param name="minimumCapacity">The initial and smallest array size allowed by this list.</param>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.CurrentCapacity">
            <summary>Gets the current capacity of the list.</summary>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.MinimumCapacity">
            <summary>
            Allows you to adjust the minimum capacity of this list.<br/>
            Runtime (Get): O(1)<br/>
            Runtime (Set): O(n), Î©(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Newest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Oldest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.QueueArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> at an index in the queue.<br/>
            Runtime: O(1)
            </summary>
            <param name="index">The index of the <typeparamref name="T"/> to get or set.</param>
            <returns>The element at the provided index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when: index &lt;= 0 || index &gt; _count</exception>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Enqueue(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Dequeue">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.QueueArray`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.IRedBlackTree`1">
            <summary>A self sorting binary tree using the red-black tree algorithms.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.IRedBlackTree`2">
            <summary>A self sorting binary tree using the red-black tree algorithms.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.RedBlackTree">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.IRedBlackTree`1"/> and <see cref="T:Towel.DataStructures.IRedBlackTree`2"/>.</summary>
        </member>
        <member name="T:Towel.DataStructures.RedBlackTreeLinked">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.RedBlackTreeLinked`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked.New``1(System.Func{``0,``0,Towel.CompareResult})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.RedBlackTreeLinked`2"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.RedBlackTreeLinked`2"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.RedBlackTreeLinked`2">
            <summary>A self sorting binary tree using the red-black tree algorithms.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.#ctor(`1)">
            <summary>Constructs a new Red Black Tree.</summary>
            <param name="compare">The comparison method to be used when sorting the values of the tree.</param>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.#ctor(Towel.DataStructures.RedBlackTreeLinked{`0,`1})">
            <summary>Constructor for cloning purposes.</summary>
            <param name="tree">The tree to be cloned.</param>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`2.CurrentLeast">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`2.CurrentGreatest">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.RedBlackTreeLinked`2.Compare">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.ContainsSift``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.TryGet``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.TryRemoveSift``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.StepperBreak``1(`0,`0,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.StepperReverseBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.StepperReverseBreak``1(`0,`0,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.RedBlackTreeLinked`2.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.ISet`1">
            <summary>An unsorted structure of unique items.</summary>
            <typeparam name="T">The type of values to store in the set.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.SetHashLinked">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.SetHashLinked`3"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked.New``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.SetHashLinked`3"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.SetHashLinked`3"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.SetHashLinked`3">
            <summary>An unsorted structure of unique items implemented as a hashed table of linked lists.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.#ctor(`1,`2,System.Nullable{System.Int32})">
            <summary>Constructs a hashed set.</summary>
            <param name="equate">The function for quality checking <typeparamref name="T"/> values.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <param name="expectedCount">The expected count of the set.</param>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.#ctor(Towel.DataStructures.SetHashLinked{`0,`1,`2})">
            <summary>
            This constructor is for cloning purposes.<br/>
            Runtime: O(n)
            </summary>
            <param name="set">The set to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`3.TableSize">
            <summary>
            The current size of the hashed table.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`3.Count">
            <summary>
            The current number of values in the set.<br/>
            Runtime: O(1)
            </summary>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`3.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.SetHashLinked`3.Equate">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.TryRemoveWithoutTrim(`0)">
            <summary>Tries to remove a value from the set without shrinking the hash table.</summary>
            <param name="value">The value to remove.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.Resize(System.Int32)">
            <summary>Resizes the table.</summary>
            <param name="tableSize">The desired size of the table.</param>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.Trim">
            <summary>
            Trims the table to an appropriate size based on the current count.<br/>
            Runtime: O(n), Î©(1)
            </summary>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SetHashLinked`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.SkipList">
            <summary>Static helpers for <see cref="T:Towel.DataStructures.SkipList`3"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipList.New``1(System.Byte,System.Func{``0,``0,Towel.CompareResult},System.Func{System.Int32,System.Int32,System.Int32})">
            <inheritdoc cref="M:Towel.DataStructures.SkipList`3.#ctor(System.Byte,`1,`2)" />
            <inheritdoc cref="T:Towel.DataStructures.SkipList`3" />
            <returns>The new constructed <see cref="T:Towel.DataStructures.SkipList`3"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.SkipList`3">
            <summary>SkipList Data structure</summary>
            <typeparam name="T">The type of values.</typeparam>
            <typeparam name="TCompare">The type for comparing</typeparam>
            <typeparam name="TRandom">The type for generation algorithm.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.#ctor(System.Byte,`1,`2)">
            <summary> Creates a new SkipList object</summary>
            <param name="levels">The levels of lists within this list</param>
            <param name="compare">The compare type for this list</param>
            <param name="random">The type for generation algorithm.</param>
        </member>
        <member name="P:Towel.DataStructures.SkipList`3.Count">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.SkipList`3.Levels">
            <summary>The current number of levels in this <see cref="T:Towel.DataStructures.SkipList`3"/>.</summary>
        </member>
        <member name="P:Towel.DataStructures.SkipList`3.Compare">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.SkipList`3.Random">
            <summary>Gets the value of the random generation algorithm.</summary>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.Search(`0,Towel.DataStructures.SkipList{`0,`1,`2}.Node@,Towel.DataStructures.SkipList{`0,`1,`2}.Node[]@,System.Boolean)">
            <summary>
            Searches for a value in the list.
            If search is successful the node containing the value is returned.
            Otherwise the node after which the insertion should ouccer is returned
            </summary>
            <param name="value">The value to search</param>
            <param name="node">The output node</param>
            <param name="links">The previous nodes on the search path</param>
            <param name="quick">If true performs search with previous links
            partially initialized. <br/>
            This is faster since as soon as the node with the given value is
            found, the search terminates. <br/>
            If false, all the previous links are prepared.
            </param>
            <returns>true on successful search, false otherwise</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.Contains(`0)">
            <summary>Searches for an value in the list</summary>
            <param name="value">The value to search</param>
            <returns>Returns true if search is successful, otherwise false</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.TryRemove(`0)">
            <summary>Searches and removes a value from the list (if found)</summary>
            <param name="value">The value to remove from the list</param>
            <returns>True if value is found and removed, otherwise false</returns>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.RemoveAll``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.TryRemoveFirst``1(System.Exception@,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.SkipList`3.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.ISortedBinaryTree`1">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.ISortedBinaryTree`1.CurrentLeast">
            <summary>Gets the current least value in the tree.</summary>
        </member>
        <member name="P:Towel.DataStructures.ISortedBinaryTree`1.CurrentGreatest">
            <summary>Gets the current greated value in the tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.ContainsSift``1(``0)">
            <summary>Determines if the tree contains a value.</summary>
            <typeparam name="TSift">The type of the sifting function.</typeparam>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the value is in the tree or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.TryGet``1(``0)">
            <summary>Tries to get a value.</summary>
            <typeparam name="TSift">The type of the sifting function.</typeparam>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the value was found or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.TryRemoveSift``1(``0)">
            <summary>Tries to remove a value.</summary>
            <typeparam name="TSift">The type of the sifting function.</typeparam>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the remove succeeded or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.StepperBreak``1(`0,`0,``0)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.StepperReverseBreak``1(``0)">
            <summary>Does a step function (right to left) for sorted binary search trees.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="step">The step function.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.ISortedBinaryTree`1.StepperReverseBreak``1(`0,`0,``0)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="T:Towel.DataStructures.ISortedBinaryTree`2">
            <summary>A self-sorting binary tree based on the heights of each node.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TCompare">The type that is comparing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.SortedBinaryTree">
            <summary>Static members for <see cref="T:Towel.DataStructures.ISortedBinaryTree`1"/> and <see cref="T:Towel.DataStructures.ISortedBinaryTree`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.ContainsSift``1(Towel.DataStructures.ISortedBinaryTree{``0},System.Func{``0,Towel.CompareResult})">
            <summary>Determines if the tree contains a value.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to perfrom the contains check on.</param>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the value is in the tree or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.TryGet``1(Towel.DataStructures.ISortedBinaryTree{``0},System.Func{``0,Towel.CompareResult})">
            <summary>Tries to get a value.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to perfrom the TryGet on.</param>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the value was found or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.TryRemoveSift``1(Towel.DataStructures.ISortedBinaryTree{``0},System.Func{``0,Towel.CompareResult})">
            <summary>Tries to remove a value.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to perfrom the TryRemoveSift on.</param>
            <param name="sift">The sifting function that respects the sorting of the tree.</param>
            <returns>True if the remove succeeded or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.Stepper``1(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,System.Action{``0})">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.Stepper``2(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,``1)">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.StepperBreak``1(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,System.Func{``0,Towel.StepStatus})">
            <summary>Does an optimized step function (left to right) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.StepperReverse``1(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,System.Action{``0})">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.StepperReverse``2(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,``1)">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TStep">The type of the step function.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.SortedBinaryTree.StepperReverseBreak``1(Towel.DataStructures.ISortedBinaryTree{``0},``0,``0,System.Func{``0,Towel.StepStatus})">
            <summary>Does an optimized step function (right to left) for sorted binary search trees.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="tree">The tree to traverse.</param>
            <param name="minimum">The minimum step value.</param>
            <param name="maximum">The maximum step value.</param>
            <param name="step">The step function.</param>
            <returns>The result status of the stepper function.</returns>
        </member>
        <member name="T:Towel.DataStructures.IStack`1">
            <summary>Implements a First-In-Last-Out stack data structure.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Push(`0)">
            <summary>Adds an item to the top of the stack.</summary>
            <param name="push">The item to add to the stack.</param>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Peek">
            <summary>Returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
        </member>
        <member name="M:Towel.DataStructures.IStack`1.Pop">
            <summary>Removes and returns the most recent addition to the stack.</summary>
            <returns>The most recent addition to the stack.</returns>
        </member>
        <member name="T:Towel.DataStructures.StackLinked`1">
            <summary>Implements a First-In-Last-Out stack data structure using a linked list.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.#ctor">
            <summary>Constructs a new stack.</summary>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.#ctor(Towel.DataStructures.StackLinked{`0})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="stack">The stack to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.StackLinked`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Push(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Pop">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackLinked`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.StackArray`1">
            <summary>Implements a First-In-Last-Out stack data structure using an array.</summary>
            <typeparam name="T">The generic type within the structure.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.#ctor">
            <summary>Constructs a new stack.</summary>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.#ctor(System.Int32)">
            <summary>Constructs a new stack.</summary>
            <param name="minimumCapacity">The minimum capacity of the stack.</param>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.#ctor(Towel.DataStructures.StackArray{`0})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="stack">The stack to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.CurrentCapacity">
            <summary>Gets the current capacity of the list.</summary>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.MinimumCapacity">
            <summary>Allows you to adjust the minimum capacity of this list.</summary>
        </member>
        <member name="P:Towel.DataStructures.StackArray`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.ToArray">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Push(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Pop">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Peek">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.StackArray`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.ITree`1">
            <summary>A generic tree data structure.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
        </member>
        <member name="P:Towel.DataStructures.ITree`1.Top">
            <summary>The head of the tree.</summary>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.IsChildOf(`0,`0)">
            <summary>Determines if a node is the child of another node.</summary>
            <param name="node">The child to check the parent of.</param>
            <param name="parent">The parent to check the child of.</param>
            <returns>True if the node is a child of the parent; False if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.Children(`0,System.Action{`0})">
            <summary>Stepper function for the children of a given node.</summary>
            <param name="parent">The node to step through the children of.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.Parent(`0)">
            <summary>Gets the parent of a given node.</summary>
            <param name="child">The child to get the parent of.</param>
            <returns>The parent of the given child.</returns>
        </member>
        <member name="M:Towel.DataStructures.ITree`1.TryAdd(`0,`0)">
            <summary>Adds a node to the tree.</summary>
            <param name="addition">The node to be added.</param>
            <param name="parent">The parent of the node to be added.</param>
            <returns>
            (<see cref="T:System.Boolean"/> Success, <see cref="T:System.Exception"/>? Exception)<br/>
            - <see cref="T:System.Boolean"/> Success: true if the value was added to the tree or false if not<br/>
            - <see cref="T:System.Exception"/>? Exception: the exception that occured if the add was not successful
            </returns>
        </member>
        <member name="T:Towel.DataStructures.TreeMap">
            <summary>Static members for the <see cref="T:Towel.DataStructures.TreeMap`3"/> type.</summary>
        </member>
        <member name="M:Towel.DataStructures.TreeMap.New``1(``0,System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.TreeMap`3"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="top">The top of the tree.</param>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.TreeMap`3"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.TreeMap`3">
            <summary>A generic tree data structure using a dictionary to store node data.</summary>
            <typeparam name="T">The generic type stored in this data structure.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.#ctor(`0,`1,`2)">
            <summary>Constructs a new tree.</summary>
            <param name="top">The top of the tree.</param>
            <param name="equate">The function for quality checking <typeparamref name="T"/> values.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.#ctor(Towel.DataStructures.TreeMap{`0,`1,`2})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="tree">The tree to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`3.Top">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`3.Hash">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`3.Equate">
            <inheritdoc/>
        </member>
        <member name="P:Towel.DataStructures.TreeMap`3.Count">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.IsChildOf(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.Parent(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.Children(`0,System.Action{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.TryAdd(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TreeMap`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.Trie">
            <summary>Extension methods for <see cref="T:Towel.DataStructures.ITrie`1"/> and <see cref="T:Towel.DataStructures.ITrie`2"/>.</summary>
        </member>
        <member name="M:Towel.DataStructures.Trie.Add``2(Towel.DataStructures.ITrie{``0,``1},``1,System.Action{System.Action{``0}})">
            <summary>Adds a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="trie">The trie to add the value to.</param>
            <param name="value">The value to be added.</param>
            <param name="stepper">The keys of the relative value.</param>
        </member>
        <member name="M:Towel.DataStructures.Trie.Get``2(Towel.DataStructures.ITrie{``0,``1},System.Action{System.Action{``0}})">
            <summary>Gets a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="trie">The trie to get the value from.</param>
            <param name="stepper">The keys of the relative value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Towel.DataStructures.Trie.Remove``2(Towel.DataStructures.ITrie{``0,``1},System.Action{System.Action{``0}})">
            <summary>Removes a value.</summary>
            <typeparam name="T">The type of value.</typeparam>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="trie">The trie to remove the value from.</param>
            <param name="stepper">The keys to store the value relative to.</param>
        </member>
        <member name="T:Towel.DataStructures.ITrie`1">
            <summary>A trie data structure that allows partial value sharing to reduce redundant memory.</summary>
            <typeparam name="T">The type of values in the trie.</typeparam>
        </member>
        <member name="T:Towel.DataStructures.TrieLinkedHashLinked">
            <summary>Static helpers.</summary>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked.New``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.TrieLinkedHashLinked`3"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.TrieLinkedHashLinked`3"/>.</returns>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked.New``2(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Constructs a new <see cref="T:Towel.DataStructures.TrieLinkedHashLinked`4"/>.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
            <typeparam name="TData">The additional data type to store with each leaf.</typeparam>
            <param name="equate">The function for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="hash">The function for hashing <typeparamref name="T"/> values.</param>
            <returns>The new constructed <see cref="T:Towel.DataStructures.TrieLinkedHashLinked`4"/>.</returns>
        </member>
        <member name="T:Towel.DataStructures.TrieLinkedHashLinked`3">
            <summary>A trie data structure that allows partial value sharing to reduce redundant memory.</summary>
            <typeparam name="T">The type of values in the trie.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.#ctor(`1,`2)">
            <summary>Constructs a new trie that uses linked hash tables of linked lists.</summary>
            <param name="equate">The equality delegate for the keys.</param>
            <param name="hash">The hashing function for the keys.</param>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.#ctor(Towel.DataStructures.TrieLinkedHashLinked{`0,`1,`2})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="trie">The trie to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`3.Count">
            <summary>The current count of the trie.</summary>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`3.Equate">
            <summary>The equality function of the keys.</summary>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`3.Hash">
            <summary>The hash fucntion for the keys.</summary>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.TryAdd(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.TryRemove(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.Contains(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`3.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.DataStructures.ITrie`2">
            <summary>A trie data structure that allows partial value sharing to reduce redundant memory.</summary>
            <typeparam name="T">The type of values in the trie.</typeparam>
            <typeparam name="TData">The additional data type to store with each leaf.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.ITrie`2.TryAdd(`1,System.Action{System.Action{`0}})">
            <summary>Tries to add a value to the trie.</summary>
            <param name="value">The value to add.</param>
            <param name="stepper">The relative keys of the value.</param>
            <returns>True if the value was added or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ITrie`2.TryGet(System.Action{System.Action{`0}})">
            <summary>Tries to get a value.</summary>
            <param name="stepper">The relative keys of the value.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="M:Towel.DataStructures.ITrie`2.TryRemove(System.Action{System.Action{`0}})">
            <summary>Tries to remove a value.</summary>
            <param name="stepper">The relative keys of the value.</param>
            <returns>True if the remove was successful or false if not.</returns>
        </member>
        <member name="T:Towel.DataStructures.TrieLinkedHashLinked`4">
            <summary>A trie data structure that allows partial value sharing to reduce redundant memory.</summary>
            <typeparam name="T">The type of values in the trie.</typeparam>
            <typeparam name="TData">The additional data type to store with each leaf.</typeparam>
            <typeparam name="TEquate">The type of function for quality checking <typeparamref name="T"/> values.</typeparam>
            <typeparam name="THash">The type of function for hashing <typeparamref name="T"/> values.</typeparam>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.#ctor(`2,`3)">
            <summary>Constructs a new trie that uses linked hash tables of linked lists.</summary>
            <param name="equate">The equality delegate for the keys.</param>
            <param name="hash">The hashing function for the keys.</param>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.#ctor(Towel.DataStructures.TrieLinkedHashLinked{`0,`1,`2,`3})">
            <summary>This constructor is for cloning purposes.</summary>
            <param name="trie">The trie to clone.</param>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`4.Count">
            <summary>The current count of the trie.</summary>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`4.Equate">
            <summary>The equality function of the keys.</summary>
        </member>
        <member name="P:Towel.DataStructures.TrieLinkedHashLinked`4.Hash">
            <summary>The hash fucntion for the keys.</summary>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.TryAdd(`1,System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.TryGet(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.TryRemove(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.Contains(System.Action{System.Action{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.StepperBreak``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Towel.DataStructures.TrieLinkedHashLinked`4.ToArray">
            <inheritdoc/>
        </member>
        <member name="T:Towel.TowelBugException">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
        </member>
        <member name="M:Towel.TowelBugException.#ctor(System.String)">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Towel.TowelBugException.#ctor(System.String,System.Exception)">
            <summary>Represents a bug in the Towel project. Please report it.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Towel.CorruptedDataStructureException">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
        </member>
        <member name="M:Towel.CorruptedDataStructureException.#ctor">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
        </member>
        <member name="M:Towel.CorruptedDataStructureException.#ctor(System.String)">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Towel.CorruptedDataStructureException.#ctor(System.String,System.Exception)">
            <summary>Thrown when a data structure operation fails due to external corruption.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Towel.InequalitySyntaxException">
            <summary>Thrown when the inequality syntax is missused.</summary>
        </member>
        <member name="M:Towel.InequalitySyntaxException.#ctor">
            <summary>Thrown when the inequality syntax is missused.</summary>
        </member>
        <member name="M:Towel.InequalitySyntaxException.#ctor(System.String)">
            <summary>Thrown when the inequality syntax is missused.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Towel.InequalitySyntaxException.#ctor(System.String,System.Exception)">
            <summary>Thrown when the inequality syntax is missused.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Towel.DocumentationMethodException">
            <summary>Thrown when an internal documentation method is called.</summary>
        </member>
        <member name="M:Towel.DocumentationMethodException.#ctor">
            <summary>Thrown when an internal documentation method is called.</summary>
        </member>
        <member name="M:Towel.DocumentationMethodException.#ctor(System.String)">
            <summary>Thrown when an internal documentation method is called.</summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Towel.DocumentationMethodException.#ctor(System.String,System.Exception)">
            <summary>Thrown when an internal documentation method is called.</summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Towel.IAction">
            <inheritdoc cref="T:System.Action"/>
        </member>
        <member name="M:Towel.IAction.Invoke">
            <inheritdoc cref="M:System.Action.Invoke"/>
        </member>
        <member name="T:Towel.IAction`1">
            <inheritdoc cref="T:System.Action`1"/>
        </member>
        <member name="M:Towel.IAction`1.Invoke(`0)">
            <inheritdoc cref="M:System.Action`1.Invoke(`0)"/>
        </member>
        <member name="T:Towel.IAction`2">
            <inheritdoc cref="T:System.Action`2"/>
        </member>
        <member name="M:Towel.IAction`2.Invoke(`0,`1)">
            <inheritdoc cref="M:System.Action`2.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.IAction`3">
            <inheritdoc cref="T:System.Action`3"/>
        </member>
        <member name="M:Towel.IAction`3.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:System.Action`3.Invoke(`0,`1,`2)"/>
        </member>
        <member name="T:Towel.IAction`4">
            <inheritdoc cref="T:System.Action`4"/>
        </member>
        <member name="M:Towel.IAction`4.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:System.Action`4.Invoke(`0,`1,`2,`3)"/>
        </member>
        <member name="T:Towel.IAction`5">
            <inheritdoc cref="T:System.Action`5"/>
        </member>
        <member name="M:Towel.IAction`5.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)"/>
        </member>
        <member name="T:Towel.IAction`6">
            <inheritdoc cref="T:System.Action`6"/>
        </member>
        <member name="M:Towel.IAction`6.Invoke(`0,`1,`2,`3,`4,`5)">
            <inheritdoc cref="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)"/>
        </member>
        <member name="T:Towel.IAction`7">
            <inheritdoc cref="T:System.Action`7"/>
        </member>
        <member name="M:Towel.IAction`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <inheritdoc cref="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)"/>
        </member>
        <member name="T:Towel.IFunc`1">
            <inheritdoc cref="T:System.Func`1"/>
        </member>
        <member name="M:Towel.IFunc`1.Invoke">
            <inheritdoc cref="M:System.Func`1.Invoke"/>
        </member>
        <member name="T:Towel.IFunc`2">
            <inheritdoc cref="T:System.Func`2"/>
        </member>
        <member name="M:Towel.IFunc`2.Invoke(`0)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="T:Towel.IFunc`3">
            <inheritdoc cref="T:System.Func`3"/>
        </member>
        <member name="M:Towel.IFunc`3.Invoke(`0,`1)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.IFunc`4">
            <inheritdoc cref="T:System.Func`4"/>
        </member>
        <member name="M:Towel.IFunc`4.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:System.Func`4.Invoke(`0,`1,`2)"/>
        </member>
        <member name="T:Towel.IFunc`5">
            <inheritdoc cref="T:System.Func`5"/>
        </member>
        <member name="M:Towel.IFunc`5.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:System.Func`5.Invoke(`0,`1,`2,`3)"/>
        </member>
        <member name="T:Towel.IFunc`6">
            <inheritdoc cref="T:System.Func`6"/>
        </member>
        <member name="M:Towel.IFunc`6.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)"/>
        </member>
        <member name="T:Towel.IFunc`7">
            <inheritdoc cref="T:System.Func`7"/>
        </member>
        <member name="M:Towel.IFunc`7.Invoke(`0,`1,`2,`3,`4,`5)">
            <inheritdoc cref="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)"/>
        </member>
        <member name="T:Towel.IFunc`8">
            <inheritdoc cref="T:System.Func`8"/>
        </member>
        <member name="M:Towel.IFunc`8.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <inheritdoc cref="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)"/>
        </member>
        <member name="T:Towel.SAction">
            <inheritdoc cref="T:System.Action"/>
        </member>
        <member name="M:Towel.SAction.Invoke">
            <inheritdoc cref="M:System.Action.Invoke"/>
        </member>
        <member name="M:Towel.SAction.op_Implicit(System.Action)~Towel.SAction">
            <summary>Wraps an <see cref="F:Towel.SAction.Action"/> in an <see cref="T:Towel.SAction"/>.</summary>
            <param name="action">The <see cref="F:Towel.SAction.Action"/> wrapped in an <see cref="T:Towel.SAction"/>.</param>
        </member>
        <member name="T:Towel.SAction`1">
            <inheritdoc cref="T:System.Action`1"/>
        </member>
        <member name="M:Towel.SAction`1.Invoke(`0)">
            <inheritdoc cref="M:System.Action`1.Invoke(`0)"/>
        </member>
        <member name="M:Towel.SAction`1.op_Implicit(System.Action{`0})~Towel.SAction{`0}">
            <summary>Wraps an <see cref="T:System.Action`1"/> in an <see cref="T:Towel.SAction`1"/>.</summary>
            <param name="action">The <see cref="T:System.Action`1"/> wrapped in an <see cref="T:Towel.SAction`1"/>.</param>
        </member>
        <member name="T:Towel.SAction`2">
            <inheritdoc cref="T:System.Action`2"/>
        </member>
        <member name="M:Towel.SAction`2.Invoke(`0,`1)">
            <inheritdoc cref="M:System.Action`2.Invoke(`0,`1)"/>
        </member>
        <member name="M:Towel.SAction`2.op_Implicit(System.Action{`0,`1})~Towel.SAction{`0,`1}">
            <summary>Wraps an <see cref="T:System.Action`2"/> in an <see cref="T:Towel.SAction`2"/>.</summary>
            <param name="action">The <see cref="T:System.Action`2"/> wrapped in an <see cref="T:Towel.SAction`2"/>.</param>
        </member>
        <member name="T:Towel.SAction`3">
            <inheritdoc cref="T:System.Action`3"/>
        </member>
        <member name="M:Towel.SAction`3.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:System.Action`3.Invoke(`0,`1,`2)"/>
        </member>
        <member name="M:Towel.SAction`3.op_Implicit(System.Action{`0,`1,`2})~Towel.SAction{`0,`1,`2}">
            <summary>Wraps an <see cref="T:System.Action`3"/> in an <see cref="T:Towel.SAction`3"/>.</summary>
            <param name="action">The <see cref="T:System.Action`3"/> wrapped in an <see cref="T:Towel.SAction`3"/>.</param>
        </member>
        <member name="T:Towel.SAction`4">
            <inheritdoc cref="T:System.Action`4"/>
        </member>
        <member name="M:Towel.SAction`4.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:System.Action`4.Invoke(`0,`1,`2,`3)"/>
        </member>
        <member name="M:Towel.SAction`4.op_Implicit(System.Action{`0,`1,`2,`3})~Towel.SAction{`0,`1,`2,`3}">
            <summary>Wraps an <see cref="T:System.Action`4"/> in an <see cref="T:Towel.SAction`4"/>.</summary>
            <param name="action">The <see cref="T:System.Action`4"/> wrapped in an <see cref="T:Towel.SAction`4"/>.</param>
        </member>
        <member name="T:Towel.SAction`5">
            <inheritdoc cref="T:System.Action`5"/>
        </member>
        <member name="M:Towel.SAction`5.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:System.Action`5.Invoke(`0,`1,`2,`3,`4)"/>
        </member>
        <member name="M:Towel.SAction`5.op_Implicit(System.Action{`0,`1,`2,`3,`4})~Towel.SAction{`0,`1,`2,`3,`4}">
            <summary>Wraps an <see cref="T:System.Action`5"/> in an <see cref="T:Towel.SAction`5"/>.</summary>
            <param name="action">The <see cref="T:System.Action`5"/> wrapped in an <see cref="T:Towel.SAction`5"/>.</param>
        </member>
        <member name="T:Towel.SAction`6">
            <inheritdoc cref="T:System.Action`6"/>
        </member>
        <member name="M:Towel.SAction`6.Invoke(`0,`1,`2,`3,`4,`5)">
            <inheritdoc cref="M:System.Action`6.Invoke(`0,`1,`2,`3,`4,`5)"/>
        </member>
        <member name="M:Towel.SAction`6.op_Implicit(System.Action{`0,`1,`2,`3,`4,`5})~Towel.SAction{`0,`1,`2,`3,`4,`5}">
            <summary>Wraps an <see cref="T:System.Action`6"/> in an <see cref="T:Towel.SAction`6"/>.</summary>
            <param name="action">The <see cref="T:System.Action`6"/> wrapped in an <see cref="T:Towel.SAction`6"/>.</param>
        </member>
        <member name="T:Towel.SAction`7">
            <inheritdoc cref="T:System.Action`7"/>
        </member>
        <member name="M:Towel.SAction`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <inheritdoc cref="M:System.Action`7.Invoke(`0,`1,`2,`3,`4,`5,`6)"/>
        </member>
        <member name="M:Towel.SAction`7.op_Implicit(System.Action{`0,`1,`2,`3,`4,`5,`6})~Towel.SAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Wraps an <see cref="T:System.Action`7"/> in an <see cref="T:Towel.SAction`7"/>.</summary>
            <param name="action">The <see cref="T:System.Action`7"/> wrapped in an <see cref="T:Towel.SAction`7"/>.</param>
        </member>
        <member name="T:Towel.SFunc`1">
            <inheritdoc cref="T:System.Func`1"/>
        </member>
        <member name="M:Towel.SFunc`1.Invoke">
            <inheritdoc cref="M:System.Func`1.Invoke"/>
        </member>
        <member name="M:Towel.SFunc`1.op_Implicit(System.Func{`0})~Towel.SFunc{`0}">
            <summary>Wraps an <see cref="T:System.Func`1"/> in an <see cref="T:Towel.SFunc`1"/>.</summary>
            <param name="func">The <see cref="T:System.Func`1"/> wrapped in an <see cref="T:Towel.SFunc`1"/>.</param>
        </member>
        <member name="T:Towel.SFunc`2">
            <inheritdoc cref="T:System.Func`2"/>
        </member>
        <member name="M:Towel.SFunc`2.Invoke(`0)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="M:Towel.SFunc`2.op_Implicit(System.Func{`0,`1})~Towel.SFunc{`0,`1}">
            <summary>Wraps an <see cref="T:System.Func`2"/> in an <see cref="T:Towel.SFunc`2"/>.</summary>
            <param name="func">The <see cref="T:System.Func`2"/> wrapped in an <see cref="T:Towel.SFunc`2"/>.</param>
        </member>
        <member name="T:Towel.SFunc`3">
            <inheritdoc cref="T:System.Func`3"/>
        </member>
        <member name="M:Towel.SFunc`3.Invoke(`0,`1)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="M:Towel.SFunc`3.op_Implicit(System.Func{`0,`1,`2})~Towel.SFunc{`0,`1,`2}">
            <summary>Wraps an <see cref="T:System.Func`3"/> in an <see cref="T:Towel.SFunc`3"/>.</summary>
            <param name="func">The <see cref="T:System.Func`3"/> wrapped in an <see cref="T:Towel.SFunc`3"/>.</param>
        </member>
        <member name="T:Towel.SFunc`4">
            <inheritdoc cref="T:System.Func`4"/>
        </member>
        <member name="M:Towel.SFunc`4.Invoke(`0,`1,`2)">
            <inheritdoc cref="M:System.Func`4.Invoke(`0,`1,`2)"/>
        </member>
        <member name="M:Towel.SFunc`4.op_Implicit(System.Func{`0,`1,`2,`3})~Towel.SFunc{`0,`1,`2,`3}">
            <summary>Wraps an <see cref="T:System.Func`4"/> in an <see cref="T:Towel.SFunc`4"/>.</summary>
            <param name="func">The <see cref="T:System.Func`4"/> wrapped in an <see cref="T:Towel.SFunc`4"/>.</param>
        </member>
        <member name="T:Towel.SFunc`5">
            <inheritdoc cref="T:System.Func`5"/>
        </member>
        <member name="M:Towel.SFunc`5.Invoke(`0,`1,`2,`3)">
            <inheritdoc cref="M:System.Func`5.Invoke(`0,`1,`2,`3)"/>
        </member>
        <member name="M:Towel.SFunc`5.op_Implicit(System.Func{`0,`1,`2,`3,`4})~Towel.SFunc{`0,`1,`2,`3,`4}">
            <summary>Wraps an <see cref="T:System.Func`5"/> in an <see cref="T:Towel.SFunc`5"/>.</summary>
            <param name="func">The <see cref="T:System.Func`5"/> wrapped in an <see cref="T:Towel.SFunc`5"/>.</param>
        </member>
        <member name="T:Towel.SFunc`6">
            <inheritdoc cref="T:System.Func`6"/>
        </member>
        <member name="M:Towel.SFunc`6.Invoke(`0,`1,`2,`3,`4)">
            <inheritdoc cref="M:System.Func`6.Invoke(`0,`1,`2,`3,`4)"/>
        </member>
        <member name="M:Towel.SFunc`6.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5})~Towel.SFunc{`0,`1,`2,`3,`4,`5}">
            <summary>Wraps an <see cref="T:System.Func`6"/> in an <see cref="T:Towel.SFunc`6"/>.</summary>
            <param name="func">The <see cref="T:System.Func`6"/> wrapped in an <see cref="T:Towel.SFunc`6"/>.</param>
        </member>
        <member name="T:Towel.SFunc`7">
            <inheritdoc cref="T:System.Func`7"/>
        </member>
        <member name="M:Towel.SFunc`7.Invoke(`0,`1,`2,`3,`4,`5)">
            <inheritdoc cref="M:System.Func`7.Invoke(`0,`1,`2,`3,`4,`5)"/>
        </member>
        <member name="M:Towel.SFunc`7.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5,`6})~Towel.SFunc{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Wraps an <see cref="T:System.Func`7"/> in an <see cref="T:Towel.SFunc`7"/>.</summary>
            <param name="func">The <see cref="T:System.Func`7"/> wrapped in an <see cref="T:Towel.SFunc`7"/>.</param>
        </member>
        <member name="T:Towel.SFunc`8">
            <inheritdoc cref="T:System.Func`8"/>
        </member>
        <member name="M:Towel.SFunc`8.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <inheritdoc cref="M:System.Func`8.Invoke(`0,`1,`2,`3,`4,`5,`6)"/>
        </member>
        <member name="M:Towel.SFunc`8.op_Implicit(System.Func{`0,`1,`2,`3,`4,`5,`6,`7})~Towel.SFunc{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Wraps an <see cref="T:System.Func`8"/> in an <see cref="T:Towel.SFunc`8"/>.</summary>
            <param name="func">The <see cref="T:System.Func`8"/> wrapped in an <see cref="T:Towel.SFunc`8"/>.</param>
        </member>
        <member name="T:Towel.ILazy`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ILazy`1.ThreadSafety">
            <summary>The pattern of thread safety this lazy is using.</summary>
        </member>
        <member name="P:Towel.ILazy`1.Value">
            <summary>Gets the lazily initialized value.</summary>
        </member>
        <member name="P:Towel.ILazy`1.IsValueCreated">
            <summary>True if <see cref="P:Towel.ILazy`1.Value"/> has been initialized.</summary>
        </member>
        <member name="P:Towel.ILazy`1.IsCachingExceptions">
            <summary>True if exceptions thrown by the factory delegate are being cached.</summary>
        </member>
        <member name="P:Towel.ILazy`1.IsStructCopySafe">
            <summary>True if the lazy is safe from struct copies.</summary>
        </member>
        <member name="T:Towel.SLazy`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazy`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazy`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazy`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazy`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazy`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazy`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazy`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazy`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazy`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazy`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazy`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazy`1.op_Implicit(System.Func{`0})~Towel.SLazy{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazy`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazy`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazy`1.op_Implicit(`0)~Towel.SLazy{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazy`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazy`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazy`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazy`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazy`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazy`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazy`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazy`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazy`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazy`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazy`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazy`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazy`1.op_Equality(Towel.SLazy{`0},Towel.SLazy{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazy`1.op_Inequality(Towel.SLazy{`0},Towel.SLazy{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.SLazyNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazyNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazyNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.op_Implicit(System.Func{`0})~Towel.SLazyNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.op_Implicit(`0)~Towel.SLazyNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazyNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazyNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazyNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazyNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.op_Equality(Towel.SLazyNoCatch{`0},Towel.SLazyNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoCatch`1.op_Inequality(Towel.SLazyNoCatch{`0},Towel.SLazyNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.SLazyNoLock`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazyNoLock`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLock`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLock`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLock`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLock`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazyNoLock`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoLock`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoLock`1.op_Implicit(System.Func{`0})~Towel.SLazyNoLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoLock`1.op_Implicit(`0)~Towel.SLazyNoLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoLock`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazyNoLock`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazyNoLock`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazyNoLock`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoLock`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazyNoLock`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazyNoLock`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazyNoLock`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazyNoLock`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazyNoLock`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazyNoLock`1.op_Equality(Towel.SLazyNoLock{`0},Towel.SLazyNoLock{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoLock`1.op_Inequality(Towel.SLazyNoLock{`0},Towel.SLazyNoLock{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.SLazyNoLockNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazyNoLockNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLockNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLockNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLockNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyNoLockNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.op_Implicit(System.Func{`0})~Towel.SLazyNoLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.op_Implicit(`0)~Towel.SLazyNoLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazyNoLockNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.op_Equality(Towel.SLazyNoLockNoCatch{`0},Towel.SLazyNoLockNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyNoLockNoCatch`1.op_Inequality(Towel.SLazyNoLockNoCatch{`0},Towel.SLazyNoLockNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.SLazyPublicationLock`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazyPublicationLock`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLock`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLock`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLock`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLock`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyPublicationLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.op_Implicit(System.Func{`0})~Towel.SLazyPublicationLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.op_Implicit(`0)~Towel.SLazyPublicationLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyPublicationLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazyPublicationLock`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazyPublicationLock`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazyPublicationLock`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazyPublicationLock`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.op_Equality(Towel.SLazyPublicationLock{`0},Towel.SLazyPublicationLock{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLock`1.op_Inequality(Towel.SLazyPublicationLock{`0},Towel.SLazyPublicationLock{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.SLazyPublicationLockNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.SLazyPublicationLockNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLockNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLockNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLockNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.SLazyPublicationLockNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.op_Implicit(System.Func{`0})~Towel.SLazyPublicationLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyPublicationLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.op_Implicit(`0)~Towel.SLazyPublicationLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.SLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.SLazyPublicationLockNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.op_Equality(Towel.SLazyPublicationLockNoCatch{`0},Towel.SLazyPublicationLockNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.SLazyPublicationLockNoCatch`1.op_Inequality(Towel.SLazyPublicationLockNoCatch{`0},Towel.SLazyPublicationLockNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazy`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazy`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazy`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazy`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazy`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazy`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazy`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazy`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazy`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazy`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazy`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazy`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazy`1.op_Implicit(System.Func{`0})~Towel.ValueLazy{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazy`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazy`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazy`1.op_Implicit(`0)~Towel.ValueLazy{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazy`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazy`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazy`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazy`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazy`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazy`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazy`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazy`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazy`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazy`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazy`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazy`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazy`1.op_Equality(Towel.ValueLazy{`0},Towel.ValueLazy{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazy`1.op_Inequality(Towel.ValueLazy{`0},Towel.ValueLazy{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazyNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazyNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.op_Implicit(System.Func{`0})~Towel.ValueLazyNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.op_Implicit(`0)~Towel.ValueLazyNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazyNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazyNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazyNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazyNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.op_Equality(Towel.ValueLazyNoCatch{`0},Towel.ValueLazyNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoCatch`1.op_Inequality(Towel.ValueLazyNoCatch{`0},Towel.ValueLazyNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazyNoLock`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazyNoLock`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLock`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLock`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLock`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLock`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.op_Implicit(System.Func{`0})~Towel.ValueLazyNoLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.op_Implicit(`0)~Towel.ValueLazyNoLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazyNoLock`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazyNoLock`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazyNoLock`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazyNoLock`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.op_Equality(Towel.ValueLazyNoLock{`0},Towel.ValueLazyNoLock{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLock`1.op_Inequality(Towel.ValueLazyNoLock{`0},Towel.ValueLazyNoLock{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazyNoLockNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazyNoLockNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLockNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLockNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLockNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyNoLockNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.op_Implicit(System.Func{`0})~Towel.ValueLazyNoLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.op_Implicit(`0)~Towel.ValueLazyNoLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyNoLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazyNoLockNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.op_Equality(Towel.ValueLazyNoLockNoCatch{`0},Towel.ValueLazyNoLockNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyNoLockNoCatch`1.op_Inequality(Towel.ValueLazyNoLockNoCatch{`0},Towel.ValueLazyNoLockNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazyPublicationLock`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazyPublicationLock`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLock`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLock`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLock`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLock`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.op_Implicit(System.Func{`0})~Towel.ValueLazyPublicationLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLock`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.op_Implicit(`0)~Towel.ValueLazyPublicationLock{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLock`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazyPublicationLock`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.op_Equality(Towel.ValueLazyPublicationLock{`0},Towel.ValueLazyPublicationLock{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLock`1.op_Inequality(Towel.ValueLazyPublicationLock{`0},Towel.ValueLazyPublicationLock{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.ValueLazyPublicationLockNoCatch`1">
            <summary>Provides support for lazy initialization.</summary>
            <typeparam name="T">The type of value that is being lazily initialized.</typeparam>
        </member>
        <member name="P:Towel.ValueLazyPublicationLockNoCatch`1.IsValueCreated">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLockNoCatch`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLockNoCatch`1.ThreadSafety">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLockNoCatch`1.IsCachingExceptions">
            <inheritdoc />
        </member>
        <member name="P:Towel.ValueLazyPublicationLockNoCatch`1.IsStructCopySafe">
            <inheritdoc />
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.#ctor(`0)">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.#ctor(System.Func{`0})">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.op_Implicit(System.Func{`0})~Towel.ValueLazyPublicationLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLockNoCatch`1"/> from a <see cref="T:System.Func`1"/>.</summary>
            <param name="func">The method used to initialize <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.op_Implicit(`0)~Towel.ValueLazyPublicationLockNoCatch{`0}">
            <summary>Constructs a new <see cref="T:Towel.ValueLazyPublicationLockNoCatch`1"/> from a <typeparamref name="T"/>.</summary>
            <param name="value">The value to initialize <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/> with.</param>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.Equals(System.Object)">
            <summary>Checks for equality between <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/> and <paramref name="obj"/>.</summary>
            <param name="obj">The value to compare to <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</param>
            <returns>True if <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/> and <paramref name="obj"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.ToString">
            <summary>Returns a string that represents <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</summary>
            <returns>A string that represents <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/></returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.GetHashCode">
            <summary>Gets the hash code of <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</summary>
            <returns>The hash code of <see cref="P:Towel.ValueLazyPublicationLockNoCatch`1.Value"/>.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.op_Equality(Towel.ValueLazyPublicationLockNoCatch{`0},Towel.ValueLazyPublicationLockNoCatch{`0})">
            <summary>Checks for equality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the equality check.</param>
            <param name="right">The second value of the equality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are equal or False if not.</returns>
        </member>
        <member name="M:Towel.ValueLazyPublicationLockNoCatch`1.op_Inequality(Towel.ValueLazyPublicationLockNoCatch{`0},Towel.ValueLazyPublicationLockNoCatch{`0})">
            <summary>Checks for inequality between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The first value of the inequality check.</param>
            <param name="right">The second value of the inequality check.</param>
            <returns>True if <paramref name="left"/> and <paramref name="right"/> are not equal or False if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Fraction`1">
            <summary>Represents a rational value with a numerator and a denominator.</summary>
            <typeparam name="T">The type of the numerator and denominator.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Fraction`1.Numerator">
            <summary>The numerator of the fraction.</summary>
        </member>
        <member name="P:Towel.Mathematics.Fraction`1.Denominator">
            <summary>The denominator of the fraction.</summary>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.#ctor(`0)">
            <summary>Constructs a new fraction [<paramref name="numerator"/> / 1].</summary>
            <param name="numerator">The numerator of the fraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.#ctor(`0,`0)">
            <summary>Constructs a new fraction [<paramref name="numerator"/> / <paramref name="deniminator"/>].</summary>
            <param name="numerator">The numerator of the fraction.</param>
            <param name="deniminator">The denominator of the fraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Implicit(`0)~Towel.Mathematics.Fraction{`0}">
            <summary>Implicitly converts a value into a fraction.</summary>
            <param name="value">The value to convert to a fraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_UnaryNegation(Towel.Mathematics.Fraction{`0})">
            <summary>Negates a value.</summary>
            <param name="a">The fraction to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Negate(Towel.Mathematics.Fraction{`0})">
            <summary>Negates a value.</summary>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Addition(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Adds two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Add(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Adds two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Subtraction(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Subtracts two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Subtract(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Subtracts two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Multiply(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Multiplies two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Multiply(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Multiplies two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Division(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Divides two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Divide(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Divides two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Modulus(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Computes the remainder of two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the remainder operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Remainder(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Computes the remainder of two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the remainder operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Remainder(Towel.Mathematics.Fraction{`0})">
            <summary>Computes the remainder of two values.</summary>
            <param name="b">The right operand.</param>
            <returns>The result of the remainder operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Reduce(Towel.Mathematics.Fraction{`0})">
            <summary>Reduces a fractional value if possible.</summary>
            <param name="a">The fractional value to reduce.</param>
            <returns>The fraction in the reduced form.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Reduce">
            <summary>Reduces a fractional value if possible.</summary>
            <returns>The fraction in the reduced form.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Equality(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Checks for equality between two values.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Equality(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Checks for equality between two values.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Equality(Towel.Mathematics.Fraction{`0})">
            <summary>Checks for equality between two values.</summary>
            <param name="b">The second operand.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Equals(System.Object)">
            <summary>Checks for equality with another object.</summary>
            <param name="obj">The object to equate with this.</param>
            <returns>The result of the equate.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_Inequality(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Checks for inequality between two values.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.NotEqual(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Checks for inequality between two values.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.NotEqual(Towel.Mathematics.Fraction{`0})">
            <summary>Checks for inequality between two values.</summary>
            <param name="b">The second operand.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_LessThan(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.LessThan(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.LessThan(Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_GreaterThan(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.GreaterThan(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.GreaterThan(Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_LessThanOrEqual(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.LessThanOrEqual(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.LessThanOrEqual(Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is less than another.</summary>
            <param name="b">The right operand.</param>
            <returns>The value of the less than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.op_GreaterThanOrEqual(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.GreaterThanOrEqual(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.GreaterThanOrEqual(Towel.Mathematics.Fraction{`0})">
            <summary>Determines if one value is greater than another.</summary>
            <param name="b">The right operand.</param>
            <returns>The value of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Compare(Towel.Mathematics.Fraction{`0})">
            <summary>Compares two values.</summary>
            <param name="b">The right operand.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Compare(Towel.Mathematics.Fraction{`0},Towel.Mathematics.Fraction{`0})">
            <summary>Compares two values.</summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.GetHashCode">
            <summary>Gets the default hash code for this instance.</summary>
            <returns>Teh computed hash code.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Tries to parse a <see cref="T:System.String"/> into a value of the type <see cref="T:Towel.Mathematics.Fraction`1"/>.</summary>
            <param name="string">The <see cref="T:System.String"/> to parse into a value ot type <see cref="T:Towel.Mathematics.Fraction`1"/>.</param>
            <param name="tryParse">The <see cref="M:Towel.Statics.TryParse``1(System.String)"/> method of the numerator and denomiator types.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: True if the parse was successful; False if not.<br/>
            - <see cref="T:Towel.Mathematics.Fraction`1"/> Value: The value if the parse was successful or default if not.
            </returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.TryParse``1(System.String,``0)">
            <summary>Tries to parse a <see cref="T:System.String"/> into a value of the type <see cref="T:Towel.Mathematics.Fraction`1"/>.</summary>
            <typeparam name="TryParse">The type of TryParse method of the numerator and denomiator types.</typeparam>
            <param name="string">The <see cref="T:System.String"/> to parse into a value ot type <see cref="T:Towel.Mathematics.Fraction`1"/>.</param>
            <param name="tryParse">The TryParse method of the numerator and denomiator types.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: True if the parse was successful; False if not.<br/>
            - <see cref="T:Towel.Mathematics.Fraction`1"/> Value: The value if the parse was successful or default if not.
            </returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.Parse(System.String)">
            <summary>Parses a string into a fraction.</summary>
            <param name="string">The string to parse.</param>
            <returns>The parsed value from the string.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.ToString">
            <summary>Default conversion to string for fractions.</summary>
            <returns>The value represented as a string.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.ToString(Towel.Mathematics.Fraction{`0},System.Func{`0,System.String})">
            <summary>Default conversion to string for fractions.</summary>
            <param name="fraction">The value to convert.</param>
            <param name="toString">The string conversion function for the numerator and denominator.</param>
            <returns>The value represented as a string.</returns>
        </member>
        <member name="M:Towel.Mathematics.Fraction`1.ToString``1(Towel.Mathematics.Fraction{`0},``0)">
            <summary>Default conversion to string for fractions.</summary>
            <typeparam name="TToString">The type of the string conversion function for the numerator and denominator.</typeparam>
            <param name="fraction">The value to convert.</param>
            <param name="toString">The string conversion function for the numerator and denominator.</param>
            <returns>The value represented as a string.</returns>
        </member>
        <member name="T:Towel.Mathematics.MathematicsSyntax">
            <summary>Contains static methods for mathematics syntax.</summary>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î£``3(``0,``1)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î£``1(``0,``0)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î£``1(``0,``0,``0,``0[])">
            <summary>Adds multiple values [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <param name="c">The third operand of the addition.</param>
            <param name="d">The remaining operands of the addition.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î£``1(System.Action{System.Action{``0}})">
            <summary>Adds multiple values [step1 + step2 + step3 + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper of the values to add.</param>
            <returns>The result of the addition [step1 + step2 + step3 + ...].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î ``3(``0,``1)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î ``1(``0,``0)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î ``1(``0,``0,``0,``0[])">
            <summary>Multiplies multiple values [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <param name="c">The third operand.</param>
            <param name="d">The remaining values.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</returns>
        </member>
        <member name="M:Towel.Mathematics.MathematicsSyntax.Î ``1(System.Action{System.Action{``0}})">
            <summary>Multiplies multiple numeric values [step1 * step2 * step3 * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the multiplication [step1 * step2 * step3 * ...].</returns>
        </member>
        <member name="T:Towel.Mathematics.Matrix`1">
            <summary>A matrix of arbitrary dimensions implemented as a flattened array.</summary>
            <typeparam name="T">The numeric type of this Matrix.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Rows">
            <summary>The number of rows in the matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Columns">
            <summary>The number of columns in the matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsSquare">
            <summary>Determines if the matrix is square.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsVector">
            <summary>Determines if the matrix is a vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is2x1">
            <summary>Determines if the matrix is a 2 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is3x1">
            <summary>Determines if the matrix is a 3 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is4x1">
            <summary>Determines if the matrix is a 4 component vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is2x2">
            <summary>Determines if the matrix is a 2 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is3x3">
            <summary>Determines if the matrix is a 3 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Is4x4">
            <summary>Determines if the matrix is a 4 square matrix.</summary>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>Standard row-major matrix indexing.</summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indeces.</returns>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.Item(System.Int32)">
            <summary>Indexing of the flattened array representing the matrix.</summary>
            <param name="flatIndex">The flattened index of the matrix.</param>
            <returns>The value at the given flattened index.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new default matrix of the given dimensions.</summary>
            <param name="rows">The number of row dimensions.</param>
            <param name="columns">The number of column dimensions.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,`0})">
            <summary>Constructs a new matrix and initializes it via function.</summary>
            <param name="rows">The number of rows to construct.</param>
            <param name="columns">The number of columns to construct.</param>
            <param name="function">The initialization function.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32,System.Func{System.Int32,`0})">
            <summary>Constructs a new matrix and initializes it via function.</summary>
            <param name="rows">The number of rows to construct.</param>
            <param name="columns">The number of columns to construct.</param>
            <param name="function">The initialization function.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Creates a new matrix using ROW MAJOR ORDER. The data will be referenced to, so
            changes to it will modify the constructed matrix.
            </summary>
            <param name="rows">The number of rows to construct.</param>
            <param name="columns">The number of columns to construct.</param>
            <param name="data">The data of the matrix in ROW MAJOR ORDER.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryZero(System.Int32,System.Int32)">
            <summary>Constructs a new zero-matrix of the given dimensions.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <returns>The newly constructed zero-matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryIdentity(System.Int32,System.Int32)">
            <summary>Constructs a new identity-matrix of the given dimensions.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <returns>The newly constructed identity-matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.FactoryUniform(System.Int32,System.Int32,`0)">
            <summary>Constructs a new matrix where every entry is the same uniform value.</summary>
            <param name="rows">The number of rows of the matrix.</param>
            <param name="columns">The number of columns of the matrix.</param>
            <param name="value">The value to assign every spot in the matrix.</param>
            <returns>The newly constructed matrix filled with the uniform value.</returns>
        </member>
        <member name="T:Towel.Mathematics.Matrix`1.MatrixElementFraction">
            <summary>
            Used to avoid issues when 1/2 + 1/2 = 0 + 0 = 0 instead of 1 for types, where division results in precision loss
            </summary>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.GetIsSymetric(Towel.Mathematics.Matrix{`0})">
            <summary>Determines if the matrix is symetric.</summary>
            <param name="a">The matrix to determine if symetric.</param>
            <returns>True if the matrix is symetric; false if not.</returns>
        </member>
        <member name="P:Towel.Mathematics.Matrix`1.IsSymetric">
            <summary>Determines if the matrix is symetric.</summary>
            <returns>True if the matrix is symetric; false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <param name="b">The resulting matrix after the negation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0})">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_UnaryNegation(Towel.Mathematics.Matrix{`0})">
            <summary>Negates all the values in a matrix.</summary>
            <param name="a">The matrix to have its values negated.</param>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate(Towel.Mathematics.Matrix{`0}@)">
            <summary>Negates all the values in a matrix.</summary>
            <param name="b">The resulting matrix after the negation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Negate">
            <summary>Negates all the values in this matrix.</summary>
            <returns>The resulting matrix after the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does standard addition of two matrices.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <param name="c">The resulting matrix after the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does standard addition of two matrices.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <returns>The resulting matrix after the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Addition(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix addition.</summary>
            <param name="a">The left matrix of the addition.</param>
            <param name="b">The right matrix of the addition.</param>
            <returns>The resulting matrix after the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does standard addition of two matrices.</summary>
            <param name="b">The right matrix of the addition.</param>
            <param name="c">The resulting matrix after the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Add(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix addition.</summary>
            <param name="b">The matrix to add to this matrix.</param>
            <returns>The resulting matrix after the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <param name="c">The resulting matrix after the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Subtraction(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="a">The left matrix of the subtraction.</param>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="b">The right matrix of the subtraction.</param>
            <param name="c">The resulting matrix after the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Subtract(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard matrix subtraction.</summary>
            <param name="b">The right matrix of the subtraction.</param>
            <returns>The resulting matrix after the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <param name="c">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="b">The right matrix of the multiplication.</param>
            <param name="c">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0})">
            <summary>Does a standard (triple for looped) multiplication between matrices.</summary>
            <param name="b">The right matrix of the multiplication.</param>
            <returns>The resulting matrix of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <param name="c">The resulting vector of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="a">The left matrix of the multiplication.</param>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="b">The right vector of the multiplication.</param>
            <param name="c">The resulting vector of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Vector{`0})">
            <summary>Does a matrix-vector multiplication.</summary>
            <param name="b">The right vector of the multiplication.</param>
            <returns>The resulting vector of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting matrix after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0,Towel.Mathematics.Matrix{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The matrix to have the values multiplied.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Multiply(`0,Towel.Mathematics.Matrix{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The matrix to have the values multiplied.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting matrix after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Multiply(`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(Towel.Mathematics.Matrix{`0},`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <param name="c">The resulting matrix after the division.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Division(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="a">The matrix to divide the values of.</param>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(`0,Towel.Mathematics.Matrix{`0}@)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <param name="c">The resulting matrix after the division.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Divide(`0)">
            <summary>Divides all the values in the matrix by a scalar.</summary>
            <param name="b">The scalar to divide all the matrix values by.</param>
            <returns>The resulting matrix after the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(Towel.Mathematics.Matrix{`0},System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <param name="c">The resulting matrix of the power operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(Towel.Mathematics.Matrix{`0},System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_ExclusiveOr(Towel.Mathematics.Matrix{`0},System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="a">The matrix to be powered by.</param>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="b">The power to apply to the matrix.</param>
            <param name="c">The resulting matrix of the power operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Power(System.Int32)">
            <summary>Applies a power to a square matrix.</summary>
            <param name="b">The power to apply to the matrix.</param>
            <returns>The resulting matrix of the power operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Determinant(Towel.Mathematics.Matrix{`0})">
            <summary>Computes the determinant of a square matrix.</summary>
            <param name="a">The matrix to compute the determinant of.</param>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DeterminantGaussian(Towel.Mathematics.Matrix{`0})">
            <summary>
            Computes the determinant of a square matrix via Gaussian elimination.<br/>
            Runtime: O((n^3 + 2n^âˆ’3) / 3)
            </summary>
            <param name="a">The matrix to compute the determinant of.</param>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DeterminantLaplace(Towel.Mathematics.Matrix{`0})">
            <summary>
            Computes the determinant of a square matrix via Laplace's method.<br/>
            Runtime: O(n(2^(n âˆ’ 1) âˆ’ 1))
            </summary>
            <param name="a">The matrix to compute the determinant of.</param>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Determinant">
            <summary>Computes the determinant of a square matrix.</summary>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DeterminantLaplace">
            <summary>Computes the determinant of a square matrix via Laplace's method.</summary>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DeterminantGaussian">
            <summary>Computes the determinant of a square matrix via Gaussian elimination.</summary>
            <returns>The computed determinant.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Trace(Towel.Mathematics.Matrix{`0})">
            <summary>Computes the trace of a square matrix.</summary>
            <param name="a">The matrix to compute the trace of.</param>
            <returns>The computed trace.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Trace">
            <summary>Computes the trace of a square matrix.</summary>
            <returns>The computed trace.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.XML_Minor">
            <summary>Gets the minor of a matrix.</summary>
            <param name="a">The matrix to get the minor of.</param>
            <param name="row">The restricted row to form the minor.</param>
            <param name="column">The restricted column to form the minor.</param>
            <param name="b">The minor of the matrix.</param>
            <returns>The minor of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(System.Int32,System.Int32)">
            <inheritdoc cref="M:Towel.Mathematics.Matrix`1.XML_Minor"/>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(Towel.Mathematics.Matrix{`0},System.Int32,System.Int32)">
            <inheritdoc cref="M:Towel.Mathematics.Matrix`1.XML_Minor"/>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(System.Int32,System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <inheritdoc cref="M:Towel.Mathematics.Matrix`1.XML_Minor"/>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Minor(Towel.Mathematics.Matrix{`0},System.Int32,System.Int32,Towel.Mathematics.Matrix{`0}@)">
            <inheritdoc cref="M:Towel.Mathematics.Matrix`1.XML_Minor"/>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Combines two matrices from left to right
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="a">The left matrix of the concatenation.</param>
            <param name="b">The right matrix of the concatenation.</param>
            <param name="c">The resulting matrix of the concatenation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Combines two matrices from left to right
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="a">The left matrix of the concatenation.</param>
            <param name="b">The right matrix of the concatenation.</param>
            <returns>The resulting matrix of the concatenation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Combines two matrices from left to right
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="b">The right matrix of the concatenation.</param>
            <param name="c">The resulting matrix of the concatenation.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ConcatenateRowWise(Towel.Mathematics.Matrix{`0})">
            <summary>Combines two matrices from left to right
            (result.Rows = left.Rows AND result.Columns = left.Columns + right.Columns).</summary>
            <param name="b">The right matrix of the concatenation.</param>
            <returns>The resulting matrix of the concatenation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="a">The matrix matrix to calculate the reduced echelon of (aka RREF).</param>
            <param name="b">The reduced echelon of the matrix (aka RREF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="a">The matrix matrix to calculate the reduced echelon of (aka RREF).</param>
            <returns>The reduced echelon of the matrix (aka RREF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon(Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the echelon of a matrix and reduces it (aka RREF).</summary>
            <param name="b">The reduced echelon of the matrix (aka RREF).</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.ReducedEchelon">
            <summary>Matrixs the reduced echelon form of this matrix (aka RREF).</summary>
            <returns>The computed reduced echelon form of this matrix (aka RREF).</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="a">The matrix to calculate the inverse of.</param>
            <param name="b">The inverse of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the inverse of a matrix.</summary>
            <param name="a">The matrix to calculate the inverse of.</param>
            <returns>The inverse of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Inverse">
            <summary>Matrixs the inverse of this matrix.</summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="a">The matrix to calculate the adjoint of.</param>
            <param name="b">The adjoint of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0})">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="a">The matrix to calculate the adjoint of.</param>
            <returns>The adjoint of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint(Towel.Mathematics.Matrix{`0}@)">
            <summary>Calculates the adjoint of a matrix.</summary>
            <param name="b">The adjoint of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Adjoint">
            <summary>Calculates the adjoint of a matrix.</summary>
            <returns>The adjoint of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@)">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="a">The matrix to transpose.</param>
            <param name="b">The transpose of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0})">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="a">The matrix to transpose.</param>
            <returns>The transpose of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose(Towel.Mathematics.Matrix{`0}@)">
            <summary>Returns the transpose of a matrix.</summary>
            <param name="b">The transpose of the matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Transpose">
            <summary>Returns the transpose of a matrix.</summary>
            <returns>The transpose of the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DecomposeLowerUpper(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0}@,Towel.Mathematics.Matrix{`0}@)">
            <summary>Decomposes a matrix into lower-upper reptresentation.</summary>
            <param name="matrix">The matrix to decompose.</param>
            <param name="lower">The computed lower triangular matrix.</param>
            <param name="upper">The computed upper triangular matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.DecomposeLowerUpper(Towel.Mathematics.Matrix{`0}@,Towel.Mathematics.Matrix{`0}@)">
            <summary>Decomposes a matrix into lower-upper reptresentation.</summary>
            <param name="lower">The computed lower triangular matrix.</param>
            <param name="upper">The computed upper triangular matrix.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Rotate4x4(Towel.Mathematics.Matrix{`0},Towel.Measurements.Angle{`0},Towel.Mathematics.Vector{`0})">
            <summary>Rotates a 4x4 matrix around an 3D axis by a specified angle.</summary>
            <param name="matrix">The 4x4 matrix to rotate.</param>
            <param name="angle">The angle of rotation around the axis.</param>
            <param name="axis">The 3D axis to rotate the matrix around.</param>
            <returns>The rotated matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Rotate4x4(Towel.Measurements.Angle{`0},Towel.Mathematics.Vector{`0})">
            <summary>Converts an angle around an axis into a 4x4 rotational matrix.</summary>
            <param name="angle">The angle of the axis rotation.</param>
            <param name="axis">The axis of the axis rotation.</param>
            <returns>The rotation expressed as a 4x4 matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Equality(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Inequality(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first matrix to check for non-equality.</param>
            <param name="b">The second matrix to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0})">
            <summary>Does a value equality check.</summary>
            <param name="b">The second matrix to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},Towel.Mathematics.Matrix{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first matrix to check for equality.</param>
            <param name="b">The second matrix to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equal(Towel.Mathematics.Matrix{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="b">The second matrix to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Format(Towel.Mathematics.Matrix{`0},System.Func{System.Int32,System.Int32,`0})">
            <summary>Fills a matrix with values using a delegate.</summary>
            <param name="matrix">The matrix to fill the values of.</param>
            <param name="function">The function to set the values at the relative indeces.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Format(Towel.Mathematics.Matrix{`0},System.Func{System.Int32,`0})">
            <summary>Fills a matrix with values using a delegate.</summary>
            <param name="matrix">The matrix to fill the values of.</param>
            <param name="func">The function to set the values at the relative indeces.</param>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Clone(Towel.Mathematics.Matrix{`0})">
            <summary>Creates a copy of a matrix.</summary>
            <param name="a">The matrix to copy.</param>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Clone">
            <summary>Copies this matrix.</summary>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Implicit(`0[0:,0:])~Towel.Mathematics.Matrix{`0}">
            <summary>Converts a T[,] into a matrix.</summary>
            <param name="array">The T[,] to convert to a matrix.</param>
            <returns>The resulting matrix after conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.op_Explicit(Towel.Mathematics.Matrix{`0})~`0[0:,0:]">
            <summary>Converts a matrix into a T[,].</summary>
            <param name="matrix">The matrix toconvert to a T[,].</param>
            <returns>The resulting T[,] after conversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.GetHashCode">
            <summary>Matrixs a hash code from the values of this matrix.</summary>
            <returns>A hash code for the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Matrix`1.Equals(System.Object)">
            <summary>Does an equality check by value.</summary>
            <param name="b">The object to compare to.</param>
            <returns>True if the references are equal, false if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Quaternion`1">
            <summary>Standard 4-component quaternion [x, y, z, w]. W is the rotation ammount.</summary>
            <typeparam name="T">The numeric type of this Quaternion.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Identity">
            <summary>Returns an identity quaternion (no rotation).</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.X">
            <summary>The X component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Y">
            <summary>The Y component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Z">
            <summary>The Z component of the quaternion. (axis, NOT rotation ammount)</summary>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.W">
            <summary>The W component of the quaternion. (rotation ammount, NOT axis)</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a quaternion.</summary>
            <param name="x">The x component of the quaternion.</param>
            <param name="y">The y component of the quaternion.</param>
            <param name="z">The z component of the quaternion.</param>
            <param name="w">The w component of the quaternion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Factory_Matrix3x3(Towel.Mathematics.Matrix{`0})">
            <summary>Converts a 3x3 rotational matrix into a quaternion.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The rotation expressed as a quaternion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Factory_Matrix4x4(Towel.Mathematics.Matrix{`0})">
            <summary>Converts a 4x4 rotational matrix into a quaternion.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>The rotation expressed as a quaternion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetHasZeroMagnitude(Towel.Mathematics.Quaternion{`0})">
            <summary>Checks quaternion for zero magnitude.</summary>
            <param name="a">The quaternion to check for zero magnitude.</param>
            <returns>True if the quaternion has zero magnitude. False if not.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.HasZeroMagnitude">
            <summary>Checks quaternion for zero magnitude.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetMagnitude(Towel.Mathematics.Quaternion{`0})">
            <summary>Computes the magnitude of this quaternion.</summary>
            <param name="a">The <see cref="T:Towel.Mathematics.Quaternion`1"/> to get the magnitude of.</param>
            <returns>The magnitude of this quaternion.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.Magnitude">
            <summary>Computes the magnitude of this quaternion.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetMagnitudeSquared(Towel.Mathematics.Quaternion{`0})">
            <summary>Computes the magnitude of this quaternion, but doesn't square root it for
            possible optimization purposes.</summary>
            <param name="a">The <see cref="T:Towel.Mathematics.Quaternion`1"/> to get the magnitude squared of.</param>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="P:Towel.Mathematics.Quaternion`1.MagnitudeSquared">
            <summary>Computes the magnitude of this quaternion, but doesn't square root it for
            possible optimization purposes.</summary>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first quaternion of the addition.</param>
            <param name="b">The second quaternion of the addiiton.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Addition(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="a">The first quaternion of the addition.</param>
            <param name="b">The second quaternion of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Adds two quaternions together.</summary>
            <param name="b">The second quaternion of the addititon.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Add(Towel.Mathematics.Quaternion{`0})">
            <summary>Adds two quaternions together.</summary>
            <param name="b">The quaternion to add to this one.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first quaternion of the subtraction.</param>
            <param name="b">The second quaternion of the subtraction.</param>
            <param name="c">The result of the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first vector of the subtraction.</param>
            <param name="b">The second vector of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Subtraction(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions.</summary>
            <param name="a">The first quaternion of the subtraction.</param>
            <param name="b">The second quaternion of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Subtracts two quaternions.</summary>
            <param name="b">The second quaternion of the subtraction.</param>
            <param name="c">The result of the subtraction.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Subtract(Towel.Mathematics.Quaternion{`0})">
            <summary>Subtracts two quaternions together.</summary>
            <param name="b">The second quaternion of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="a">The first quaternion of the multiplication.</param>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies two quaternions.</summary>
            <param name="b">The second quaternion of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies two quaternions.</summary>
            <param name="b">The second quaternion of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="a">The quaternion of the multiplication.</param>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="b">The vector of the multiplication.</param>
            <param name="c">The resulting quaternion after the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Vector{`0})">
            <summary>Multiplies a quaternion and a vector.</summary>
            <param name="b">The vector of the multiplication.</param>
            <returns>The resulting quaternion after the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies all the values in a quaternion by a scalar.</summary>
            <param name="a">The quaternion to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting quaternion after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The matrix to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0,Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The quaternion to have the values multiplied.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="a">The quaternion to have the values multiplied.</param>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Multiply(`0,Towel.Mathematics.Quaternion{`0})">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="a">The quaternion to have the values multiplied.</param>
            <returns>The resulting quaternion after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <param name="c">The resulting quaternion after the multiplications.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Multiply(`0)">
            <summary>Multiplies all the values in a matrix by a scalar.</summary>
            <param name="b">The scalar to multiply the values by.</param>
            <returns>The resulting matrix after the multiplications.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="a">The quaternion rotation to rotate the vector by.</param>
            <param name="b">The vector to rotate.</param>
            <param name="c">The result of the rotation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0})">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="a">The quaternion rotation to rotate the vector by.</param>
            <param name="b">The vector to rotate.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="b">The vector to rotate.</param>
            <param name="c">The result of the rotation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Rotate(Towel.Mathematics.Vector{`0})">
            <summary>Rotates a vector by a quaternion rotation [v' = qvq'].</summary>
            <param name="b">The vector to rotate.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Conjugates a quaternion.</summary>
            <param name="a">The quaternion to conjugate.</param>
            <param name="b">The result of the conjugation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0})">
            <summary>Conjugates a quaternion.</summary>
            <param name="a">The quaternion to conjugate.</param>
            <returns>The result of the conjugation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Conjugates a quaternion.</summary>
            <param name="b">The result of the conjugation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Conjugate">
            <summary>Conjugates a quaternion.</summary>
            <returns>The result of the conjugation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0})">
            <summary>Normalizes a quaternion.</summary>
            <param name="a">The quaternion to normalize.</param>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Normalizes a quaternion.</summary>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Normalize">
            <summary>Normalizes a quaternion.</summary>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0}@)">
            <summary>Inverts a quaternion.</summary>
            <param name="a">The quaternion to invert.</param>
            <param name="b">The result of the inversion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0})">
            <summary>Inverts a quaternion.</summary>
            <param name="a">The quaternion to invert.</param>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert(Towel.Mathematics.Quaternion{`0}@)">
            <summary>Inverts a quaternion.</summary>
            <param name="b">The result of the inversion.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Invert">
            <summary>Inverts a quaternion.</summary>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the linear interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the linear interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.LinearInterpolation(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Linear interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the spherical interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="a">The min of the interpolation.</param>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the spherical interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},`0,Towel.Mathematics.Quaternion{`0}@)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <param name="c">The result of the spherical interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.SphericalInterpolation(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Spherical interpolation for quaternions.</summary>
            <param name="b">The max of the interpolation.</param>
            <param name="blend">The blending point of the interpolation.</param>
            <returns>The result of the spherical interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.ToMatrix3x3(Towel.Mathematics.Quaternion{`0})">
            <summary>Converts a quaternion into a 3x3 matrix.</summary>
            <param name="quaternion">The quaternion of the conversion.</param>
            <returns>The resulting 3x3 matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Equality(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.op_Inequality(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first quaternion to check for non-equality.</param>
            <param name="b">The second quaternion to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0})">
            <summary>Does a value equality check.</summary>
            <param name="b">The second quaternion to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first quaternion to check for equality.</param>
            <param name="b">The second quaternion to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equal(Towel.Mathematics.Quaternion{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="b">The second quaternion to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Clone(Towel.Mathematics.Quaternion{`0})">
            <summary>Creates a copy of a quaternion.</summary>
            <param name="a">The quaternion to copy.</param>
            <returns>The copy of this quaternion.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Clone">
            <summary>Copies this matrix.</summary>
            <returns>The copy of this matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.GetHashCode">
            <summary>Computes a hash code from the values in this quaternion.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:Towel.Mathematics.Quaternion`1.Equals(System.Object)">
            <summary>Does a reference equality check.</summary>
            <param name="other">The other operand of the equality check.</param>
            <returns>True if equal or false.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics">
            <summary>Contains definitions necessary for the generic Symbolics class.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Expression">
            <summary>Abstract base class for mathematical expressions.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Substitute``1(System.String,``0)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <typeparam name="T">The type of value to substitute in for the variable.</typeparam>
            <param name="variable">The variable to be substititued.</param>
            <param name="value">The value to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Derive(System.String)">
            <summary>Derives this expression.</summary>
            <param name="variable">The variable to derive in relation to.</param>
            <returns>The result of the derivation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Integrate(System.String)">
            <summary>Integrates this expression.</summary>
            <param name="variable">The variable to integrate in relation to.</param>
            <returns>The result of the integration.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.Clone">
            <summary>Creates a copy of the expression.</summary>
            <returns>A copy of the expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_UnaryNegation(Towel.Mathematics.Symbolics.Expression)">
            <summary>Negates an expression.</summary>
            <param name="a">The expression to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Addition(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Adds two expressions.</summary>
            <param name="a">The first expression of the addition.</param>
            <param name="b">The second expression of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Subtraction(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Subtracts two expressions.</summary>
            <param name="a">The first expression of the subtraction.</param>
            <param name="b">The second expression of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Multiply(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Multiplies two expressions.</summary>
            <param name="a">The first expression of the multiplication.</param>
            <param name="b">The second expression of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Division(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Divides two expressions.</summary>
            <param name="a">The first expression of the division.</param>
            <param name="b">The second expression of the division.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Equality(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Wraps two expressions in an equality check.</summary>
            <param name="a">The left side of the equality.</param>
            <param name="b">The right side of the equality.</param>
            <returns>The expressions wrapped in an equality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_Inequality(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Wraps two expressions in an inequality check.</summary>
            <param name="a">The left side of the inequality.</param>
            <param name="b">The right side of the inequality.</param>
            <returns>The expressions wrapped in an inequality check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_LessThan(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Wraps two expressions in a less than check.</summary>
            <param name="a">The left side of the less than.</param>
            <param name="b">The right side of the less than.</param>
            <returns>The expressions wrapped in an less than check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_GreaterThan(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Wraps two expressions in a greater than check.</summary>
            <param name="a">The left side of the greater than.</param>
            <param name="b">The right side of the greater than.</param>
            <returns>The expressions wrapped in an greater than check.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Expression.op_ExclusiveOr(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Takes one expression to the power of another.</summary>
            <param name="a">The first expression of the power operation.</param>
            <param name="b">The second expression of the power operation.</param>
            <returns>The result of the power operation.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Variable">
            <summary>A variable in a symbolic mathematics expression.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Variable.Name">
            <summary>The name of the variable.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.#ctor(System.String)">
            <summary>Constructs a new variable.</summary>
            <param name="name">The name of the vairable.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Variable.GetHashCode">
            <summary>Standard hash function.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Constant">
            <summary>Represents a constant numerical value.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsKnownConstant">
            <summary>True if this is a known constant value.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsZero">
            <summary>True if this numeric value is zero (0).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsOne">
            <summary>True if this numeric value is one (1).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsTwo">
            <summary>True if this numeric value is two (2).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsThree">
            <summary>True if this numeric value is three (3).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsPi">
            <summary>True if this numeric value is Ï€ (pi).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.KnownConstantOfUnknownType">
            <summary>Abstract base class for known constants of unknown types.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.KnownConstantOfUnknownType.IsKnownConstant">
            <summary>True if this numeric value is a known value.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Pi">
            <summary>Represents the Ï€ (pi).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi.#ctor">
            <summary>Constructs a new instance of pi.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Pi.IsPi">
            <summary>True if this numeric value is Ï€ (pi).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Pi.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi.GetHashCode">
            <summary>The default hash code for this instance.</summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Zero">
            <summary>Represents zero (0).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero.#ctor">
            <summary>Constructs a new zero (0) value.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Zero.IsZero">
            <summary>True if this numeric value is zero (0).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Zero.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.One">
            <summary>Represents the value of one (1).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One.#ctor">
            <summary>Constructs a new one (1) constant.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.One.IsOne">
            <summary>True if this numeric value is one (1).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.One.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Two">
            <summary>Represents the value of two (2).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two.#ctor">
            <summary>Constructs a new value of two (2).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Two.IsTwo">
            <summary>True if this numeric value is two (2).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Two.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Three">
            <summary>Represents the value of three (3).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three.#ctor">
            <summary>Constructs a new value of three (3).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Three.IsThree">
            <summary>True if this numeric value is three (3).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Three.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Constant`1">
            <summary>Represents a numeric constant.</summary>
            <typeparam name="T">The generic type of the numeric value.</typeparam>
        </member>
        <member name="F:Towel.Mathematics.Symbolics.Constant`1.Value">
            <summary>The value of this numeric constant.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant`1.IsZero">
            <summary>True if this numeric value is zero (0).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant`1.IsOne">
            <summary>True if this numeric value is one (1).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant`1.IsTwo">
            <summary>True if this numeric value is two (2).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant`1.IsThree">
            <summary>True if this numeric value is three (3).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Constant`1.IsNegative">
            <summary>Determines if the constant is negative.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Constant`1.#ctor(`0)">
            <summary>Constructs a new numeric constant.</summary>
            <param name="constant">The value of the numeric constant.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Constant`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Constant`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Constant`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Constant`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.KnownConstantOfKnownType`1">
            <summary>Abstract base class for known constants of unknown types.</summary>
            <typeparam name="T">The type of the known constant value.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.KnownConstantOfKnownType`1.IsKnownConstant">
            <summary>True if this numeric value is a known value.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.KnownConstantOfKnownType`1.#ctor(`0)">
            <summary>Constructs a new constant of a known type.</summary>
            <param name="constant">The value of the known constant.</param>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Pi`1">
            <summary>Represents the value of Ï€ (pi).</summary>
            <typeparam name="T">The generic type of the numeric.</typeparam>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi`1.#ctor">
            <summary>Constructs a new value of Ï€ (pi).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Pi`1.IsPi">
            <summary>True if the value is Ï€ (pi).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Pi`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Zero`1">
            <summary>Represents the value of zero (0).</summary>
            <typeparam name="T">The generic type of the numeric value.</typeparam>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero`1.#ctor">
            <summary>Constructs a new zero (0) value.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Zero`1.IsZero">
            <summary>True if the value is zero (0).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Zero`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.One`1">
            <summary>Represents the value of one (1).</summary>
            <typeparam name="T">The generic type of the numeric value.</typeparam>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One`1.#ctor">
            <summary>Constructs a new one (1) value.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.One`1.IsOne">
            <summary>True if the value is one (1).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.One`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Two`1">
            <summary>Represents the value of two (2).</summary>
            <typeparam name="T">The generic type of the numeric value.</typeparam>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two`1.#ctor">
            <summary>Constructs a new value of two (2).</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Two`1.IsTwo">
            <summary>True if the value is two (2).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Two`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Three`1">
            <summary>Represents the value of three (3).</summary>
            <typeparam name="T">The generic type of the numeric value.</typeparam>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three`1.#ctor">
            <summary>Constructs a new value of three.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Three`1.IsThree">
            <summary>True if the value is three (3).</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three`1.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three`1.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three`1.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Three`1.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.True">
            <summary>Represents the value of true.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.True.#ctor">
            <summary>Constructs a new value of true.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.True.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.True.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.True.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.True.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.False">
            <summary>Represents the value of false.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.False.#ctor">
            <summary>Constructs a new false value.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.False.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.False.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.False.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.False.GetHashCode">
            <summary>The default hash code computation.</summary>
            <returns>The computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Operation">
            <summary>Abstract base class for all symbolic mathematics operations.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Operation.IMathematical">
            <summary>Interface for symbolic mathematics operations that involve numeric computation.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Operation.ILogical">
            <summary>Interface for symbolic mathematics operations that involve logical computation.</summary>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Unary">
            <summary>Abstract base class for all symbolic mathematics unary operations.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Unary.A">
            <summary>The operand of th unary operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Unary.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new unary operation.</summary>
            <param name="a">The operand of the unary operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Unary.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Simplification">
            <summary>Represents a mathematical simplification operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Simplification.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new simplification operation.</summary>
            <param name="a">The expression to simplify.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Simplification.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Simplification.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Simplification.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Simplification.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Negate">
            <summary>Represents a negation operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Negate.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new negation operation.</summary>
            <param name="a">The expression to negate.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Negate.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Negate.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Negate.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Negate.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.NaturalLog">
            <summary>Represents a natural log operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NaturalLog.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new natural log operation.</summary>
            <param name="a">The expression to compute the natrual log of.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NaturalLog.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NaturalLog.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NaturalLog.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NaturalLog.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.SquareRoot">
            <summary>Represents a square root operation </summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.SquareRoot.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new square root operation.</summary>
            <param name="a">The expression to compute the square root of.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.SquareRoot.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.SquareRoot.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.SquareRoot.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.SquareRoot.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Exponential">
            <summary>Represents an exponential operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Exponential.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new exponential operation.</summary>
            <param name="a">The expression to compute the exponetial function of.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Exponential.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Exponential.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Exponential.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Exponential.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Factorial">
            <summary>Represents a factorial operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Factorial.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new factorial operation.</summary>
            <param name="a">The operand of the factorial operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Factorial.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Factorial.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Factorial.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Factorial.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Invert">
            <summary>Represents a reciprical/invert operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Invert.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new reciprical/invert operation.</summary>
            <param name="a">Teh expression to recipricate/invert.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Invert.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Invert.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Invert.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Invert.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Trigonometry">
            <summary>Represents one of the trigonometry functions.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Trigonometry.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new trigonometry expression.</summary>
            <param name="a">The parameter to the trigonometry expression.</param>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Sine">
            <summary>Represents the sine trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Sine.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new sine expression.</summary>
            <param name="a">The parameter to the sine expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Sine.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Sine.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Sine.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Sine.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Cosine">
            <summary>Represents the cosine trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosine.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new cosine expression.</summary>
            <param name="a">The parameter to the cosine expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosine.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosine.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosine.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosine.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Tangent">
            <summary>Represents the tanget trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Tangent.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new tangent expression.</summary>
            <param name="a">The parameter to the tangent expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Tangent.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Tangent.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Tangent.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Tangent.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Cosecant">
            <summary>Represents the cosecant trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosecant.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new cosecant expression.</summary>
            <param name="a">The parameter to the cosecant expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosecant.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosecant.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosecant.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cosecant.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Secant">
            <summary>Represents the secant trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Secant.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new secant expression.</summary>
            <param name="a">The parameter to the secant expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Secant.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Secant.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Secant.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Secant.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Cotangent">
            <summary>Represents the cotangent trigonometric function.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cotangent.#ctor(Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new cotangent expression.</summary>
            <param name="a">The parameter to the cotangent expression.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cotangent.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cotangent.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cotangent.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Cotangent.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Binary">
            <summary>Abstract base class for all symbolic mathematics binary operations.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Binary.A">
            <summary>The first operand of the binary operation.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Binary.B">
            <summary>The second operand of the binary operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Binary.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new binary operation.</summary>
            <param name="a">The left operand of the binary operation.</param>
            <param name="b">The right operand of the binary operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Binary.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.AddOrSubtract">
            <summary>Represents an addition or a subtraction operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.AddOrSubtract.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new addition or subtraction operation.</summary>
            <param name="a">The left operand of the operation.</param>
            <param name="b">The right operand of the operation.</param>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Add">
            <summary>Represents an addition operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Add.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new addition operation.</summary>
            <param name="a">The left operand of the addition operation.</param>
            <param name="b">The right operand of the addition operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Add.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Add.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Add.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Add.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Subtract">
            <summary>Represents a subtraction operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Subtract.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new subtraction operation.</summary>
            <param name="a">The left operand of the subtraction operation.</param>
            <param name="b">The right operand of the subtraction operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Subtract.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Subtract.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Subtract.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Subtract.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.MultiplyOrDivide">
            <summary>Abstract base class for multiplication and division operations.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.MultiplyOrDivide.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new multiplication or division operation.</summary>
            <param name="a">The left operand of the operation.</param>
            <param name="b">The right operand of the operation.</param>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Multiply">
            <summary>Represents a multiplication operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multiply.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new multiplication operation.</summary>
            <param name="a">The left operand of the multiplication operation.</param>
            <param name="b">The right operand of the multiplication operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multiply.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multiply.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multiply.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multiply.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Divide">
            <summary>Represents a division operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Divide.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new division operation.</summary>
            <param name="a">The left operand of the division operation.</param>
            <param name="b">The right operand of the division operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Divide.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Divide.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Divide.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Divide.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Power">
            <summary>Represents a power operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Power.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new power operation.</summary>
            <param name="a">The left operand of the power operation.</param>
            <param name="b">The right operand of the power operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Power.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Power.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Power.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Power.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Root">
            <summary>Represents a root operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Root.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new root operation.</summary>
            <param name="a">The base of the root operation.</param>
            <param name="b">The root (inverted exponent) value of the operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Root.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Root.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Root.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Root.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Equal">
            <summary>Represents an equality operation between two expressions.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Equal.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new equality operation between two expressions.</summary>
            <param name="a">The left expression of the equality.</param>
            <param name="b">The right expression of the equality.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Equal.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Equal.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Equal.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Equal.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.NotEqual">
            <summary>Represents an equality operation between two expressions.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NotEqual.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new inequality operation between two expressions.</summary>
            <param name="a">The left expression of the inequality.</param>
            <param name="b">The right expression of the inequality.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NotEqual.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NotEqual.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NotEqual.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.NotEqual.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.LessThan">
            <summary>Represents a less than operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThan.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new less than operation.</summary>
            <param name="a">The left expression of the less than operation.</param>
            <param name="b">The right expression of the less than operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThan.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThan.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThan.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThan.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.GreaterThan">
            <summary>Represents a greater than operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThan.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new greater than operation.</summary>
            <param name="a">The left expression of the greater than operation.</param>
            <param name="b">The right expression of the greater than operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThan.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThan.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThan.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThan.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.LessThanOrEqual">
            <summary>Represents a less than or equal to operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThanOrEqual.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new less than or equal to operation.</summary>
            <param name="a">The left expression of the less than or equal to operation.</param>
            <param name="b">The right expression of the less than or equal to operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThanOrEqual.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThanOrEqual.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThanOrEqual.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.LessThanOrEqual.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.GreaterThanOrEqual">
            <summary>Represents a greater than or equal to operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThanOrEqual.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new greater than or equal to operation.</summary>
            <param name="a">The left expression of the greater than or equal to operation.</param>
            <param name="b">The right expression of the greater than or equal to operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThanOrEqual.Simplify">
            <summary>Simplifies the mathematical expression.</summary>
            <returns>The simplified mathematical expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThanOrEqual.Clone">
            <summary>Clones this expression.</summary>
            <returns>A clone of this expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThanOrEqual.Substitute(System.String,Towel.Mathematics.Symbolics.Expression)">
            <summary>Substitutes an expression for all occurences of a variable.</summary>
            <param name="variable">The variable to be substititued.</param>
            <param name="expression">The expression to substitute for each occurence of a variable.</param>
            <returns>The resulting expression of the substitution.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.GreaterThanOrEqual.ToString">
            <summary>Standard conversion to a string representation.</summary>
            <returns>The string represnetation of this expression.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Ternary">
            <summary>Abstract base class for ternary operations.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Ternary.A">
            <summary>The first operand of the ternary operation.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Ternary.B">
            <summary>The second operand of the ternary operation.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Ternary.C">
            <summary>The third operand of the ternary operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Ternary.#ctor(Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression,Towel.Mathematics.Symbolics.Expression)">
            <summary>Constructs a new ternary operation.</summary>
            <param name="a">The first operand of the ternary operation.</param>
            <param name="b">The second operand of the ternary operation.</param>
            <param name="c">The third operand of the ternary operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Ternary.Equals(System.Object)">
            <summary>Standard equality check.</summary>
            <param name="b">The object to check for equality with.</param>
            <returns>True if equal. False if not.</returns>
        </member>
        <member name="T:Towel.Mathematics.Symbolics.Multinary">
            <summary>Abstract base class for multinary operations.</summary>
        </member>
        <member name="P:Towel.Mathematics.Symbolics.Multinary.Operands">
            <summary>The operands of the multinary operation.</summary>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Multinary.#ctor(Towel.Mathematics.Symbolics.Expression[])">
            <summary>Constructs a new multinary operation.</summary>
            <param name="operands">The operands of the multinary operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Parse(System.Linq.Expressions.Expression)">
            <summary>Parses a mathematical expression from a linq expression.</summary>
            <param name="e">The linq expression to parse.</param>
            <returns>The parsed symbolic mathematics linq expression.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.ParseAndSimplifyToConstant``1(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>Parses a symbolic methematics expression with the assumption that it will simplify to a constant.</summary>
            <typeparam name="T">The generic numerical type to recieve as the outputted type.</typeparam>
            <param name="string">The string to be parse.</param>
            <param name="tryParse">A function for parsing numerical values into the provided generic type.</param>
            <returns>The parsed expression simplified down to a constant value.</returns>
        </member>
        <member name="M:Towel.Mathematics.Symbolics.Parse``1(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>Parses a string into a Towel.Mathematics.Symbolics expression tree.</summary>
            <typeparam name="T">The type to convert any constants into (ex: float, double, etc).</typeparam>
            <param name="string">The expression string to parse.</param>
            <param name="tryParse">A parsing function for the provided generic type. This is optional, but highly recommended.</param>
            <returns>The parsed Towel.Mathematics.Symbolics expression tree.</returns>
        </member>
        <member name="T:Towel.Mathematics.Vector`1">
            <summary>Represents a vector with an arbitrary number of components of a generic type.</summary>
            <typeparam name="T">The numeric type of this Vector.</typeparam>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.X">
            <summary>Index 0</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Y">
            <summary>Index 1</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Z">
            <summary>Index 2</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Dimensions">
            <summary>The number of components in this vector.</summary>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Item(System.Int32)">
            <summary>Allows indexed access to this vector.</summary>
            <param name="index">The index to access.</param>
            <returns>The value of the given index.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(System.Int32)">
            <summary>Creates a new vector with the given number of components.</summary>
            <param name="dimensions">The number of dimensions this vector will have.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(`0[])">
            <summary>Creates a vector out of the given values.</summary>
            <param name="vector">The values to initialize the vector to.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.#ctor(System.Int32,System.Func{System.Int32,`0})">
            <summary>Creates a new vector and initializes it via function.</summary>
            <param name="dimensions">The number of dimensions of the vector to construct.</param>
            <param name="function">The function to initialize the values of the vector.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.FactoryZero(System.Int32)">
            <summary>Creates a vector with the given number of components with the values initialized to zeroes.</summary>
            <param name="dimensions">The number of components in the vector.</param>
            <returns>The newly constructed vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.FactoryOne(System.Int32)">
            <summary>Creates a vector with the given number of components with the values initialized to ones.</summary>
            <param name="dimensions">The number of components in the vector.</param>
            <returns>The newly constructed vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetMagnitude(Towel.Mathematics.Vector{`0})">
            <summary>Computes the length of this vector.</summary>
            <param name="a">The <see cref="T:Towel.Mathematics.Vector`1"/> to get the magnitude of.</param>
            <returns>The length of this vector.</returns>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.Magnitude">
            <summary>Computes the length of this vector.</summary>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetMagnitudeSquared(Towel.Mathematics.Vector{`0})">
            <summary>Computes the length of this vector, but doesn't square root it for
            possible optimization purposes.</summary>
            <param name="a">The <see cref="T:Towel.Mathematics.Vector`1"/> to get the magnitude squared of.</param>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="P:Towel.Mathematics.Vector`1.MagnitudeSquared">
            <summary>Computes the length of this vector, but doesn't square root it for
            possible optimization purposes.</summary>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Negates all the values in a vector.</summary>
            <param name="a">The vector to have its values negated.</param>
            <param name="b">The result of the negations.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0})">
            <summary>Negates all the values in a vector.</summary>
            <param name="a">The vector to have its values negated.</param>
            <returns>The result of the negations.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_UnaryNegation(Towel.Mathematics.Vector{`0})">
            <summary>Negates a vector.</summary>
            <param name="vector">The vector to negate.</param>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate(Towel.Mathematics.Vector{`0}@)">
            <summary>Negates all the values in a vector.</summary>
            <param name="b">The result of the negations.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Negate">
            <summary>Negates this vector.</summary>
            <returns>The result of the negation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addiiton.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Addition(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="a">The first vector of the addition.</param>
            <param name="b">The second vector of the addition.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Adds two vectors together.</summary>
            <param name="b">The second vector of the addition.</param>
            <param name="c">The result of the addition.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Add(Towel.Mathematics.Vector{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="b">The vector to add to this one.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left vector of the subtraction.</param>
            <param name="b">The right vector of the subtraction.</param>
            <param name="c">The result of the vector subtracton.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left vector of the subtraction.</param>
            <param name="b">The right vector of the subtraction.</param>
            <returns>The result of the vector subtracton.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Subtraction(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Subtracts two vectors.</summary>
            <param name="a">The left operand of the subtraction.</param>
            <param name="b">The right operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Subtracts two vectors.</summary>
            <param name="b">The right vector of the subtraction.</param>
            <param name="c">The result of the vector subtracton.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Subtract(Towel.Mathematics.Vector{`0})">
            <summary>Subtracts another vector from this one.</summary>
            <param name="b">The vector to subtract from this one.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <param name="c">The result of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(Towel.Mathematics.Vector{`0},`0)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Multiply(Towel.Mathematics.Vector{`0},`0)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The vector to have all its values multiplied.</param>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Multiply(`0,Towel.Mathematics.Vector{`0})">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="a">The scalar to multiply all the vector values by.</param>
            <param name="b">The vector to have all its values multiplied.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Multiplies all the values in a vector by a scalar.</summary>
            <param name="b">The scalar to multiply all the vector values by.</param>
            <param name="c">The result of the multiplication.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Multiply(`0)">
            <summary>Multiplies the values in this vector by a scalar.</summary>
            <param name="b">The scalar to multiply these values by.</param>
            <returns>The result of the multiplications</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="a">The vector to have the components divided by.</param>
            <param name="b">The scalar to divide the vector components by.</param>
            <param name="c">The resulting vector after the divisions.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(Towel.Mathematics.Vector{`0},`0)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="a">The vector to have the components divided by.</param>
            <param name="b">The scalar to divide the vector components by.</param>
            <returns>The resulting vector after the divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Division(Towel.Mathematics.Vector{`0},`0)">
            <summary>Divides all the values in the vector by a scalar.</summary>
            <param name="a">The vector to have its values divided.</param>
            <param name="b">The scalar to divide all the vectors values by.</param>
            <returns>The vector after the divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Divides all the components of a vector by a scalar.</summary>
            <param name="b">The scalar to divide the vector components by.</param>
            <param name="c">The resulting vector after the divisions.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Divide(`0)">
            <summary>Divides all the values in this vector by a scalar.</summary>
            <param name="b">The scalar to divide the values of the vector by.</param>
            <returns>The resulting vector after the divisions.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.DotProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes the dot product between two vectors.</summary>
            <param name="a">The first vector of the dot product operation.</param>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.DotProduct(Towel.Mathematics.Vector{`0})">
            <summary>Computes the dot product between this vector and another.</summary>
            <param name="right">The second vector of the dot product operation.</param>
            <returns>The result of the dot product.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <returns>The result of the cross product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.CrossProduct(Towel.Mathematics.Vector{`0})">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Normalizes a vector.</summary>
            <param name="a">The vector to normalize.</param>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0})">
            <summary>Normalizes a vector.</summary>
            <param name="a">The vector to normalize.</param>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize(Towel.Mathematics.Vector{`0}@)">
            <summary>Normalizes a vector.</summary>
            <param name="b">The result of the normalization.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Normalize">
            <summary>Normalizes this vector.</summary>
            <returns>The result of the normalization.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle``1(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},``0)">
            <summary>Computes the angle between two vectors.</summary>
            <typeparam name="TArcCos">A type of function for how to compute the inverse of a cosine ratio.</typeparam>
            <param name="a">The first vector to determine the angle between.</param>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A function for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},System.Func{`0,Towel.Measurements.Angle{`0}})">
            <summary>Computes the angle between two vectors.</summary>
            <param name="a">The first vector to determine the angle between.</param>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A delegate for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle(Towel.Mathematics.Vector{`0},System.Func{`0,Towel.Measurements.Angle{`0}})">
            <summary>Computes the angle between two vectors.</summary>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A function for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Angle``1(Towel.Mathematics.Vector{`0},``0)">
            <summary>Computes the angle between two vectors.</summary>
            <typeparam name="TArcCos">A type of function for how to compute the inverse of a cosine ratio.</typeparam>
            <param name="b">The second vector to determine the angle between.</param>
            <param name="arccos">A function for how to compute the inverse of a cosine ratio.</param>
            <returns>The angle between the two vectors in radians.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="a">The first vector of the cross product operation.</param>
            <param name="b">The second vector of the cross product operation.</param>
            <returns>The result of the cross product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="b">The second vector of the cross product operation.</param>
            <param name="c">The result of the cross product operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Projection(Towel.Mathematics.Vector{`0})">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="b">The second vector of the dot product operation.</param>
            <returns>The result of the dot product operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Measurements.Angle{`0},`0,`0,`0)">
            <summary>Rotates a vector by the specified axis and rotation values.</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="angle">The angle of the rotation.</param>
            <param name="x">The x component of the axis vector to rotate about.</param>
            <param name="y">The y component of the axis vector to rotate about.</param>
            <param name="z">The z component of the axis vector to rotate about.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Measurements.Angle{`0},`0,`0,`0)">
            <summary>Rotates this vector by quaternon values.</summary>
            <param name="angle">The amount of rotation about the axis.</param>
            <param name="x">The x component deterniming the axis of rotation.</param>
            <param name="y">The y component determining the axis of rotation.</param>
            <param name="z">The z component determining the axis of rotation.</param>
            <returns>The resulting vector after the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0},Towel.Mathematics.Vector{`0}@)">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="a">The vector to rotate.</param>
            <param name="b">The quaternion to rotate the 3-component vector by.</param>
            <param name="c">The result of the rotation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Vector{`0},Towel.Mathematics.Quaternion{`0})">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="a">The vector to rotate.</param>
            <param name="b">The quaternion to rotate the 3-component vector by.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.RotateBy(Towel.Mathematics.Quaternion{`0})">
            <summary>Rotates a vector by a quaternion.</summary>
            <param name="b">The quaternion to rotate the 3-component vector by.</param>
            <returns>The result of the rotation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <param name="c">The result of the interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <param name="c">The result of the interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.LinearInterpolation(Towel.Mathematics.Vector{`0},`0)">
            <summary>Computes the linear interpolation between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 of the interpolation between the start and end.</param>
            <returns>The result of the interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Spherically interpolates between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
            <param name="c">The result of the slerp operation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Spherically interpolates between two vectors.</summary>
            <param name="a">The starting vector of the interpolation.</param>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
            <returns>The result of the slerp operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.SphericalInterpolation(Towel.Mathematics.Vector{`0},`0)">
            <summary>Sphereically interpolates between two vectors.</summary>
            <param name="b">The ending vector of the interpolation.</param>
            <param name="blend">The ratio 0.0 to 1.0 defining the interpolation distance between the two vectors.</param>
            <returns>The result of the slerp operation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0,Towel.Mathematics.Vector{`0}@)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="a">The first vector of the interpolation.</param>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
            <param name="d">The result of the interpolation.</param>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="a">The first vector of the interpolation.</param>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
            <returns>The resulting vector of the barycentric interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.BarycentricInterpolation(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0,`0)">
            <summary>Interpolates between three vectors using barycentric coordinates.</summary>
            <param name="b">The second vector of the interpolation.</param>
            <param name="c">The thrid vector of the interpolation.</param>
            <param name="u">The "U" value of the barycentric interpolation equation.</param>
            <param name="v">The "V" value of the barycentric interpolation equation.</param>
            <returns>The resulting vector of the barycentric interpolation.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a value equality check.</summary>
            <param name="a">The first vector to check for equality.</param>
            <param name="b">The second vector	to check for equality.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.NotEqual(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does a value non-equality check.</summary>
            <param name="a">The first vector to check for non-equality.</param>
            <param name="b">The second vector	to check for non-equality.</param>
            <returns>True if values are not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Equality(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does an equality check by value. (warning for float errors)</summary>
            <param name="a">The first vector of the equality check.</param>
            <param name="b">The second vector of the equality check.</param>
            <returns>true if the values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Inequality(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0})">
            <summary>Does an anti-equality check by value. (warning for float errors)</summary>
            <param name="a">The first vector of the anit-equality check.</param>
            <param name="b">The second vector of the anti-equality check.</param>
            <returns>true if the values are not equal, false if they are.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0})">
            <summary>Check for equality by value.</summary>
            <param name="b">The other vector of the equality check.</param>
            <returns>true if the values were equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.NotEqual(Towel.Mathematics.Vector{`0})">
            <summary>Check for non-equality by value.</summary>
            <param name="b">The other vector of the non-equality check.</param>
            <returns>true if the values were not equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},Towel.Mathematics.Vector{`0},`0)">
            <summary>Does a value equality check with leniency.</summary>
            <param name="a">The first vector to check for equality.</param>
            <param name="b">The second vector to check for equality.</param>
            <param name="leniency">How much the values can vary but still be considered equal.</param>
            <returns>True if values are equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equal(Towel.Mathematics.Vector{`0},`0)">
            <summary>Checks for equality by value with some leniency.</summary>
            <param name="right">The other vector of the equality check.</param>
            <param name="leniency">The ammount the values can differ but still be considered equal.</param>
            <returns>true if the values were cinsidered equal, false if not.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Clone(Towel.Mathematics.Vector{`0})">
            <summary>Creates a copy of a vector.</summary>
            <param name="a">The vector to copy.</param>
            <returns>The copy of this vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Clone">
            <summary>Copies this vector.</summary>
            <returns>The copy of this vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Implicit(Towel.Mathematics.Vector{`0})~`0[]">
            <summary>Implicit conversions from Vector to T[].</summary>
            <param name="vector">The Vector to be converted to a T[].</param>
            <returns>The T[] of the vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Implicit(`0[])~Towel.Mathematics.Vector{`0}">
            <summary>Implicit conversions from Vector to T[].</summary>
            <param name="array">The Vector to be converted to a T[].</param>
            <returns>The T[] of the vector.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Explicit(Towel.Mathematics.Vector{`0})~Towel.Mathematics.Matrix{`0}">
            <summary>Converts a vector into a matrix.</summary>
            <param name="vector">The vector to convert.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.op_Explicit(`0)~Towel.Mathematics.Vector{`0}">
            <summary>Implicitly converts a scalar into a one dimensional vector.</summary>
            <param name="scalar">The scalar value.</param>
            <returns>The one dimensional vector </returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.GetHashCode">
            <summary>Computes a hash code from the values of this matrix.</summary>
            <returns>A hash code for the matrix.</returns>
        </member>
        <member name="M:Towel.Mathematics.Vector`1.Equals(System.Object)">
            <summary>Does an equality check by reference.</summary>
            <param name="right">The object to compare to.</param>
            <returns>True if the references are equal, false if not.</returns>
        </member>
        <member name="T:Towel.Measurements.Measurement">
            <summary>Static class with methods regarding measurements.</summary>
        </member>
        <member name="T:Towel.Measurements.Measurement.IUnits`1">
            <summary>Interface for unit conversion.</summary>
            <typeparam name="TUnitsType">The unit type of the interface.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Measurement.IUnits`1.Convert``1(``0,`0,`0)">
            <summary>Converts the units of measurement of a value.</summary>
            <typeparam name="T">The generic type of the value to convert.</typeparam>
            <param name="value">The value to be converted.</param>
            <param name="from">The current units of the value.</param>
            <param name="to">The desired units of the value.</param>
            <returns>The value converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Measurement.Convert``2(``0,``1,``1)">
            <summary>Converts the units of measurement of a value.</summary>
            <typeparam name="T">The generic type of the value to convert.</typeparam>
            <typeparam name="TUnitsType">The type of units to be converted.</typeparam>
            <param name="value">The value to be converted.</param>
            <param name="from">The current units of the value.</param>
            <param name="to">The desired units of the value.</param>
            <returns>The value converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Measurement.TryParse``1(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>Parses a measurement from a string.</summary>
            <typeparam name="T">The numeric type to parse the quantity as.</typeparam>
            <param name="string">The string to parse.</param>
            <param name="tryParse">Explicit try parse function for the numeric type.</param>
            <returns>True if successful or false if not.</returns>
        </member>
        <member name="T:Towel.Measurements.Acceleration`1">
            <summary>Acceleration measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Acceleration measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="fromTimeUnits3">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <param name="toTimeUnits3">The desired units of the measurement.</param>
            <returns>The Acceleration measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationBaseUnits)">
            <summary>Converts a Acceleration measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Acceleration measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Acceleration measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationBaseUnits)">
            <summary>Constructs an Acceleration with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Acceleration.</param>
            <param name="units">The units of the Acceleration.</param>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Acceleration with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Acceleration.</param>
            <param name="LengthUnits1">The units of the Acceleration.</param>
            <param name="TimeUnits2">The units of the Acceleration.</param>
            <param name="TimeUnits3">The units of the Acceleration.</param>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.TimeUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Acceleration`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <param name="TimeUnits3">The #3 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AccelerationBaseUnits})~Towel.Measurements.Acceleration{`0}">
            <summary>Converts a ValueTuple to a Acceleration measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Acceleration measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Adds two Acceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Addition(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Adds two Acceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(Towel.Measurements.Acceleration{`0})">
            <summary>Adds two Acceleration measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Subtract(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two Acceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Subtraction(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two Acceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Subtract(Towel.Measurements.Acceleration{`0})">
            <summary>Subtracts two Acceleration measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Multiplies an Acceleration by a scalar numeric value.</summary>
            <param name="a">The Acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(`0,Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Acceleration by a scalar numeric value.</summary>
            <param name="a">The Acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Multiplies an Acceleration by a scalar numeric value.</summary>
            <param name="a">The Acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(`0,Towel.Measurements.Acceleration{`0})">
            <summary>Multiplies an Acceleration by a scalar numeric value.</summary>
            <param name="a">The Acceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Add(`0)">
            <summary>Multiplies an Acceleration by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Acceleration by AreaDensity resulting in Pressure.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Acceleration by AreaDensity resulting in Pressure.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Acceleration by AreaDensity resulting in Pressure.</summary>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Mulitplies Acceleration by LinearMass resulting in Energy.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The LinearMass to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Mulitplies Acceleration by LinearMass resulting in Energy.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The LinearMass to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.LinearMass{`0})">
            <summary>Mulitplies Acceleration by LinearMass resulting in Energy.</summary>
            <param name="b">The LinearMass to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Acceleration by LinearMassFlow resulting in Power.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Acceleration by LinearMassFlow resulting in Power.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Acceleration by LinearMassFlow resulting in Power.</summary>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Acceleration by Mass resulting in Force.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Acceleration by Mass resulting in Force.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Acceleration by Mass resulting in Force.</summary>
            <param name="b">The Mass to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Acceleration by Time resulting in Speed.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Acceleration by Time resulting in Speed.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies Acceleration by Time resulting in Speed.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Acceleration by TimeArea resulting in Length.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Multiply(Towel.Measurements.Acceleration{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Acceleration by TimeArea resulting in Length.</summary>
            <param name="a">The Acceleration to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Multiply(Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Acceleration by TimeArea resulting in Length.</summary>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Divides this Acceleration measurement by a numaric scalar value.</summary>
            <param name="a">The Acceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Division(Towel.Measurements.Acceleration{`0},`0)">
            <summary>Divides this Acceleration measurement by a numaric scalar value.</summary>
            <param name="a">The Acceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(`0)">
            <summary>Divides this Acceleration measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Division(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides an Acceleration measurement by another Acceleration measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_LessThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThan(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than another Acceleration measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_GreaterThan(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThan(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than another Acceleration measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_LessThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.LessThanOrEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is less than or equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_GreaterThanOrEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GreaterThanOrEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is greater than or equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equal(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Equality(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equal(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.NotEqual(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.op_Inequality(Towel.Measurements.Acceleration{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.NotEqual(Towel.Measurements.Acceleration{`0})">
            <summary>Determines if an Acceleration measurement is not equal to another Acceleration measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.ToString">
            <summary>Converts the Acceleration measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Acceleration`1.GetHashCode">
            <summary>Base hashing function for Acceleration measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.AngularAcceleration`1">
            <summary>AngularAcceleration measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Convert(`0,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a AngularAcceleration measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromAngleUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="fromTimeUnits3">The current units of the measurement.</param>
            <param name="toAngleUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <param name="toTimeUnits3">The desired units of the measurement.</param>
            <returns>The AngularAcceleration measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularAccelerationBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularAccelerationBaseUnits)">
            <summary>Converts a AngularAcceleration measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The AngularAcceleration measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a AngularAcceleration measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularAccelerationBaseUnits)">
            <summary>Constructs an AngularAcceleration with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AngularAcceleration.</param>
            <param name="units">The units of the AngularAcceleration.</param>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.#ctor(`0,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an AngularAcceleration with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AngularAcceleration.</param>
            <param name="AngleUnits1">The units of the AngularAcceleration.</param>
            <param name="TimeUnits2">The units of the AngularAcceleration.</param>
            <param name="TimeUnits3">The units of the AngularAcceleration.</param>
        </member>
        <member name="P:Towel.Measurements.AngularAcceleration`1.AngleUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AngularAcceleration`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AngularAcceleration`1.TimeUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AngularAcceleration`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularAccelerationBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.AngularAcceleration`1.Item(Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="AngleUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <param name="TimeUnits3">The #3 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularAccelerationBaseUnits})~Towel.Measurements.AngularAcceleration{`0}">
            <summary>Converts a ValueTuple to a AngularAcceleration measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a AngularAcceleration measurement.</param>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Add(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Adds two AngularAcceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Addition(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Adds two AngularAcceleration measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Add(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Adds two AngularAcceleration measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Subtract(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Subtracts two AngularAcceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Subtraction(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Subtracts two AngularAcceleration measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Subtract(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Subtracts two AngularAcceleration measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(Towel.Measurements.AngularAcceleration{`0},`0)">
            <summary>Multiplies an AngularAcceleration by a scalar numeric value.</summary>
            <param name="a">The AngularAcceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(`0,Towel.Measurements.AngularAcceleration{`0})">
            <summary>Multiplies an AngularAcceleration by a scalar numeric value.</summary>
            <param name="a">The AngularAcceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Multiply(Towel.Measurements.AngularAcceleration{`0},`0)">
            <summary>Multiplies an AngularAcceleration by a scalar numeric value.</summary>
            <param name="a">The AngularAcceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Multiply(`0,Towel.Measurements.AngularAcceleration{`0})">
            <summary>Multiplies an AngularAcceleration by a scalar numeric value.</summary>
            <param name="a">The AngularAcceleration measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Add(`0)">
            <summary>Multiplies an AngularAcceleration by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularAcceleration by Time resulting in AngularSpeed.</summary>
            <param name="a">The AngularAcceleration to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Multiply(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularAcceleration by Time resulting in AngularSpeed.</summary>
            <param name="a">The AngularAcceleration to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularAcceleration by Time resulting in AngularSpeed.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies AngularAcceleration by TimeArea resulting in Angle.</summary>
            <param name="a">The AngularAcceleration to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Multiply(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies AngularAcceleration by TimeArea resulting in Angle.</summary>
            <param name="a">The AngularAcceleration to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Multiply(Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies AngularAcceleration by TimeArea resulting in Angle.</summary>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Divide(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides an AngularAcceleration measurement by another AngularAcceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Divide(Towel.Measurements.AngularAcceleration{`0},`0)">
            <summary>Divides this AngularAcceleration measurement by a numaric scalar value.</summary>
            <param name="a">The AngularAcceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Division(Towel.Measurements.AngularAcceleration{`0},`0)">
            <summary>Divides this AngularAcceleration measurement by a numaric scalar value.</summary>
            <param name="a">The AngularAcceleration measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Divide(`0)">
            <summary>Divides this AngularAcceleration measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Division(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides an AngularAcceleration measurement by another AngularAcceleration measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Divide(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides an AngularAcceleration measurement by another AngularAcceleration measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.LessThan(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_LessThan(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.LessThan(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.GreaterThan(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_GreaterThan(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.GreaterThan(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.LessThanOrEqual(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than or equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_LessThanOrEqual(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than or equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.LessThanOrEqual(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is less than or equal to another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.GreaterThanOrEqual(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than or equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_GreaterThanOrEqual(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than or equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.GreaterThanOrEqual(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is greater than or equal to another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Equal(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Equality(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Equal(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is equal to another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.NotEqual(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is not equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.op_Inequality(Towel.Measurements.AngularAcceleration{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is not equal to another AngularAcceleration measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.NotEqual(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Determines if an AngularAcceleration measurement is not equal to another AngularAcceleration measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.ToString">
            <summary>Converts the AngularAcceleration measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularAcceleration`1.GetHashCode">
            <summary>Base hashing function for AngularAcceleration measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Angle`1">
            <summary>Angle measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Convert(`0,Towel.Measurements.Angle.Units,Towel.Measurements.Angle.Units)">
            <summary>Converts a Angle measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromAngleUnits1">The current units of the measurement.</param>
            <param name="toAngleUnits1">The desired units of the measurement.</param>
            <returns>The Angle measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngleUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngleUnits)">
            <summary>Converts a Angle measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Angle measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Angle measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngleUnits)">
            <summary>Constructs an Angle with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Angle.</param>
            <param name="units">The units of the Angle.</param>
        </member>
        <member name="M:Towel.Measurements.Angle`1.#ctor(`0,Towel.Measurements.Angle.Units)">
            <summary>Constructs an Angle with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Angle.</param>
            <param name="AngleUnits1">The units of the Angle.</param>
        </member>
        <member name="P:Towel.Measurements.Angle`1.AngleUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Angle`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AngleUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Angle`1.Item(Towel.Measurements.Angle.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="AngleUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngleUnits})~Towel.Measurements.Angle{`0}">
            <summary>Converts a ValueTuple to a Angle measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Angle measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Add(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Adds two Angle measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Addition(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Adds two Angle measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Add(Towel.Measurements.Angle{`0})">
            <summary>Adds two Angle measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Subtract(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Subtracts two Angle measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Subtraction(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Subtracts two Angle measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Subtract(Towel.Measurements.Angle{`0})">
            <summary>Subtracts two Angle measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Multiply(Towel.Measurements.Angle{`0},`0)">
            <summary>Multiplies an Angle by a scalar numeric value.</summary>
            <param name="a">The Angle measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Multiply(`0,Towel.Measurements.Angle{`0})">
            <summary>Multiplies an Angle by a scalar numeric value.</summary>
            <param name="a">The Angle measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Multiply(Towel.Measurements.Angle{`0},`0)">
            <summary>Multiplies an Angle by a scalar numeric value.</summary>
            <param name="a">The Angle measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Multiply(`0,Towel.Measurements.Angle{`0})">
            <summary>Multiplies an Angle by a scalar numeric value.</summary>
            <param name="a">The Angle measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Add(`0)">
            <summary>Multiplies an Angle by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Divides an Angle measurement by another Angle measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},`0)">
            <summary>Divides this Angle measurement by a numaric scalar value.</summary>
            <param name="a">The Angle measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},`0)">
            <summary>Divides this Angle measurement by a numaric scalar value.</summary>
            <param name="a">The Angle measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(`0)">
            <summary>Divides this Angle measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Divides an Angle measurement by another Angle measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0})">
            <summary>Divides an Angle measurement by another Angle measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides Angle by AngularAcceleration resulting in TimeArea.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides Angle by AngularAcceleration resulting in TimeArea.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides Angle by AngularAcceleration resulting in TimeArea.</summary>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides Angle by AngularSpeed resulting in Time.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The AngularSpeed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides Angle by AngularSpeed resulting in Time.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The AngularSpeed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides Angle by AngularSpeed resulting in Time.</summary>
            <param name="b">The AngularSpeed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Angle by Time resulting in AngularSpeed.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularSpeed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Angle by Time resulting in AngularSpeed.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularSpeed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Angle by Time resulting in AngularSpeed.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularSpeed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.Angle{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides Angle by TimeArea resulting in AngularAcceleration.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Division(Towel.Measurements.Angle{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides Angle by TimeArea resulting in AngularAcceleration.</summary>
            <param name="a">The Angle to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Divide(Towel.Measurements.TimeArea{`0})">
            <summary>Divides Angle by TimeArea resulting in AngularAcceleration.</summary>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.LessThan(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than another Angle measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_LessThan(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than another Angle measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.LessThan(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than another Angle measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.GreaterThan(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than another Angle measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_GreaterThan(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than another Angle measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.GreaterThan(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than another Angle measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.LessThanOrEqual(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than or equal to another Angle measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_LessThanOrEqual(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than or equal to another Angle measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.LessThanOrEqual(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is less than or equal to another Angle measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.GreaterThanOrEqual(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than or equal to another Angle measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_GreaterThanOrEqual(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than or equal to another Angle measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.GreaterThanOrEqual(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is greater than or equal to another Angle measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Equal(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is equal to another Angle measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Equality(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is equal to another Angle measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Equal(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is equal to another Angle measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.NotEqual(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is not equal to another Angle measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.op_Inequality(Towel.Measurements.Angle{`0},Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is not equal to another Angle measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.NotEqual(Towel.Measurements.Angle{`0})">
            <summary>Determines if an Angle measurement is not equal to another Angle measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.ToString">
            <summary>Converts the Angle measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Angle`1.GetHashCode">
            <summary>Base hashing function for Angle measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.AngularSpeed`1">
            <summary>AngularSpeed measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Convert(`0,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a AngularSpeed measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromAngleUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="toAngleUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <returns>The AngularSpeed measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularSpeedBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularSpeedBaseUnits)">
            <summary>Converts a AngularSpeed measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The AngularSpeed measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a AngularSpeed measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularSpeedBaseUnits)">
            <summary>Constructs an AngularSpeed with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AngularSpeed.</param>
            <param name="units">The units of the AngularSpeed.</param>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.#ctor(`0,Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an AngularSpeed with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AngularSpeed.</param>
            <param name="AngleUnits1">The units of the AngularSpeed.</param>
            <param name="TimeUnits2">The units of the AngularSpeed.</param>
        </member>
        <member name="P:Towel.Measurements.AngularSpeed`1.AngleUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AngularSpeed`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AngularSpeed`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularSpeedBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.AngularSpeed`1.Item(Towel.Measurements.Angle.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="AngleUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AngularSpeedBaseUnits})~Towel.Measurements.AngularSpeed{`0}">
            <summary>Converts a ValueTuple to a AngularSpeed measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a AngularSpeed measurement.</param>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Add(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Adds two AngularSpeed measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Addition(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Adds two AngularSpeed measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Add(Towel.Measurements.AngularSpeed{`0})">
            <summary>Adds two AngularSpeed measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Subtract(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Subtracts two AngularSpeed measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Subtraction(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Subtracts two AngularSpeed measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Subtract(Towel.Measurements.AngularSpeed{`0})">
            <summary>Subtracts two AngularSpeed measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Multiply(Towel.Measurements.AngularSpeed{`0},`0)">
            <summary>Multiplies an AngularSpeed by a scalar numeric value.</summary>
            <param name="a">The AngularSpeed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Multiply(`0,Towel.Measurements.AngularSpeed{`0})">
            <summary>Multiplies an AngularSpeed by a scalar numeric value.</summary>
            <param name="a">The AngularSpeed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Multiply(Towel.Measurements.AngularSpeed{`0},`0)">
            <summary>Multiplies an AngularSpeed by a scalar numeric value.</summary>
            <param name="a">The AngularSpeed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Multiply(`0,Towel.Measurements.AngularSpeed{`0})">
            <summary>Multiplies an AngularSpeed by a scalar numeric value.</summary>
            <param name="a">The AngularSpeed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Add(`0)">
            <summary>Multiplies an AngularSpeed by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Multiply(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularSpeed by Time resulting in Angle.</summary>
            <param name="a">The AngularSpeed to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Multiply(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularSpeed by Time resulting in Angle.</summary>
            <param name="a">The AngularSpeed to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies AngularSpeed by Time resulting in Angle.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides an AngularSpeed measurement by another AngularSpeed measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularSpeed{`0},`0)">
            <summary>Divides this AngularSpeed measurement by a numaric scalar value.</summary>
            <param name="a">The AngularSpeed measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Division(Towel.Measurements.AngularSpeed{`0},`0)">
            <summary>Divides this AngularSpeed measurement by a numaric scalar value.</summary>
            <param name="a">The AngularSpeed measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(`0)">
            <summary>Divides this AngularSpeed measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Division(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides an AngularSpeed measurement by another AngularSpeed measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularSpeed{`0})">
            <summary>Divides an AngularSpeed measurement by another AngularSpeed measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides AngularSpeed by AngularAcceleration resulting in Time.</summary>
            <param name="a">The AngularSpeed to be divided.</param>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Division(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides AngularSpeed by AngularAcceleration resulting in Time.</summary>
            <param name="a">The AngularSpeed to be divided.</param>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Divides AngularSpeed by AngularAcceleration resulting in Time.</summary>
            <param name="b">The AngularAcceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.Time{`0})">
            <summary>Divides AngularSpeed by Time resulting in AngularAcceleration.</summary>
            <param name="a">The AngularSpeed to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Division(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.Time{`0})">
            <summary>Divides AngularSpeed by Time resulting in AngularAcceleration.</summary>
            <param name="a">The AngularSpeed to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides AngularSpeed by Time resulting in AngularAcceleration.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The AngularAcceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.LessThan(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_LessThan(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.LessThan(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.GreaterThan(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_GreaterThan(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.GreaterThan(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.LessThanOrEqual(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than or equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_LessThanOrEqual(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than or equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.LessThanOrEqual(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is less than or equal to another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.GreaterThanOrEqual(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than or equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_GreaterThanOrEqual(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than or equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.GreaterThanOrEqual(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is greater than or equal to another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Equal(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Equality(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Equal(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is equal to another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.NotEqual(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is not equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.op_Inequality(Towel.Measurements.AngularSpeed{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is not equal to another AngularSpeed measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.NotEqual(Towel.Measurements.AngularSpeed{`0})">
            <summary>Determines if an AngularSpeed measurement is not equal to another AngularSpeed measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.ToString">
            <summary>Converts the AngularSpeed measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.AngularSpeed`1.GetHashCode">
            <summary>Base hashing function for AngularSpeed measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Area`1">
            <summary>Area measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Area`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a Area measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <returns>The Area measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaBaseUnits)">
            <summary>Converts a Area measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Area measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Area measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaBaseUnits)">
            <summary>Constructs an Area with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Area.</param>
            <param name="units">The units of the Area.</param>
        </member>
        <member name="M:Towel.Measurements.Area`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an Area with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Area.</param>
            <param name="LengthUnits1">The units of the Area.</param>
            <param name="LengthUnits2">The units of the Area.</param>
        </member>
        <member name="P:Towel.Measurements.Area`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Area`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Area`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Area`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaBaseUnits})~Towel.Measurements.Area{`0}">
            <summary>Converts a ValueTuple to a Area measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Area measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Area`1.Add(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Adds two Area measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Addition(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Adds two Area measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Add(Towel.Measurements.Area{`0})">
            <summary>Adds two Area measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Subtract(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Subtracts two Area measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Subtraction(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Subtracts two Area measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Subtract(Towel.Measurements.Area{`0})">
            <summary>Subtracts two Area measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},`0)">
            <summary>Multiplies an Area by a scalar numeric value.</summary>
            <param name="a">The Area measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(`0,Towel.Measurements.Area{`0})">
            <summary>Multiplies an Area by a scalar numeric value.</summary>
            <param name="a">The Area measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},`0)">
            <summary>Multiplies an Area by a scalar numeric value.</summary>
            <param name="a">The Area measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(`0,Towel.Measurements.Area{`0})">
            <summary>Multiplies an Area by a scalar numeric value.</summary>
            <param name="a">The Area measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Add(`0)">
            <summary>Multiplies an Area by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Area by AreaDensity resulting in Mass.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Area by AreaDensity resulting in Mass.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Area by AreaDensity resulting in Mass.</summary>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Area by Density resulting in LinearDensity.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Area by Density resulting in LinearDensity.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Density{`0})">
            <summary>Mulitplies Area by Density resulting in LinearDensity.</summary>
            <param name="b">The Density to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Area by Length resulting in Volume.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Area by Length resulting in Volume.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies Area by Length resulting in Volume.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Area by LinearDensity resulting in LinearMass.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Area by LinearDensity resulting in LinearMass.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Area by LinearDensity resulting in LinearMass.</summary>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Area by Pressure resulting in Force.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Area by Pressure resulting in Force.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Area by Pressure resulting in Force.</summary>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Area by Speed resulting in VolumeRate.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Multiply(Towel.Measurements.Area{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Area by Speed resulting in VolumeRate.</summary>
            <param name="a">The Area to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Area by Speed resulting in VolumeRate.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Divides an Area measurement by another Area measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(Towel.Measurements.Area{`0},`0)">
            <summary>Divides this Area measurement by a numaric scalar value.</summary>
            <param name="a">The Area measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Division(Towel.Measurements.Area{`0},`0)">
            <summary>Divides this Area measurement by a numaric scalar value.</summary>
            <param name="a">The Area measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(`0)">
            <summary>Divides this Area measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Division(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Divides an Area measurement by another Area measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides an Area measurement by another Area measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(Towel.Measurements.Area{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Area by Length resulting in Length.</summary>
            <param name="a">The Area to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Division(Towel.Measurements.Area{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Area by Length resulting in Length.</summary>
            <param name="a">The Area to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides Area by Length resulting in Length.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.LessThan(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than another Area measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_LessThan(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than another Area measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.LessThan(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than another Area measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.GreaterThan(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than another Area measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_GreaterThan(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than another Area measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.GreaterThan(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than another Area measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.LessThanOrEqual(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than or equal to another Area measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_LessThanOrEqual(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than or equal to another Area measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.LessThanOrEqual(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is less than or equal to another Area measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.GreaterThanOrEqual(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than or equal to another Area measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_GreaterThanOrEqual(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than or equal to another Area measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.GreaterThanOrEqual(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is greater than or equal to another Area measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Equal(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is equal to another Area measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Equality(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is equal to another Area measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Equal(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is equal to another Area measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.NotEqual(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is not equal to another Area measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.op_Inequality(Towel.Measurements.Area{`0},Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is not equal to another Area measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.NotEqual(Towel.Measurements.Area{`0})">
            <summary>Determines if an Area measurement is not equal to another Area measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.ToString">
            <summary>Converts the Area measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Area`1.GetHashCode">
            <summary>Base hashing function for Area measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.AreaDensity`1">
            <summary>AreaDensity measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a AreaDensity measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <returns>The AreaDensity measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaDensityBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaDensityBaseUnits)">
            <summary>Converts a AreaDensity measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The AreaDensity measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a AreaDensity measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaDensityBaseUnits)">
            <summary>Constructs an AreaDensity with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AreaDensity.</param>
            <param name="units">The units of the AreaDensity.</param>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an AreaDensity with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the AreaDensity.</param>
            <param name="MassUnits1">The units of the AreaDensity.</param>
            <param name="LengthUnits2">The units of the AreaDensity.</param>
            <param name="LengthUnits3">The units of the AreaDensity.</param>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaDensityBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.AreaDensity`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.AreaDensityBaseUnits})~Towel.Measurements.AreaDensity{`0}">
            <summary>Converts a ValueTuple to a AreaDensity measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a AreaDensity measurement.</param>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Add(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Adds two AreaDensity measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Addition(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Adds two AreaDensity measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Add(Towel.Measurements.AreaDensity{`0})">
            <summary>Adds two AreaDensity measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Subtract(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Subtracts two AreaDensity measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Subtraction(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Subtracts two AreaDensity measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Subtract(Towel.Measurements.AreaDensity{`0})">
            <summary>Subtracts two AreaDensity measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},`0)">
            <summary>Multiplies an AreaDensity by a scalar numeric value.</summary>
            <param name="a">The AreaDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(`0,Towel.Measurements.AreaDensity{`0})">
            <summary>Multiplies an AreaDensity by a scalar numeric value.</summary>
            <param name="a">The AreaDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},`0)">
            <summary>Multiplies an AreaDensity by a scalar numeric value.</summary>
            <param name="a">The AreaDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(`0,Towel.Measurements.AreaDensity{`0})">
            <summary>Multiplies an AreaDensity by a scalar numeric value.</summary>
            <param name="a">The AreaDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Add(`0)">
            <summary>Multiplies an AreaDensity by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies AreaDensity by Acceleration resulting in Pressure.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies AreaDensity by Acceleration resulting in Pressure.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies AreaDensity by Acceleration resulting in Pressure.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Pressure result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies AreaDensity by Area resulting in Mass.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies AreaDensity by Area resulting in Mass.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies AreaDensity by Area resulting in Mass.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies AreaDensity by Length resulting in LinearDensity.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies AreaDensity by Length resulting in LinearDensity.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies AreaDensity by Length resulting in LinearDensity.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies AreaDensity by Volume resulting in LinearMass.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies AreaDensity by Volume resulting in LinearMass.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.Volume{`0})">
            <summary>Mulitplies AreaDensity by Volume resulting in LinearMass.</summary>
            <param name="b">The Volume to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies AreaDensity by VolumeRate resulting in LinearMassFlow.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Multiply(Towel.Measurements.AreaDensity{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies AreaDensity by VolumeRate resulting in LinearMassFlow.</summary>
            <param name="a">The AreaDensity to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Multiply(Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies AreaDensity by VolumeRate resulting in LinearMassFlow.</summary>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides an AreaDensity measurement by another AreaDensity measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.AreaDensity{`0},`0)">
            <summary>Divides this AreaDensity measurement by a numaric scalar value.</summary>
            <param name="a">The AreaDensity measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Division(Towel.Measurements.AreaDensity{`0},`0)">
            <summary>Divides this AreaDensity measurement by a numaric scalar value.</summary>
            <param name="a">The AreaDensity measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(`0)">
            <summary>Divides this AreaDensity measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Division(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides an AreaDensity measurement by another AreaDensity measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides an AreaDensity measurement by another AreaDensity measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Density{`0})">
            <summary>Divides AreaDensity by Density resulting in Length.</summary>
            <param name="a">The AreaDensity to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Division(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Density{`0})">
            <summary>Divides AreaDensity by Density resulting in Length.</summary>
            <param name="a">The AreaDensity to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.Density{`0})">
            <summary>Divides AreaDensity by Density resulting in Length.</summary>
            <param name="b">The Density to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Divides AreaDensity by Length resulting in Density.</summary>
            <param name="a">The AreaDensity to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Division(Towel.Measurements.AreaDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Divides AreaDensity by Length resulting in Density.</summary>
            <param name="a">The AreaDensity to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides AreaDensity by Length resulting in Density.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.LessThan(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than another AreaDensity measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_LessThan(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than another AreaDensity measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.LessThan(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than another AreaDensity measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.GreaterThan(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than another AreaDensity measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_GreaterThan(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than another AreaDensity measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.GreaterThan(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than another AreaDensity measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.LessThanOrEqual(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than or equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_LessThanOrEqual(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than or equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.LessThanOrEqual(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is less than or equal to another AreaDensity measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.GreaterThanOrEqual(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than or equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_GreaterThanOrEqual(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than or equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.GreaterThanOrEqual(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is greater than or equal to another AreaDensity measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Equal(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Equality(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Equal(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is equal to another AreaDensity measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.NotEqual(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is not equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.op_Inequality(Towel.Measurements.AreaDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is not equal to another AreaDensity measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.NotEqual(Towel.Measurements.AreaDensity{`0})">
            <summary>Determines if an AreaDensity measurement is not equal to another AreaDensity measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.ToString">
            <summary>Converts the AreaDensity measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.AreaDensity`1.GetHashCode">
            <summary>Base hashing function for AreaDensity measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Density`1">
            <summary>Density measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Density`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a Density measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="fromLengthUnits4">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <param name="toLengthUnits4">The desired units of the measurement.</param>
            <returns>The Density measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.DensityBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.DensityBaseUnits)">
            <summary>Converts a Density measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Density measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Density measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.DensityBaseUnits)">
            <summary>Constructs an Density with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Density.</param>
            <param name="units">The units of the Density.</param>
        </member>
        <member name="M:Towel.Measurements.Density`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an Density with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Density.</param>
            <param name="MassUnits1">The units of the Density.</param>
            <param name="LengthUnits2">The units of the Density.</param>
            <param name="LengthUnits3">The units of the Density.</param>
            <param name="LengthUnits4">The units of the Density.</param>
        </member>
        <member name="P:Towel.Measurements.Density`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Density`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Density`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Density`1.LengthUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Density`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.DensityBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Density`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <param name="LengthUnits4">The #4 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.DensityBaseUnits})~Towel.Measurements.Density{`0}">
            <summary>Converts a ValueTuple to a Density measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Density measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Density`1.Add(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Adds two Density measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Addition(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Adds two Density measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Add(Towel.Measurements.Density{`0})">
            <summary>Adds two Density measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Subtract(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Subtracts two Density measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Subtraction(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Subtracts two Density measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Subtract(Towel.Measurements.Density{`0})">
            <summary>Subtracts two Density measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Density{`0},`0)">
            <summary>Multiplies an Density by a scalar numeric value.</summary>
            <param name="a">The Density measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(`0,Towel.Measurements.Density{`0})">
            <summary>Multiplies an Density by a scalar numeric value.</summary>
            <param name="a">The Density measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(Towel.Measurements.Density{`0},`0)">
            <summary>Multiplies an Density by a scalar numeric value.</summary>
            <param name="a">The Density measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(`0,Towel.Measurements.Density{`0})">
            <summary>Multiplies an Density by a scalar numeric value.</summary>
            <param name="a">The Density measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Add(`0)">
            <summary>Multiplies an Density by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Density by Area resulting in LinearDensity.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Density by Area resulting in LinearDensity.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies Density by Area resulting in LinearDensity.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Density by Length resulting in AreaDensity.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Density by Length resulting in AreaDensity.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies Density by Length resulting in AreaDensity.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Density by Volume resulting in Mass.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(Towel.Measurements.Density{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Density by Volume resulting in Mass.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Density by Volume resulting in Mass.</summary>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.Density{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Density by VolumeRate resulting in MassRate.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Multiply(Towel.Measurements.Density{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Density by VolumeRate resulting in MassRate.</summary>
            <param name="a">The Density to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Multiply(Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Density by VolumeRate resulting in MassRate.</summary>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Divide(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Divides an Density measurement by another Density measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Divide(Towel.Measurements.Density{`0},`0)">
            <summary>Divides this Density measurement by a numaric scalar value.</summary>
            <param name="a">The Density measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Division(Towel.Measurements.Density{`0},`0)">
            <summary>Divides this Density measurement by a numaric scalar value.</summary>
            <param name="a">The Density measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Divide(`0)">
            <summary>Divides this Density measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Division(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Divides an Density measurement by another Density measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Divide(Towel.Measurements.Density{`0})">
            <summary>Divides an Density measurement by another Density measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.LessThan(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than another Density measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_LessThan(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than another Density measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.LessThan(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than another Density measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.GreaterThan(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than another Density measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_GreaterThan(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than another Density measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.GreaterThan(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than another Density measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.LessThanOrEqual(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than or equal to another Density measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_LessThanOrEqual(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than or equal to another Density measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.LessThanOrEqual(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is less than or equal to another Density measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.GreaterThanOrEqual(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than or equal to another Density measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_GreaterThanOrEqual(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than or equal to another Density measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.GreaterThanOrEqual(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is greater than or equal to another Density measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Equal(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is equal to another Density measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Equality(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is equal to another Density measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Equal(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is equal to another Density measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.NotEqual(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is not equal to another Density measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.op_Inequality(Towel.Measurements.Density{`0},Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is not equal to another Density measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.NotEqual(Towel.Measurements.Density{`0})">
            <summary>Determines if an Density measurement is not equal to another Density measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.ToString">
            <summary>Converts the Density measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Density`1.GetHashCode">
            <summary>Base hashing function for Density measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge`1">
            <summary>ElectricCharge measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Convert(`0,Towel.Measurements.ElectricCharge.Units,Towel.Measurements.ElectricCharge.Units)">
            <summary>Converts a ElectricCharge measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromElectricChargeUnits1">The current units of the measurement.</param>
            <param name="toElectricChargeUnits1">The desired units of the measurement.</param>
            <returns>The ElectricCharge measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricChargeUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricChargeUnits)">
            <summary>Converts a ElectricCharge measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The ElectricCharge measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a ElectricCharge measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricChargeUnits)">
            <summary>Constructs an ElectricCharge with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the ElectricCharge.</param>
            <param name="units">The units of the ElectricCharge.</param>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.#ctor(`0,Towel.Measurements.ElectricCharge.Units)">
            <summary>Constructs an ElectricCharge with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the ElectricCharge.</param>
            <param name="ElectricChargeUnits1">The units of the ElectricCharge.</param>
        </member>
        <member name="P:Towel.Measurements.ElectricCharge`1.ElectricChargeUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.ElectricCharge`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricChargeUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.ElectricCharge`1.Item(Towel.Measurements.ElectricCharge.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="ElectricChargeUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricChargeUnits})~Towel.Measurements.ElectricCharge{`0}">
            <summary>Converts a ValueTuple to a ElectricCharge measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a ElectricCharge measurement.</param>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Add(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Adds two ElectricCharge measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Addition(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Adds two ElectricCharge measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Add(Towel.Measurements.ElectricCharge{`0})">
            <summary>Adds two ElectricCharge measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Subtract(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Subtracts two ElectricCharge measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Subtraction(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Subtracts two ElectricCharge measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Subtract(Towel.Measurements.ElectricCharge{`0})">
            <summary>Subtracts two ElectricCharge measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Multiply(Towel.Measurements.ElectricCharge{`0},`0)">
            <summary>Multiplies an ElectricCharge by a scalar numeric value.</summary>
            <param name="a">The ElectricCharge measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Multiply(`0,Towel.Measurements.ElectricCharge{`0})">
            <summary>Multiplies an ElectricCharge by a scalar numeric value.</summary>
            <param name="a">The ElectricCharge measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Multiply(Towel.Measurements.ElectricCharge{`0},`0)">
            <summary>Multiplies an ElectricCharge by a scalar numeric value.</summary>
            <param name="a">The ElectricCharge measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Multiply(`0,Towel.Measurements.ElectricCharge{`0})">
            <summary>Multiplies an ElectricCharge by a scalar numeric value.</summary>
            <param name="a">The ElectricCharge measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Add(`0)">
            <summary>Multiplies an ElectricCharge by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Divides an ElectricCharge measurement by another ElectricCharge measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCharge{`0},`0)">
            <summary>Divides this ElectricCharge measurement by a numaric scalar value.</summary>
            <param name="a">The ElectricCharge measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Division(Towel.Measurements.ElectricCharge{`0},`0)">
            <summary>Divides this ElectricCharge measurement by a numaric scalar value.</summary>
            <param name="a">The ElectricCharge measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(`0)">
            <summary>Divides this ElectricCharge measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Division(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Divides an ElectricCharge measurement by another ElectricCharge measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCharge{`0})">
            <summary>Divides an ElectricCharge measurement by another ElectricCharge measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides ElectricCharge by ElectricCurrent resulting in Time.</summary>
            <param name="a">The ElectricCharge to be divided.</param>
            <param name="b">The ElectricCurrent to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Division(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides ElectricCharge by ElectricCurrent resulting in Time.</summary>
            <param name="a">The ElectricCharge to be divided.</param>
            <param name="b">The ElectricCurrent to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides ElectricCharge by ElectricCurrent resulting in Time.</summary>
            <param name="b">The ElectricCurrent to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.Time{`0})">
            <summary>Divides ElectricCharge by Time resulting in ElectricCurrent.</summary>
            <param name="a">The ElectricCharge to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The ElectricCurrent result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Division(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.Time{`0})">
            <summary>Divides ElectricCharge by Time resulting in ElectricCurrent.</summary>
            <param name="a">The ElectricCharge to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The ElectricCurrent result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides ElectricCharge by Time resulting in ElectricCurrent.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The ElectricCurrent result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.LessThan(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_LessThan(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.LessThan(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.GreaterThan(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_GreaterThan(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.GreaterThan(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.LessThanOrEqual(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than or equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_LessThanOrEqual(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than or equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.LessThanOrEqual(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is less than or equal to another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.GreaterThanOrEqual(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than or equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_GreaterThanOrEqual(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than or equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.GreaterThanOrEqual(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is greater than or equal to another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Equal(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Equality(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Equal(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is equal to another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.NotEqual(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is not equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.op_Inequality(Towel.Measurements.ElectricCharge{`0},Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is not equal to another ElectricCharge measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.NotEqual(Towel.Measurements.ElectricCharge{`0})">
            <summary>Determines if an ElectricCharge measurement is not equal to another ElectricCharge measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.ToString">
            <summary>Converts the ElectricCharge measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCharge`1.GetHashCode">
            <summary>Base hashing function for ElectricCharge measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.ElectricCurrent`1">
            <summary>ElectricCurrent measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Convert(`0,Towel.Measurements.ElectricCharge.Units,Towel.Measurements.Time.Units,Towel.Measurements.ElectricCharge.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a ElectricCurrent measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromElectricChargeUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="toElectricChargeUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <returns>The ElectricCurrent measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricCurrentBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricCurrentBaseUnits)">
            <summary>Converts a ElectricCurrent measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The ElectricCurrent measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a ElectricCurrent measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricCurrentBaseUnits)">
            <summary>Constructs an ElectricCurrent with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the ElectricCurrent.</param>
            <param name="units">The units of the ElectricCurrent.</param>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.#ctor(`0,Towel.Measurements.ElectricCharge.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an ElectricCurrent with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the ElectricCurrent.</param>
            <param name="ElectricChargeUnits1">The units of the ElectricCurrent.</param>
            <param name="TimeUnits2">The units of the ElectricCurrent.</param>
        </member>
        <member name="P:Towel.Measurements.ElectricCurrent`1.ElectricChargeUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.ElectricCurrent`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.ElectricCurrent`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricCurrentBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.ElectricCurrent`1.Item(Towel.Measurements.ElectricCharge.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="ElectricChargeUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ElectricCurrentBaseUnits})~Towel.Measurements.ElectricCurrent{`0}">
            <summary>Converts a ValueTuple to a ElectricCurrent measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a ElectricCurrent measurement.</param>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Add(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Adds two ElectricCurrent measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Addition(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Adds two ElectricCurrent measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Add(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Adds two ElectricCurrent measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Subtract(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Subtracts two ElectricCurrent measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Subtraction(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Subtracts two ElectricCurrent measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Subtract(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Subtracts two ElectricCurrent measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Multiply(Towel.Measurements.ElectricCurrent{`0},`0)">
            <summary>Multiplies an ElectricCurrent by a scalar numeric value.</summary>
            <param name="a">The ElectricCurrent measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Multiply(`0,Towel.Measurements.ElectricCurrent{`0})">
            <summary>Multiplies an ElectricCurrent by a scalar numeric value.</summary>
            <param name="a">The ElectricCurrent measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Multiply(Towel.Measurements.ElectricCurrent{`0},`0)">
            <summary>Multiplies an ElectricCurrent by a scalar numeric value.</summary>
            <param name="a">The ElectricCurrent measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Multiply(`0,Towel.Measurements.ElectricCurrent{`0})">
            <summary>Multiplies an ElectricCurrent by a scalar numeric value.</summary>
            <param name="a">The ElectricCurrent measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Add(`0)">
            <summary>Multiplies an ElectricCurrent by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Multiply(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies ElectricCurrent by Time resulting in ElectricCharge.</summary>
            <param name="a">The ElectricCurrent to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Multiply(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies ElectricCurrent by Time resulting in ElectricCharge.</summary>
            <param name="a">The ElectricCurrent to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies ElectricCurrent by Time resulting in ElectricCharge.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Divide(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides an ElectricCurrent measurement by another ElectricCurrent measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Divide(Towel.Measurements.ElectricCurrent{`0},`0)">
            <summary>Divides this ElectricCurrent measurement by a numaric scalar value.</summary>
            <param name="a">The ElectricCurrent measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Division(Towel.Measurements.ElectricCurrent{`0},`0)">
            <summary>Divides this ElectricCurrent measurement by a numaric scalar value.</summary>
            <param name="a">The ElectricCurrent measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Divide(`0)">
            <summary>Divides this ElectricCurrent measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Division(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides an ElectricCurrent measurement by another ElectricCurrent measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Divide(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Divides an ElectricCurrent measurement by another ElectricCurrent measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.LessThan(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_LessThan(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.LessThan(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.GreaterThan(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_GreaterThan(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.GreaterThan(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.LessThanOrEqual(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than or equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_LessThanOrEqual(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than or equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.LessThanOrEqual(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is less than or equal to another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.GreaterThanOrEqual(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than or equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_GreaterThanOrEqual(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than or equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.GreaterThanOrEqual(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is greater than or equal to another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Equal(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Equality(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Equal(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is equal to another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.NotEqual(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is not equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.op_Inequality(Towel.Measurements.ElectricCurrent{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is not equal to another ElectricCurrent measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.NotEqual(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Determines if an ElectricCurrent measurement is not equal to another ElectricCurrent measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.ToString">
            <summary>Converts the ElectricCurrent measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.ElectricCurrent`1.GetHashCode">
            <summary>Base hashing function for ElectricCurrent measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Energy`1">
            <summary>Energy measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Energy measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="fromTimeUnits4">The current units of the measurement.</param>
            <param name="fromTimeUnits5">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <param name="toTimeUnits4">The desired units of the measurement.</param>
            <param name="toTimeUnits5">The desired units of the measurement.</param>
            <returns>The Energy measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.EnergyBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.EnergyBaseUnits)">
            <summary>Converts a Energy measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Energy measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Energy measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.EnergyBaseUnits)">
            <summary>Constructs an Energy with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Energy.</param>
            <param name="units">The units of the Energy.</param>
        </member>
        <member name="M:Towel.Measurements.Energy`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Energy with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Energy.</param>
            <param name="MassUnits1">The units of the Energy.</param>
            <param name="LengthUnits2">The units of the Energy.</param>
            <param name="LengthUnits3">The units of the Energy.</param>
            <param name="TimeUnits4">The units of the Energy.</param>
            <param name="TimeUnits5">The units of the Energy.</param>
        </member>
        <member name="P:Towel.Measurements.Energy`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.TimeUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.TimeUnits5">
            <summary>The #5 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Energy`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.EnergyBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Energy`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <param name="TimeUnits4">The #4 component of this measurements units.</param>
            <param name="TimeUnits5">The #5 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.EnergyBaseUnits})~Towel.Measurements.Energy{`0}">
            <summary>Converts a ValueTuple to a Energy measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Energy measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Add(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Adds two Energy measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Addition(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Adds two Energy measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Add(Towel.Measurements.Energy{`0})">
            <summary>Adds two Energy measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Subtract(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Subtracts two Energy measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Subtraction(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Subtracts two Energy measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Subtract(Towel.Measurements.Energy{`0})">
            <summary>Subtracts two Energy measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Multiply(Towel.Measurements.Energy{`0},`0)">
            <summary>Multiplies an Energy by a scalar numeric value.</summary>
            <param name="a">The Energy measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Multiply(`0,Towel.Measurements.Energy{`0})">
            <summary>Multiplies an Energy by a scalar numeric value.</summary>
            <param name="a">The Energy measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Multiply(Towel.Measurements.Energy{`0},`0)">
            <summary>Multiplies an Energy by a scalar numeric value.</summary>
            <param name="a">The Energy measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Multiply(`0,Towel.Measurements.Energy{`0})">
            <summary>Multiplies an Energy by a scalar numeric value.</summary>
            <param name="a">The Energy measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Add(`0)">
            <summary>Multiplies an Energy by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Divides an Energy measurement by another Energy measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},`0)">
            <summary>Divides this Energy measurement by a numaric scalar value.</summary>
            <param name="a">The Energy measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},`0)">
            <summary>Divides this Energy measurement by a numaric scalar value.</summary>
            <param name="a">The Energy measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(`0)">
            <summary>Divides this Energy measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Divides an Energy measurement by another Energy measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0})">
            <summary>Divides an Energy measurement by another Energy measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Energy by Acceleration resulting in LinearMass.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Energy by Acceleration resulting in LinearMass.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Energy by Acceleration resulting in LinearMass.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Force{`0})">
            <summary>Divides Energy by Force resulting in Length.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Force{`0})">
            <summary>Divides Energy by Force resulting in Length.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Force{`0})">
            <summary>Divides Energy by Force resulting in Length.</summary>
            <param name="b">The Force to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Energy by Length resulting in Force.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Energy by Length resulting in Force.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides Energy by Length resulting in Force.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Divides Energy by LinearMass resulting in Acceleration.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The LinearMass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Divides Energy by LinearMass resulting in Acceleration.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The LinearMass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.LinearMass{`0})">
            <summary>Divides Energy by LinearMass resulting in Acceleration.</summary>
            <param name="b">The LinearMass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Energy by LinearMassFlow resulting in Speed.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Energy by LinearMassFlow resulting in Speed.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Energy by LinearMassFlow resulting in Speed.</summary>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Power{`0})">
            <summary>Divides Energy by Power resulting in Time.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Power to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Power{`0})">
            <summary>Divides Energy by Power resulting in Time.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Power to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Power{`0})">
            <summary>Divides Energy by Power resulting in Time.</summary>
            <param name="b">The Power to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Energy by Pressure resulting in Volume.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Energy by Pressure resulting in Volume.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Pressure{`0})">
            <summary>Divides Energy by Pressure resulting in Volume.</summary>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Energy by Speed resulting in LinearMassFlow.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Energy by Speed resulting in LinearMassFlow.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides Energy by Speed resulting in LinearMassFlow.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Energy by Time resulting in Power.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Power result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Energy by Time resulting in Power.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Power result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Energy by Time resulting in Power.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The Power result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Energy{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides Energy by Volume resulting in Pressure.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Division(Towel.Measurements.Energy{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides Energy by Volume resulting in Pressure.</summary>
            <param name="a">The Energy to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Divide(Towel.Measurements.Volume{`0})">
            <summary>Divides Energy by Volume resulting in Pressure.</summary>
            <param name="b">The Volume to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.LessThan(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than another Energy measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_LessThan(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than another Energy measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.LessThan(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than another Energy measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.GreaterThan(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than another Energy measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_GreaterThan(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than another Energy measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.GreaterThan(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than another Energy measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.LessThanOrEqual(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than or equal to another Energy measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_LessThanOrEqual(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than or equal to another Energy measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.LessThanOrEqual(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is less than or equal to another Energy measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.GreaterThanOrEqual(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than or equal to another Energy measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_GreaterThanOrEqual(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than or equal to another Energy measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.GreaterThanOrEqual(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is greater than or equal to another Energy measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Equal(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is equal to another Energy measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Equality(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is equal to another Energy measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Equal(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is equal to another Energy measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.NotEqual(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is not equal to another Energy measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.op_Inequality(Towel.Measurements.Energy{`0},Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is not equal to another Energy measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.NotEqual(Towel.Measurements.Energy{`0})">
            <summary>Determines if an Energy measurement is not equal to another Energy measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.ToString">
            <summary>Converts the Energy measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Energy`1.GetHashCode">
            <summary>Base hashing function for Energy measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Force`1">
            <summary>Force measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Force`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Force measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromTimeUnits3">The current units of the measurement.</param>
            <param name="fromTimeUnits4">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toTimeUnits3">The desired units of the measurement.</param>
            <param name="toTimeUnits4">The desired units of the measurement.</param>
            <returns>The Force measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ForceBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.ForceBaseUnits)">
            <summary>Converts a Force measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Force measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Force measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ForceBaseUnits)">
            <summary>Constructs an Force with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Force.</param>
            <param name="units">The units of the Force.</param>
        </member>
        <member name="M:Towel.Measurements.Force`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Force with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Force.</param>
            <param name="MassUnits1">The units of the Force.</param>
            <param name="LengthUnits2">The units of the Force.</param>
            <param name="TimeUnits3">The units of the Force.</param>
            <param name="TimeUnits4">The units of the Force.</param>
        </member>
        <member name="P:Towel.Measurements.Force`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Force`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Force`1.TimeUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Force`1.TimeUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Force`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.ForceBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Force`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="TimeUnits3">The #3 component of this measurements units.</param>
            <param name="TimeUnits4">The #4 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.ForceBaseUnits})~Towel.Measurements.Force{`0}">
            <summary>Converts a ValueTuple to a Force measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Force measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Force`1.Add(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Adds two Force measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Addition(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Adds two Force measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Add(Towel.Measurements.Force{`0})">
            <summary>Adds two Force measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Subtract(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Subtracts two Force measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Subtraction(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Subtracts two Force measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Subtract(Towel.Measurements.Force{`0})">
            <summary>Subtracts two Force measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Force{`0},`0)">
            <summary>Multiplies an Force by a scalar numeric value.</summary>
            <param name="a">The Force measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(`0,Towel.Measurements.Force{`0})">
            <summary>Multiplies an Force by a scalar numeric value.</summary>
            <param name="a">The Force measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(Towel.Measurements.Force{`0},`0)">
            <summary>Multiplies an Force by a scalar numeric value.</summary>
            <param name="a">The Force measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(`0,Towel.Measurements.Force{`0})">
            <summary>Multiplies an Force by a scalar numeric value.</summary>
            <param name="a">The Force measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Add(`0)">
            <summary>Multiplies an Force by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Force by Length resulting in Energy.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Force by Length resulting in Energy.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies Force by Length resulting in Energy.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Force by Speed resulting in Power.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Force by Speed resulting in Power.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Force by Speed resulting in Power.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Force by Time resulting in LinearMassFlow.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(Towel.Measurements.Force{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Force by Time resulting in LinearMassFlow.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies Force by Time resulting in LinearMassFlow.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.Force{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Force by TimeArea resulting in LinearMass.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Multiply(Towel.Measurements.Force{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Force by TimeArea resulting in LinearMass.</summary>
            <param name="a">The Force to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Multiply(Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Force by TimeArea resulting in LinearMass.</summary>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Divides an Force measurement by another Force measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},`0)">
            <summary>Divides this Force measurement by a numaric scalar value.</summary>
            <param name="a">The Force measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},`0)">
            <summary>Divides this Force measurement by a numaric scalar value.</summary>
            <param name="a">The Force measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(`0)">
            <summary>Divides this Force measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Divides an Force measurement by another Force measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0})">
            <summary>Divides an Force measurement by another Force measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Force by Acceleration resulting in Mass.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Force by Acceleration resulting in Mass.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Force by Acceleration resulting in Mass.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Force by Area resulting in Pressure.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Force by Area resulting in Pressure.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides Force by Area resulting in Pressure.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides Force by Mass resulting in Acceleration.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides Force by Mass resulting in Acceleration.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Mass{`0})">
            <summary>Divides Force by Mass resulting in Acceleration.</summary>
            <param name="b">The Mass to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides Force by MassRate resulting in Speed.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides Force by MassRate resulting in Speed.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.MassRate{`0})">
            <summary>Divides Force by MassRate resulting in Speed.</summary>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Force by Pressure resulting in Area.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Force by Pressure resulting in Area.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Pressure{`0})">
            <summary>Divides Force by Pressure resulting in Area.</summary>
            <param name="b">The Pressure to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Force{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Force by Speed resulting in MassRate.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Division(Towel.Measurements.Force{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Force by Speed resulting in MassRate.</summary>
            <param name="a">The Force to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides Force by Speed resulting in MassRate.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.LessThan(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than another Force measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_LessThan(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than another Force measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.LessThan(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than another Force measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.GreaterThan(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than another Force measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_GreaterThan(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than another Force measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.GreaterThan(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than another Force measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.LessThanOrEqual(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than or equal to another Force measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_LessThanOrEqual(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than or equal to another Force measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.LessThanOrEqual(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is less than or equal to another Force measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.GreaterThanOrEqual(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than or equal to another Force measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_GreaterThanOrEqual(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than or equal to another Force measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.GreaterThanOrEqual(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is greater than or equal to another Force measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Equal(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is equal to another Force measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Equality(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is equal to another Force measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Equal(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is equal to another Force measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.NotEqual(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is not equal to another Force measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.op_Inequality(Towel.Measurements.Force{`0},Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is not equal to another Force measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.NotEqual(Towel.Measurements.Force{`0})">
            <summary>Determines if an Force measurement is not equal to another Force measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.ToString">
            <summary>Converts the Force measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Force`1.GetHashCode">
            <summary>Base hashing function for Force measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Length`1">
            <summary>Length measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Length`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a Length measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <returns>The Length measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LengthUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.LengthUnits)">
            <summary>Converts a Length measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Length measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Length measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LengthUnits)">
            <summary>Constructs an Length with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Length.</param>
            <param name="units">The units of the Length.</param>
        </member>
        <member name="M:Towel.Measurements.Length`1.#ctor(`0,Towel.Measurements.Length.Units)">
            <summary>Constructs an Length with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Length.</param>
            <param name="LengthUnits1">The units of the Length.</param>
        </member>
        <member name="P:Towel.Measurements.Length`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Length`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.LengthUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Length`1.Item(Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LengthUnits})~Towel.Measurements.Length{`0}">
            <summary>Converts a ValueTuple to a Length measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Length measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Length`1.Add(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Adds two Length measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Addition(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Adds two Length measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Add(Towel.Measurements.Length{`0})">
            <summary>Adds two Length measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Subtract(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Subtracts two Length measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Subtraction(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Subtracts two Length measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Subtract(Towel.Measurements.Length{`0})">
            <summary>Subtracts two Length measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},`0)">
            <summary>Multiplies an Length by a scalar numeric value.</summary>
            <param name="a">The Length measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(`0,Towel.Measurements.Length{`0})">
            <summary>Multiplies an Length by a scalar numeric value.</summary>
            <param name="a">The Length measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},`0)">
            <summary>Multiplies an Length by a scalar numeric value.</summary>
            <param name="a">The Length measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(`0,Towel.Measurements.Length{`0})">
            <summary>Multiplies an Length by a scalar numeric value.</summary>
            <param name="a">The Length measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Add(`0)">
            <summary>Multiplies an Length by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Length by Area resulting in Volume.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Length by Area resulting in Volume.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies Length by Area resulting in Volume.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Length by AreaDensity resulting in LinearDensity.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Length by AreaDensity resulting in LinearDensity.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Length by AreaDensity resulting in LinearDensity.</summary>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Length by Density resulting in AreaDensity.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Length by Density resulting in AreaDensity.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Density{`0})">
            <summary>Mulitplies Length by Density resulting in AreaDensity.</summary>
            <param name="b">The Density to multiply by.</param>
            <returns>The AreaDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Length by Force resulting in Energy.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Length by Force resulting in Energy.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Force{`0})">
            <summary>Mulitplies Length by Force resulting in Energy.</summary>
            <param name="b">The Force to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Length by Length resulting in Area.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Area result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Length by Length resulting in Area.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Area result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies Length by Length resulting in Area.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The Area result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Length by LinearDensity resulting in Mass.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Length by LinearDensity resulting in Mass.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Length by LinearDensity resulting in Mass.</summary>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Length by Mass resulting in LinearMass.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Length by Mass resulting in LinearMass.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Length by Mass resulting in LinearMass.</summary>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.Length{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Length by MassRate resulting in LinearMassFlow.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Multiply(Towel.Measurements.Length{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Length by MassRate resulting in LinearMassFlow.</summary>
            <param name="a">The Length to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Multiply(Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Length by MassRate resulting in LinearMassFlow.</summary>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Divides an Length measurement by another Length measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},`0)">
            <summary>Divides this Length measurement by a numaric scalar value.</summary>
            <param name="a">The Length measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},`0)">
            <summary>Divides this Length measurement by a numaric scalar value.</summary>
            <param name="a">The Length measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(`0)">
            <summary>Divides this Length measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Divides an Length measurement by another Length measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides an Length measurement by another Length measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Length by Acceleration resulting in TimeArea.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Length by Acceleration resulting in TimeArea.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Length by Acceleration resulting in TimeArea.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Length by Speed resulting in Time.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Length by Speed resulting in Time.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides Length by Speed resulting in Time.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Length by Time resulting in Speed.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Length by Time resulting in Speed.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Length by Time resulting in Speed.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.Length{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides Length by TimeArea resulting in Acceleration.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Division(Towel.Measurements.Length{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides Length by TimeArea resulting in Acceleration.</summary>
            <param name="a">The Length to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Divide(Towel.Measurements.TimeArea{`0})">
            <summary>Divides Length by TimeArea resulting in Acceleration.</summary>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.LessThan(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than another Length measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_LessThan(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than another Length measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.LessThan(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than another Length measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.GreaterThan(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than another Length measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_GreaterThan(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than another Length measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.GreaterThan(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than another Length measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.LessThanOrEqual(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than or equal to another Length measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_LessThanOrEqual(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than or equal to another Length measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.LessThanOrEqual(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is less than or equal to another Length measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.GreaterThanOrEqual(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than or equal to another Length measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_GreaterThanOrEqual(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than or equal to another Length measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.GreaterThanOrEqual(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is greater than or equal to another Length measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Equal(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is equal to another Length measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Equality(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is equal to another Length measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Equal(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is equal to another Length measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.NotEqual(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is not equal to another Length measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.op_Inequality(Towel.Measurements.Length{`0},Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is not equal to another Length measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.NotEqual(Towel.Measurements.Length{`0})">
            <summary>Determines if an Length measurement is not equal to another Length measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.ToString">
            <summary>Converts the Length measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Length`1.GetHashCode">
            <summary>Base hashing function for Length measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearDensity`1">
            <summary>LinearDensity measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a LinearDensity measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <returns>The LinearDensity measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearDensityBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearDensityBaseUnits)">
            <summary>Converts a LinearDensity measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The LinearDensity measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a LinearDensity measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearDensityBaseUnits)">
            <summary>Constructs an LinearDensity with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearDensity.</param>
            <param name="units">The units of the LinearDensity.</param>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an LinearDensity with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearDensity.</param>
            <param name="MassUnits1">The units of the LinearDensity.</param>
            <param name="LengthUnits2">The units of the LinearDensity.</param>
        </member>
        <member name="P:Towel.Measurements.LinearDensity`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearDensity`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearDensity`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearDensityBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.LinearDensity`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearDensityBaseUnits})~Towel.Measurements.LinearDensity{`0}">
            <summary>Converts a ValueTuple to a LinearDensity measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a LinearDensity measurement.</param>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Add(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Adds two LinearDensity measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Addition(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Adds two LinearDensity measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Add(Towel.Measurements.LinearDensity{`0})">
            <summary>Adds two LinearDensity measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Subtract(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Subtracts two LinearDensity measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Subtraction(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Subtracts two LinearDensity measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Subtract(Towel.Measurements.LinearDensity{`0})">
            <summary>Subtracts two LinearDensity measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.LinearDensity{`0},`0)">
            <summary>Multiplies an LinearDensity by a scalar numeric value.</summary>
            <param name="a">The LinearDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(`0,Towel.Measurements.LinearDensity{`0})">
            <summary>Multiplies an LinearDensity by a scalar numeric value.</summary>
            <param name="a">The LinearDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Multiply(Towel.Measurements.LinearDensity{`0},`0)">
            <summary>Multiplies an LinearDensity by a scalar numeric value.</summary>
            <param name="a">The LinearDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Multiply(`0,Towel.Measurements.LinearDensity{`0})">
            <summary>Multiplies an LinearDensity by a scalar numeric value.</summary>
            <param name="a">The LinearDensity measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Add(`0)">
            <summary>Multiplies an LinearDensity by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies LinearDensity by Area resulting in LinearMass.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies LinearDensity by Area resulting in LinearMass.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies LinearDensity by Area resulting in LinearMass.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies LinearDensity by Length resulting in Mass.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies LinearDensity by Length resulting in Mass.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies LinearDensity by Length resulting in Mass.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearDensity by Speed resulting in MassRate.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Multiply(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearDensity by Speed resulting in MassRate.</summary>
            <param name="a">The LinearDensity to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearDensity by Speed resulting in MassRate.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides an LinearDensity measurement by another LinearDensity measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},`0)">
            <summary>Divides this LinearDensity measurement by a numaric scalar value.</summary>
            <param name="a">The LinearDensity measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},`0)">
            <summary>Divides this LinearDensity measurement by a numaric scalar value.</summary>
            <param name="a">The LinearDensity measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(`0)">
            <summary>Divides this LinearDensity measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides an LinearDensity measurement by another LinearDensity measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0})">
            <summary>Divides an LinearDensity measurement by another LinearDensity measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Divides LinearDensity by Area resulting in Density.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Area{`0})">
            <summary>Divides LinearDensity by Area resulting in Density.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides LinearDensity by Area resulting in Density.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearDensity by AreaDensity resulting in Length.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearDensity by AreaDensity resulting in Length.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearDensity by AreaDensity resulting in Length.</summary>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Density{`0})">
            <summary>Divides LinearDensity by Density resulting in Area.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Density{`0})">
            <summary>Divides LinearDensity by Density resulting in Area.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.Density{`0})">
            <summary>Divides LinearDensity by Density resulting in Area.</summary>
            <param name="b">The Density to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearDensity by Length resulting in AreaDensity.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearDensity by Length resulting in AreaDensity.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides LinearDensity by Length resulting in AreaDensity.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides LinearDensity by Pressure resulting in TimeArea.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides LinearDensity by Pressure resulting in TimeArea.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.Pressure{`0})">
            <summary>Divides LinearDensity by Pressure resulting in TimeArea.</summary>
            <param name="b">The Pressure to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.LinearDensity{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearDensity by TimeArea resulting in Pressure.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Division(Towel.Measurements.LinearDensity{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearDensity by TimeArea resulting in Pressure.</summary>
            <param name="a">The LinearDensity to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Divide(Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearDensity by TimeArea resulting in Pressure.</summary>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.LessThan(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than another LinearDensity measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_LessThan(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than another LinearDensity measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.LessThan(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than another LinearDensity measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.GreaterThan(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than another LinearDensity measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_GreaterThan(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than another LinearDensity measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.GreaterThan(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than another LinearDensity measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.LessThanOrEqual(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than or equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_LessThanOrEqual(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than or equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.LessThanOrEqual(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is less than or equal to another LinearDensity measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.GreaterThanOrEqual(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than or equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_GreaterThanOrEqual(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than or equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.GreaterThanOrEqual(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is greater than or equal to another LinearDensity measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Equal(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Equality(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Equal(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is equal to another LinearDensity measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.NotEqual(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is not equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.op_Inequality(Towel.Measurements.LinearDensity{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is not equal to another LinearDensity measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.NotEqual(Towel.Measurements.LinearDensity{`0})">
            <summary>Determines if an LinearDensity measurement is not equal to another LinearDensity measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.ToString">
            <summary>Converts the LinearDensity measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearDensity`1.GetHashCode">
            <summary>Base hashing function for LinearDensity measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearMass`1">
            <summary>LinearMass measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a LinearMass measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <returns>The LinearMass measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassBaseUnits)">
            <summary>Converts a LinearMass measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The LinearMass measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a LinearMass measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassBaseUnits)">
            <summary>Constructs an LinearMass with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearMass.</param>
            <param name="units">The units of the LinearMass.</param>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an LinearMass with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearMass.</param>
            <param name="MassUnits1">The units of the LinearMass.</param>
            <param name="LengthUnits2">The units of the LinearMass.</param>
        </member>
        <member name="P:Towel.Measurements.LinearMass`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearMass`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearMass`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.LinearMass`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassBaseUnits})~Towel.Measurements.LinearMass{`0}">
            <summary>Converts a ValueTuple to a LinearMass measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a LinearMass measurement.</param>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Add(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Adds two LinearMass measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Addition(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Adds two LinearMass measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Add(Towel.Measurements.LinearMass{`0})">
            <summary>Adds two LinearMass measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Subtract(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Subtracts two LinearMass measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Subtraction(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Subtracts two LinearMass measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Subtract(Towel.Measurements.LinearMass{`0})">
            <summary>Subtracts two LinearMass measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Multiply(Towel.Measurements.LinearMass{`0},`0)">
            <summary>Multiplies an LinearMass by a scalar numeric value.</summary>
            <param name="a">The LinearMass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Multiply(`0,Towel.Measurements.LinearMass{`0})">
            <summary>Multiplies an LinearMass by a scalar numeric value.</summary>
            <param name="a">The LinearMass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Multiply(Towel.Measurements.LinearMass{`0},`0)">
            <summary>Multiplies an LinearMass by a scalar numeric value.</summary>
            <param name="a">The LinearMass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Multiply(`0,Towel.Measurements.LinearMass{`0})">
            <summary>Multiplies an LinearMass by a scalar numeric value.</summary>
            <param name="a">The LinearMass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Add(`0)">
            <summary>Multiplies an LinearMass by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Multiply(Towel.Measurements.LinearMass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMass by Acceleration resulting in Energy.</summary>
            <param name="a">The LinearMass to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Multiply(Towel.Measurements.LinearMass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMass by Acceleration resulting in Energy.</summary>
            <param name="a">The LinearMass to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMass by Acceleration resulting in Energy.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Divides an LinearMass measurement by another LinearMass measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},`0)">
            <summary>Divides this LinearMass measurement by a numaric scalar value.</summary>
            <param name="a">The LinearMass measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},`0)">
            <summary>Divides this LinearMass measurement by a numaric scalar value.</summary>
            <param name="a">The LinearMass measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(`0)">
            <summary>Divides this LinearMass measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Divides an LinearMass measurement by another LinearMass measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0})">
            <summary>Divides an LinearMass measurement by another LinearMass measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Area{`0})">
            <summary>Divides LinearMass by Area resulting in LinearDensity.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Area{`0})">
            <summary>Divides LinearMass by Area resulting in LinearDensity.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides LinearMass by Area resulting in LinearDensity.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMass by AreaDensity resulting in Volume.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMass by AreaDensity resulting in Volume.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMass by AreaDensity resulting in Volume.</summary>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Force{`0})">
            <summary>Divides LinearMass by Force resulting in TimeArea.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Force{`0})">
            <summary>Divides LinearMass by Force resulting in TimeArea.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Force{`0})">
            <summary>Divides LinearMass by Force resulting in TimeArea.</summary>
            <param name="b">The Force to divide by.</param>
            <returns>The TimeArea result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearMass by Length resulting in Mass.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearMass by Length resulting in Mass.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides LinearMass by Length resulting in Mass.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides LinearMass by LinearDensity resulting in Area.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides LinearMass by LinearDensity resulting in Area.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearDensity{`0})">
            <summary>Divides LinearMass by LinearDensity resulting in Area.</summary>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides LinearMass by LinearMassFlow resulting in Time.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides LinearMass by LinearMassFlow resulting in Time.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides LinearMass by LinearMassFlow resulting in Time.</summary>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMass by Mass resulting in Length.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMass by Mass resulting in Length.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMass by Mass resulting in Length.</summary>
            <param name="b">The Mass to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Time{`0})">
            <summary>Divides LinearMass by Time resulting in LinearMassFlow.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Time{`0})">
            <summary>Divides LinearMass by Time resulting in LinearMassFlow.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides LinearMass by Time resulting in LinearMassFlow.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearMass by TimeArea resulting in Force.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearMass by TimeArea resulting in Force.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.TimeArea{`0})">
            <summary>Divides LinearMass by TimeArea resulting in Force.</summary>
            <param name="b">The TimeArea to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.LinearMass{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides LinearMass by Volume resulting in AreaDensity.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Division(Towel.Measurements.LinearMass{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides LinearMass by Volume resulting in AreaDensity.</summary>
            <param name="a">The LinearMass to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Divide(Towel.Measurements.Volume{`0})">
            <summary>Divides LinearMass by Volume resulting in AreaDensity.</summary>
            <param name="b">The Volume to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.LessThan(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than another LinearMass measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_LessThan(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than another LinearMass measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.LessThan(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than another LinearMass measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.GreaterThan(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than another LinearMass measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_GreaterThan(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than another LinearMass measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.GreaterThan(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than another LinearMass measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.LessThanOrEqual(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than or equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_LessThanOrEqual(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than or equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.LessThanOrEqual(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is less than or equal to another LinearMass measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.GreaterThanOrEqual(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than or equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_GreaterThanOrEqual(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than or equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.GreaterThanOrEqual(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is greater than or equal to another LinearMass measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Equal(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Equality(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Equal(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is equal to another LinearMass measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.NotEqual(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is not equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.op_Inequality(Towel.Measurements.LinearMass{`0},Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is not equal to another LinearMass measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.NotEqual(Towel.Measurements.LinearMass{`0})">
            <summary>Determines if an LinearMass measurement is not equal to another LinearMass measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.ToString">
            <summary>Converts the LinearMass measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMass`1.GetHashCode">
            <summary>Base hashing function for LinearMass measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.LinearMassFlow`1">
            <summary>LinearMassFlow measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a LinearMassFlow measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromTimeUnits3">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toTimeUnits3">The desired units of the measurement.</param>
            <returns>The LinearMassFlow measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassFlowBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassFlowBaseUnits)">
            <summary>Converts a LinearMassFlow measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The LinearMassFlow measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a LinearMassFlow measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassFlowBaseUnits)">
            <summary>Constructs an LinearMassFlow with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearMassFlow.</param>
            <param name="units">The units of the LinearMassFlow.</param>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an LinearMassFlow with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the LinearMassFlow.</param>
            <param name="MassUnits1">The units of the LinearMassFlow.</param>
            <param name="LengthUnits2">The units of the LinearMassFlow.</param>
            <param name="TimeUnits3">The units of the LinearMassFlow.</param>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.TimeUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassFlowBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.LinearMassFlow`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="TimeUnits3">The #3 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.LinearMassFlowBaseUnits})~Towel.Measurements.LinearMassFlow{`0}">
            <summary>Converts a ValueTuple to a LinearMassFlow measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a LinearMassFlow measurement.</param>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Add(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Adds two LinearMassFlow measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Addition(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Adds two LinearMassFlow measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Add(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Adds two LinearMassFlow measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Subtract(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Subtracts two LinearMassFlow measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Subtraction(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Subtracts two LinearMassFlow measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Subtract(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Subtracts two LinearMassFlow measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.LinearMassFlow{`0},`0)">
            <summary>Multiplies an LinearMassFlow by a scalar numeric value.</summary>
            <param name="a">The LinearMassFlow measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(`0,Towel.Measurements.LinearMassFlow{`0})">
            <summary>Multiplies an LinearMassFlow by a scalar numeric value.</summary>
            <param name="a">The LinearMassFlow measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Multiply(Towel.Measurements.LinearMassFlow{`0},`0)">
            <summary>Multiplies an LinearMassFlow by a scalar numeric value.</summary>
            <param name="a">The LinearMassFlow measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Multiply(`0,Towel.Measurements.LinearMassFlow{`0})">
            <summary>Multiplies an LinearMassFlow by a scalar numeric value.</summary>
            <param name="a">The LinearMassFlow measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Add(`0)">
            <summary>Multiplies an LinearMassFlow by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMassFlow by Acceleration resulting in Power.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMassFlow by Acceleration resulting in Power.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies LinearMassFlow by Acceleration resulting in Power.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearMassFlow by Speed resulting in Energy.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearMassFlow by Speed resulting in Energy.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies LinearMassFlow by Speed resulting in Energy.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies LinearMassFlow by Time resulting in LinearMass.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Multiply(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies LinearMassFlow by Time resulting in LinearMass.</summary>
            <param name="a">The LinearMassFlow to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies LinearMassFlow by Time resulting in LinearMass.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides an LinearMassFlow measurement by another LinearMassFlow measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},`0)">
            <summary>Divides this LinearMassFlow measurement by a numaric scalar value.</summary>
            <param name="a">The LinearMassFlow measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},`0)">
            <summary>Divides this LinearMassFlow measurement by a numaric scalar value.</summary>
            <param name="a">The LinearMassFlow measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(`0)">
            <summary>Divides this LinearMassFlow measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides an LinearMassFlow measurement by another LinearMassFlow measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides an LinearMassFlow measurement by another LinearMassFlow measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMassFlow by AreaDensity resulting in VolumeRate.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMassFlow by AreaDensity resulting in VolumeRate.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides LinearMassFlow by AreaDensity resulting in VolumeRate.</summary>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Force{`0})">
            <summary>Divides LinearMassFlow by Force resulting in Time.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Force{`0})">
            <summary>Divides LinearMassFlow by Force resulting in Time.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.Force{`0})">
            <summary>Divides LinearMassFlow by Force resulting in Time.</summary>
            <param name="b">The Force to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearMassFlow by Length resulting in MassRate.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Length{`0})">
            <summary>Divides LinearMassFlow by Length resulting in MassRate.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides LinearMassFlow by Length resulting in MassRate.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMassFlow by Mass resulting in Speed.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMassFlow by Mass resulting in Speed.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Mass to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.Mass{`0})">
            <summary>Divides LinearMassFlow by Mass resulting in Speed.</summary>
            <param name="b">The Mass to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides LinearMassFlow by MassRate resulting in Length.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides LinearMassFlow by MassRate resulting in Length.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.MassRate{`0})">
            <summary>Divides LinearMassFlow by MassRate resulting in Length.</summary>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides LinearMassFlow by Speed resulting in Mass.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides LinearMassFlow by Speed resulting in Mass.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides LinearMassFlow by Speed resulting in Mass.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The Mass result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Time{`0})">
            <summary>Divides LinearMassFlow by Time resulting in Force.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.Time{`0})">
            <summary>Divides LinearMassFlow by Time resulting in Force.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides LinearMassFlow by Time resulting in Force.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides LinearMassFlow by VolumeRate resulting in AreaDensity.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Division(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides LinearMassFlow by VolumeRate resulting in AreaDensity.</summary>
            <param name="a">The LinearMassFlow to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Divide(Towel.Measurements.VolumeRate{`0})">
            <summary>Divides LinearMassFlow by VolumeRate resulting in AreaDensity.</summary>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.LessThan(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_LessThan(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.LessThan(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.GreaterThan(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_GreaterThan(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.GreaterThan(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.LessThanOrEqual(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than or equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_LessThanOrEqual(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than or equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.LessThanOrEqual(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is less than or equal to another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.GreaterThanOrEqual(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than or equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_GreaterThanOrEqual(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than or equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.GreaterThanOrEqual(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is greater than or equal to another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Equal(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Equality(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Equal(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is equal to another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.NotEqual(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is not equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.op_Inequality(Towel.Measurements.LinearMassFlow{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is not equal to another LinearMassFlow measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.NotEqual(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Determines if an LinearMassFlow measurement is not equal to another LinearMassFlow measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.ToString">
            <summary>Converts the LinearMassFlow measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.LinearMassFlow`1.GetHashCode">
            <summary>Base hashing function for LinearMassFlow measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Mass`1">
            <summary>Mass measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Mass.Units)">
            <summary>Converts a Mass measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <returns>The Mass measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassUnits)">
            <summary>Converts a Mass measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Mass measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Mass measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassUnits)">
            <summary>Constructs an Mass with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Mass.</param>
            <param name="units">The units of the Mass.</param>
        </member>
        <member name="M:Towel.Measurements.Mass`1.#ctor(`0,Towel.Measurements.Mass.Units)">
            <summary>Constructs an Mass with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Mass.</param>
            <param name="MassUnits1">The units of the Mass.</param>
        </member>
        <member name="P:Towel.Measurements.Mass`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Mass`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.MassUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Mass`1.Item(Towel.Measurements.Mass.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassUnits})~Towel.Measurements.Mass{`0}">
            <summary>Converts a ValueTuple to a Mass measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Mass measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Add(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Adds two Mass measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Addition(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Adds two Mass measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Add(Towel.Measurements.Mass{`0})">
            <summary>Adds two Mass measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Subtract(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Subtracts two Mass measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Subtraction(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Subtracts two Mass measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Subtract(Towel.Measurements.Mass{`0})">
            <summary>Subtracts two Mass measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Mass{`0},`0)">
            <summary>Multiplies an Mass by a scalar numeric value.</summary>
            <param name="a">The Mass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(`0,Towel.Measurements.Mass{`0})">
            <summary>Multiplies an Mass by a scalar numeric value.</summary>
            <param name="a">The Mass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Multiply(Towel.Measurements.Mass{`0},`0)">
            <summary>Multiplies an Mass by a scalar numeric value.</summary>
            <param name="a">The Mass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Multiply(`0,Towel.Measurements.Mass{`0})">
            <summary>Multiplies an Mass by a scalar numeric value.</summary>
            <param name="a">The Mass measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Add(`0)">
            <summary>Multiplies an Mass by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Mass by Acceleration resulting in Force.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Mass by Acceleration resulting in Force.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Mass by Acceleration resulting in Force.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Mass by Length resulting in LinearMass.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies Mass by Length resulting in LinearMass.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies Mass by Length resulting in LinearMass.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Mass by Speed resulting in LinearMassFlow.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Multiply(Towel.Measurements.Mass{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Mass by Speed resulting in LinearMassFlow.</summary>
            <param name="a">The Mass to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Mass by Speed resulting in LinearMassFlow.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides an Mass measurement by another Mass measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},`0)">
            <summary>Divides this Mass measurement by a numaric scalar value.</summary>
            <param name="a">The Mass measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},`0)">
            <summary>Divides this Mass measurement by a numaric scalar value.</summary>
            <param name="a">The Mass measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(`0)">
            <summary>Divides this Mass measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Divides an Mass measurement by another Mass measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0})">
            <summary>Divides an Mass measurement by another Mass measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Mass by Area resulting in AreaDensity.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Mass by Area resulting in AreaDensity.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides Mass by Area resulting in AreaDensity.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Mass by AreaDensity resulting in Area.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Mass by AreaDensity resulting in Area.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Mass by AreaDensity resulting in Area.</summary>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Density{`0})">
            <summary>Divides Mass by Density resulting in Volume.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Density{`0})">
            <summary>Divides Mass by Density resulting in Volume.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Density{`0})">
            <summary>Divides Mass by Density resulting in Volume.</summary>
            <param name="b">The Density to divide by.</param>
            <returns>The Volume result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Mass by Length resulting in LinearDensity.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Mass by Length resulting in LinearDensity.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides Mass by Length resulting in LinearDensity.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides Mass by LinearDensity resulting in Length.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides Mass by LinearDensity resulting in Length.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.LinearDensity{`0})">
            <summary>Divides Mass by LinearDensity resulting in Length.</summary>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides Mass by MassRate resulting in Time.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides Mass by MassRate resulting in Time.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.MassRate{`0})">
            <summary>Divides Mass by MassRate resulting in Time.</summary>
            <param name="b">The MassRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Mass by Time resulting in MassRate.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Mass by Time resulting in MassRate.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Mass by Time resulting in MassRate.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The MassRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Mass{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides Mass by Volume resulting in Density.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Division(Towel.Measurements.Mass{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides Mass by Volume resulting in Density.</summary>
            <param name="a">The Mass to be divided.</param>
            <param name="b">The Volume to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Divide(Towel.Measurements.Volume{`0})">
            <summary>Divides Mass by Volume resulting in Density.</summary>
            <param name="b">The Volume to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.LessThan(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than another Mass measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_LessThan(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than another Mass measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.LessThan(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than another Mass measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.GreaterThan(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than another Mass measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_GreaterThan(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than another Mass measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.GreaterThan(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than another Mass measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.LessThanOrEqual(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than or equal to another Mass measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_LessThanOrEqual(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than or equal to another Mass measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.LessThanOrEqual(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is less than or equal to another Mass measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.GreaterThanOrEqual(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than or equal to another Mass measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_GreaterThanOrEqual(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than or equal to another Mass measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.GreaterThanOrEqual(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is greater than or equal to another Mass measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Equal(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is equal to another Mass measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Equality(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is equal to another Mass measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Equal(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is equal to another Mass measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.NotEqual(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is not equal to another Mass measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.op_Inequality(Towel.Measurements.Mass{`0},Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is not equal to another Mass measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.NotEqual(Towel.Measurements.Mass{`0})">
            <summary>Determines if an Mass measurement is not equal to another Mass measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.ToString">
            <summary>Converts the Mass measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Mass`1.GetHashCode">
            <summary>Base hashing function for Mass measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.MassRate`1">
            <summary>MassRate measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a MassRate measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <returns>The MassRate measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassRateBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassRateBaseUnits)">
            <summary>Converts a MassRate measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The MassRate measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a MassRate measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassRateBaseUnits)">
            <summary>Constructs an MassRate with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the MassRate.</param>
            <param name="units">The units of the MassRate.</param>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an MassRate with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the MassRate.</param>
            <param name="MassUnits1">The units of the MassRate.</param>
            <param name="TimeUnits2">The units of the MassRate.</param>
        </member>
        <member name="P:Towel.Measurements.MassRate`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.MassRate`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.MassRate`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.MassRateBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.MassRate`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.MassRateBaseUnits})~Towel.Measurements.MassRate{`0}">
            <summary>Converts a ValueTuple to a MassRate measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a MassRate measurement.</param>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Add(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Adds two MassRate measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Addition(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Adds two MassRate measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Add(Towel.Measurements.MassRate{`0})">
            <summary>Adds two MassRate measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Subtract(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Subtracts two MassRate measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Subtraction(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Subtracts two MassRate measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Subtract(Towel.Measurements.MassRate{`0})">
            <summary>Subtracts two MassRate measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.MassRate{`0},`0)">
            <summary>Multiplies an MassRate by a scalar numeric value.</summary>
            <param name="a">The MassRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(`0,Towel.Measurements.MassRate{`0})">
            <summary>Multiplies an MassRate by a scalar numeric value.</summary>
            <param name="a">The MassRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Multiply(Towel.Measurements.MassRate{`0},`0)">
            <summary>Multiplies an MassRate by a scalar numeric value.</summary>
            <param name="a">The MassRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Multiply(`0,Towel.Measurements.MassRate{`0})">
            <summary>Multiplies an MassRate by a scalar numeric value.</summary>
            <param name="a">The MassRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Add(`0)">
            <summary>Multiplies an MassRate by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies MassRate by Length resulting in LinearMassFlow.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Length{`0})">
            <summary>Mulitplies MassRate by Length resulting in LinearMassFlow.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.Length{`0})">
            <summary>Mulitplies MassRate by Length resulting in LinearMassFlow.</summary>
            <param name="b">The Length to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies MassRate by Speed resulting in Force.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies MassRate by Speed resulting in Force.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies MassRate by Speed resulting in Force.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies MassRate by Time resulting in Mass.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Multiply(Towel.Measurements.MassRate{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies MassRate by Time resulting in Mass.</summary>
            <param name="a">The MassRate to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies MassRate by Time resulting in Mass.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides an MassRate measurement by another MassRate measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},`0)">
            <summary>Divides this MassRate measurement by a numaric scalar value.</summary>
            <param name="a">The MassRate measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},`0)">
            <summary>Divides this MassRate measurement by a numaric scalar value.</summary>
            <param name="a">The MassRate measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(`0)">
            <summary>Divides this MassRate measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Divides an MassRate measurement by another MassRate measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0})">
            <summary>Divides an MassRate measurement by another MassRate measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},Towel.Measurements.Density{`0})">
            <summary>Divides MassRate by Density resulting in VolumeRate.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},Towel.Measurements.Density{`0})">
            <summary>Divides MassRate by Density resulting in VolumeRate.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The Density to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.Density{`0})">
            <summary>Divides MassRate by Density resulting in VolumeRate.</summary>
            <param name="b">The Density to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides MassRate by LinearDensity resulting in Speed.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Divides MassRate by LinearDensity resulting in Speed.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.LinearDensity{`0})">
            <summary>Divides MassRate by LinearDensity resulting in Speed.</summary>
            <param name="b">The LinearDensity to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides MassRate by Speed resulting in LinearDensity.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides MassRate by Speed resulting in LinearDensity.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides MassRate by Speed resulting in LinearDensity.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The LinearDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.MassRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides MassRate by VolumeRate resulting in Density.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Division(Towel.Measurements.MassRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides MassRate by VolumeRate resulting in Density.</summary>
            <param name="a">The MassRate to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Divide(Towel.Measurements.VolumeRate{`0})">
            <summary>Divides MassRate by VolumeRate resulting in Density.</summary>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Density result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.LessThan(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than another MassRate measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_LessThan(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than another MassRate measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.LessThan(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than another MassRate measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.GreaterThan(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than another MassRate measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_GreaterThan(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than another MassRate measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.GreaterThan(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than another MassRate measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.LessThanOrEqual(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than or equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_LessThanOrEqual(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than or equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.LessThanOrEqual(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is less than or equal to another MassRate measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.GreaterThanOrEqual(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than or equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_GreaterThanOrEqual(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than or equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.GreaterThanOrEqual(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is greater than or equal to another MassRate measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Equal(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Equality(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Equal(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is equal to another MassRate measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.NotEqual(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is not equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.op_Inequality(Towel.Measurements.MassRate{`0},Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is not equal to another MassRate measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.NotEqual(Towel.Measurements.MassRate{`0})">
            <summary>Determines if an MassRate measurement is not equal to another MassRate measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.ToString">
            <summary>Converts the MassRate measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.MassRate`1.GetHashCode">
            <summary>Base hashing function for MassRate measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Power`1">
            <summary>Power measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Power`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Power measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="fromTimeUnits4">The current units of the measurement.</param>
            <param name="fromTimeUnits5">The current units of the measurement.</param>
            <param name="fromTimeUnits6">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <param name="toTimeUnits4">The desired units of the measurement.</param>
            <param name="toTimeUnits5">The desired units of the measurement.</param>
            <param name="toTimeUnits6">The desired units of the measurement.</param>
            <returns>The Power measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PowerBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.PowerBaseUnits)">
            <summary>Converts a Power measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Power measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Power measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PowerBaseUnits)">
            <summary>Constructs an Power with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Power.</param>
            <param name="units">The units of the Power.</param>
        </member>
        <member name="M:Towel.Measurements.Power`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Power with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Power.</param>
            <param name="MassUnits1">The units of the Power.</param>
            <param name="LengthUnits2">The units of the Power.</param>
            <param name="LengthUnits3">The units of the Power.</param>
            <param name="TimeUnits4">The units of the Power.</param>
            <param name="TimeUnits5">The units of the Power.</param>
            <param name="TimeUnits6">The units of the Power.</param>
        </member>
        <member name="P:Towel.Measurements.Power`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.TimeUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.TimeUnits5">
            <summary>The #5 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.TimeUnits6">
            <summary>The #6 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Power`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.PowerBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Power`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <param name="TimeUnits4">The #4 component of this measurements units.</param>
            <param name="TimeUnits5">The #5 component of this measurements units.</param>
            <param name="TimeUnits6">The #6 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PowerBaseUnits})~Towel.Measurements.Power{`0}">
            <summary>Converts a ValueTuple to a Power measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Power measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Power`1.Add(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Adds two Power measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Addition(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Adds two Power measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Add(Towel.Measurements.Power{`0})">
            <summary>Adds two Power measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Subtract(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Subtracts two Power measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Subtraction(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Subtracts two Power measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Subtract(Towel.Measurements.Power{`0})">
            <summary>Subtracts two Power measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Multiply(Towel.Measurements.Power{`0},`0)">
            <summary>Multiplies an Power by a scalar numeric value.</summary>
            <param name="a">The Power measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Multiply(`0,Towel.Measurements.Power{`0})">
            <summary>Multiplies an Power by a scalar numeric value.</summary>
            <param name="a">The Power measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Multiply(Towel.Measurements.Power{`0},`0)">
            <summary>Multiplies an Power by a scalar numeric value.</summary>
            <param name="a">The Power measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Multiply(`0,Towel.Measurements.Power{`0})">
            <summary>Multiplies an Power by a scalar numeric value.</summary>
            <param name="a">The Power measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Add(`0)">
            <summary>Multiplies an Power by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Multiply(Towel.Measurements.Power{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Power by Time resulting in Energy.</summary>
            <param name="a">The Power to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Multiply(Towel.Measurements.Power{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Power by Time resulting in Energy.</summary>
            <param name="a">The Power to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies Power by Time resulting in Energy.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Divides an Power measurement by another Power measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},`0)">
            <summary>Divides this Power measurement by a numaric scalar value.</summary>
            <param name="a">The Power measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},`0)">
            <summary>Divides this Power measurement by a numaric scalar value.</summary>
            <param name="a">The Power measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(`0)">
            <summary>Divides this Power measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Divides an Power measurement by another Power measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0})">
            <summary>Divides an Power measurement by another Power measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Power by Acceleration resulting in LinearMassFlow.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Power by Acceleration resulting in LinearMassFlow.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Power by Acceleration resulting in LinearMassFlow.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The LinearMassFlow result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.Force{`0})">
            <summary>Divides Power by Force resulting in Speed.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.Force{`0})">
            <summary>Divides Power by Force resulting in Speed.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Force to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Force{`0})">
            <summary>Divides Power by Force resulting in Speed.</summary>
            <param name="b">The Force to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Power by LinearMassFlow resulting in Acceleration.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Power by LinearMassFlow resulting in Acceleration.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Divides Power by LinearMassFlow resulting in Acceleration.</summary>
            <param name="b">The LinearMassFlow to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Power by Pressure resulting in VolumeRate.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides Power by Pressure resulting in VolumeRate.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Pressure to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Pressure{`0})">
            <summary>Divides Power by Pressure resulting in VolumeRate.</summary>
            <param name="b">The Pressure to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Power by Speed resulting in Force.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides Power by Speed resulting in Force.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides Power by Speed resulting in Force.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The Force result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.Power{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Power by VolumeRate resulting in Pressure.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Division(Towel.Measurements.Power{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Power by VolumeRate resulting in Pressure.</summary>
            <param name="a">The Power to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Divide(Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Power by VolumeRate resulting in Pressure.</summary>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Pressure result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.LessThan(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than another Power measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_LessThan(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than another Power measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.LessThan(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than another Power measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.GreaterThan(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than another Power measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_GreaterThan(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than another Power measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.GreaterThan(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than another Power measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.LessThanOrEqual(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than or equal to another Power measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_LessThanOrEqual(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than or equal to another Power measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.LessThanOrEqual(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is less than or equal to another Power measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.GreaterThanOrEqual(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than or equal to another Power measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_GreaterThanOrEqual(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than or equal to another Power measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.GreaterThanOrEqual(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is greater than or equal to another Power measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Equal(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is equal to another Power measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Equality(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is equal to another Power measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Equal(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is equal to another Power measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.NotEqual(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is not equal to another Power measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.op_Inequality(Towel.Measurements.Power{`0},Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is not equal to another Power measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.NotEqual(Towel.Measurements.Power{`0})">
            <summary>Determines if an Power measurement is not equal to another Power measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.ToString">
            <summary>Converts the Power measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Power`1.GetHashCode">
            <summary>Base hashing function for Power measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Pressure`1">
            <summary>Pressure measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Convert(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Pressure measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromMassUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromTimeUnits3">The current units of the measurement.</param>
            <param name="fromTimeUnits4">The current units of the measurement.</param>
            <param name="toMassUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toTimeUnits3">The desired units of the measurement.</param>
            <param name="toTimeUnits4">The desired units of the measurement.</param>
            <returns>The Pressure measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PressureBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.PressureBaseUnits)">
            <summary>Converts a Pressure measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Pressure measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Pressure measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PressureBaseUnits)">
            <summary>Constructs an Pressure with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Pressure.</param>
            <param name="units">The units of the Pressure.</param>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.#ctor(`0,Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Pressure with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Pressure.</param>
            <param name="MassUnits1">The units of the Pressure.</param>
            <param name="LengthUnits2">The units of the Pressure.</param>
            <param name="TimeUnits3">The units of the Pressure.</param>
            <param name="TimeUnits4">The units of the Pressure.</param>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.MassUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.TimeUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.TimeUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.PressureBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Pressure`1.Item(Towel.Measurements.Mass.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="MassUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="TimeUnits3">The #3 component of this measurements units.</param>
            <param name="TimeUnits4">The #4 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.PressureBaseUnits})~Towel.Measurements.Pressure{`0}">
            <summary>Converts a ValueTuple to a Pressure measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Pressure measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Add(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Adds two Pressure measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Addition(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Adds two Pressure measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Add(Towel.Measurements.Pressure{`0})">
            <summary>Adds two Pressure measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Subtract(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Subtracts two Pressure measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Subtraction(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Subtracts two Pressure measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Subtract(Towel.Measurements.Pressure{`0})">
            <summary>Subtracts two Pressure measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Pressure{`0},`0)">
            <summary>Multiplies an Pressure by a scalar numeric value.</summary>
            <param name="a">The Pressure measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(`0,Towel.Measurements.Pressure{`0})">
            <summary>Multiplies an Pressure by a scalar numeric value.</summary>
            <param name="a">The Pressure measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(Towel.Measurements.Pressure{`0},`0)">
            <summary>Multiplies an Pressure by a scalar numeric value.</summary>
            <param name="a">The Pressure measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(`0,Towel.Measurements.Pressure{`0})">
            <summary>Multiplies an Pressure by a scalar numeric value.</summary>
            <param name="a">The Pressure measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Add(`0)">
            <summary>Multiplies an Pressure by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Pressure by Area resulting in Force.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Pressure by Area resulting in Force.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies Pressure by Area resulting in Force.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Pressure by TimeArea resulting in LinearDensity.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Pressure by TimeArea resulting in LinearDensity.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.TimeArea{`0})">
            <summary>Mulitplies Pressure by TimeArea resulting in LinearDensity.</summary>
            <param name="b">The TimeArea to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Pressure by Volume resulting in Energy.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Pressure by Volume resulting in Energy.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Volume{`0})">
            <summary>Mulitplies Pressure by Volume resulting in Energy.</summary>
            <param name="b">The Volume to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Pressure by VolumeRate resulting in Power.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Multiply(Towel.Measurements.Pressure{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Pressure by VolumeRate resulting in Power.</summary>
            <param name="a">The Pressure to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Multiply(Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Pressure by VolumeRate resulting in Power.</summary>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides an Pressure measurement by another Pressure measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Pressure{`0},`0)">
            <summary>Divides this Pressure measurement by a numaric scalar value.</summary>
            <param name="a">The Pressure measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Division(Towel.Measurements.Pressure{`0},`0)">
            <summary>Divides this Pressure measurement by a numaric scalar value.</summary>
            <param name="a">The Pressure measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(`0)">
            <summary>Divides this Pressure measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Division(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Divides an Pressure measurement by another Pressure measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Pressure{`0})">
            <summary>Divides an Pressure measurement by another Pressure measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Pressure{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Pressure by Acceleration resulting in AreaDensity.</summary>
            <param name="a">The Pressure to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Division(Towel.Measurements.Pressure{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Pressure by Acceleration resulting in AreaDensity.</summary>
            <param name="a">The Pressure to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Pressure by Acceleration resulting in AreaDensity.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The AreaDensity result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.Pressure{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Pressure by AreaDensity resulting in Acceleration.</summary>
            <param name="a">The Pressure to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Division(Towel.Measurements.Pressure{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Pressure by AreaDensity resulting in Acceleration.</summary>
            <param name="a">The Pressure to be divided.</param>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Divide(Towel.Measurements.AreaDensity{`0})">
            <summary>Divides Pressure by AreaDensity resulting in Acceleration.</summary>
            <param name="b">The AreaDensity to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.LessThan(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than another Pressure measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_LessThan(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than another Pressure measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.LessThan(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than another Pressure measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.GreaterThan(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than another Pressure measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_GreaterThan(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than another Pressure measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.GreaterThan(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than another Pressure measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.LessThanOrEqual(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than or equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_LessThanOrEqual(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than or equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.LessThanOrEqual(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is less than or equal to another Pressure measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.GreaterThanOrEqual(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than or equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_GreaterThanOrEqual(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than or equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.GreaterThanOrEqual(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is greater than or equal to another Pressure measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Equal(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Equality(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Equal(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is equal to another Pressure measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.NotEqual(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is not equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.op_Inequality(Towel.Measurements.Pressure{`0},Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is not equal to another Pressure measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.NotEqual(Towel.Measurements.Pressure{`0})">
            <summary>Determines if an Pressure measurement is not equal to another Pressure measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.ToString">
            <summary>Converts the Pressure measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Pressure`1.GetHashCode">
            <summary>Base hashing function for Pressure measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Speed`1">
            <summary>Speed measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Speed measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <returns>The Speed measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.SpeedBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.SpeedBaseUnits)">
            <summary>Converts a Speed measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Speed measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Speed measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.SpeedBaseUnits)">
            <summary>Constructs an Speed with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Speed.</param>
            <param name="units">The units of the Speed.</param>
        </member>
        <member name="M:Towel.Measurements.Speed`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an Speed with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Speed.</param>
            <param name="LengthUnits1">The units of the Speed.</param>
            <param name="TimeUnits2">The units of the Speed.</param>
        </member>
        <member name="P:Towel.Measurements.Speed`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Speed`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Speed`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.SpeedBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Speed`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.SpeedBaseUnits})~Towel.Measurements.Speed{`0}">
            <summary>Converts a ValueTuple to a Speed measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Speed measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Add(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Adds two Speed measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Addition(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Adds two Speed measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Add(Towel.Measurements.Speed{`0})">
            <summary>Adds two Speed measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Subtract(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Subtracts two Speed measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Subtraction(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Subtracts two Speed measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Subtract(Towel.Measurements.Speed{`0})">
            <summary>Subtracts two Speed measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},`0)">
            <summary>Multiplies an Speed by a scalar numeric value.</summary>
            <param name="a">The Speed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(`0,Towel.Measurements.Speed{`0})">
            <summary>Multiplies an Speed by a scalar numeric value.</summary>
            <param name="a">The Speed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},`0)">
            <summary>Multiplies an Speed by a scalar numeric value.</summary>
            <param name="a">The Speed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(`0,Towel.Measurements.Speed{`0})">
            <summary>Multiplies an Speed by a scalar numeric value.</summary>
            <param name="a">The Speed measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Add(`0)">
            <summary>Multiplies an Speed by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Speed by Area resulting in VolumeRate.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Area{`0})">
            <summary>Mulitplies Speed by Area resulting in VolumeRate.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Area to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Area{`0})">
            <summary>Mulitplies Speed by Area resulting in VolumeRate.</summary>
            <param name="b">The Area to multiply by.</param>
            <returns>The VolumeRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Speed by Force resulting in Power.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Speed by Force resulting in Power.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Force{`0})">
            <summary>Mulitplies Speed by Force resulting in Power.</summary>
            <param name="b">The Force to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Speed by LinearDensity resulting in MassRate.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Speed by LinearDensity resulting in MassRate.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.LinearDensity{`0})">
            <summary>Mulitplies Speed by LinearDensity resulting in MassRate.</summary>
            <param name="b">The LinearDensity to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Speed by LinearMassFlow resulting in Energy.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Speed by LinearMassFlow resulting in Energy.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Speed by LinearMassFlow resulting in Energy.</summary>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Speed by Mass resulting in LinearMassFlow.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Speed by Mass resulting in LinearMassFlow.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Mass{`0})">
            <summary>Mulitplies Speed by Mass resulting in LinearMassFlow.</summary>
            <param name="b">The Mass to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Speed by MassRate resulting in Force.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Speed by MassRate resulting in Force.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Speed by MassRate resulting in Force.</summary>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Force result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Speed by Time resulting in Length.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Multiply(Towel.Measurements.Speed{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Speed by Time resulting in Length.</summary>
            <param name="a">The Speed to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies Speed by Time resulting in Length.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides an Speed measurement by another Speed measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Speed{`0},`0)">
            <summary>Divides this Speed measurement by a numaric scalar value.</summary>
            <param name="a">The Speed measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Division(Towel.Measurements.Speed{`0},`0)">
            <summary>Divides this Speed measurement by a numaric scalar value.</summary>
            <param name="a">The Speed measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(`0)">
            <summary>Divides this Speed measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Division(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides an Speed measurement by another Speed measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides an Speed measurement by another Speed measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Speed{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Speed by Acceleration resulting in Time.</summary>
            <param name="a">The Speed to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Division(Towel.Measurements.Speed{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Divides Speed by Acceleration resulting in Time.</summary>
            <param name="a">The Speed to be divided.</param>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Acceleration{`0})">
            <summary>Divides Speed by Acceleration resulting in Time.</summary>
            <param name="b">The Acceleration to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Speed{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Speed by Time resulting in Acceleration.</summary>
            <param name="a">The Speed to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Division(Towel.Measurements.Speed{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Speed by Time resulting in Acceleration.</summary>
            <param name="a">The Speed to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Speed by Time resulting in Acceleration.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The Acceleration result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.LessThan(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than another Speed measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_LessThan(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than another Speed measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.LessThan(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than another Speed measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.GreaterThan(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than another Speed measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_GreaterThan(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than another Speed measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.GreaterThan(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than another Speed measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.LessThanOrEqual(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than or equal to another Speed measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_LessThanOrEqual(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than or equal to another Speed measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.LessThanOrEqual(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is less than or equal to another Speed measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.GreaterThanOrEqual(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than or equal to another Speed measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_GreaterThanOrEqual(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than or equal to another Speed measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.GreaterThanOrEqual(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is greater than or equal to another Speed measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Equal(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is equal to another Speed measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Equality(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is equal to another Speed measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Equal(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is equal to another Speed measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.NotEqual(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is not equal to another Speed measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.op_Inequality(Towel.Measurements.Speed{`0},Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is not equal to another Speed measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.NotEqual(Towel.Measurements.Speed{`0})">
            <summary>Determines if an Speed measurement is not equal to another Speed measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.ToString">
            <summary>Converts the Speed measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Speed`1.GetHashCode">
            <summary>Base hashing function for Speed measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Tempurature`1">
            <summary>Tempurature measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Convert(`0,Towel.Measurements.Tempurature.Units,Towel.Measurements.Tempurature.Units)">
            <summary>Converts a Tempurature measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromTempuratureUnits1">The current units of the measurement.</param>
            <param name="toTempuratureUnits1">The desired units of the measurement.</param>
            <returns>The Tempurature measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TempuratureUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.TempuratureUnits)">
            <summary>Converts a Tempurature measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Tempurature measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Tempurature measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TempuratureUnits)">
            <summary>Constructs an Tempurature with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Tempurature.</param>
            <param name="units">The units of the Tempurature.</param>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.#ctor(`0,Towel.Measurements.Tempurature.Units)">
            <summary>Constructs an Tempurature with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Tempurature.</param>
            <param name="TempuratureUnits1">The units of the Tempurature.</param>
        </member>
        <member name="P:Towel.Measurements.Tempurature`1.TempuratureUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Tempurature`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.TempuratureUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Tempurature`1.Item(Towel.Measurements.Tempurature.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="TempuratureUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TempuratureUnits})~Towel.Measurements.Tempurature{`0}">
            <summary>Converts a ValueTuple to a Tempurature measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Tempurature measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Add(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Adds two Tempurature measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Addition(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Adds two Tempurature measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Add(Towel.Measurements.Tempurature{`0})">
            <summary>Adds two Tempurature measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Subtract(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Subtracts two Tempurature measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Subtraction(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Subtracts two Tempurature measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Subtract(Towel.Measurements.Tempurature{`0})">
            <summary>Subtracts two Tempurature measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Multiply(Towel.Measurements.Tempurature{`0},`0)">
            <summary>Multiplies an Tempurature by a scalar numeric value.</summary>
            <param name="a">The Tempurature measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Multiply(`0,Towel.Measurements.Tempurature{`0})">
            <summary>Multiplies an Tempurature by a scalar numeric value.</summary>
            <param name="a">The Tempurature measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Multiply(Towel.Measurements.Tempurature{`0},`0)">
            <summary>Multiplies an Tempurature by a scalar numeric value.</summary>
            <param name="a">The Tempurature measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Multiply(`0,Towel.Measurements.Tempurature{`0})">
            <summary>Multiplies an Tempurature by a scalar numeric value.</summary>
            <param name="a">The Tempurature measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Add(`0)">
            <summary>Multiplies an Tempurature by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Divide(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Divides an Tempurature measurement by another Tempurature measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Divide(Towel.Measurements.Tempurature{`0},`0)">
            <summary>Divides this Tempurature measurement by a numaric scalar value.</summary>
            <param name="a">The Tempurature measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Division(Towel.Measurements.Tempurature{`0},`0)">
            <summary>Divides this Tempurature measurement by a numaric scalar value.</summary>
            <param name="a">The Tempurature measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Divide(`0)">
            <summary>Divides this Tempurature measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Division(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Divides an Tempurature measurement by another Tempurature measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Divide(Towel.Measurements.Tempurature{`0})">
            <summary>Divides an Tempurature measurement by another Tempurature measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.LessThan(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than another Tempurature measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_LessThan(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than another Tempurature measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.LessThan(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than another Tempurature measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.GreaterThan(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than another Tempurature measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_GreaterThan(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than another Tempurature measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.GreaterThan(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than another Tempurature measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.LessThanOrEqual(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than or equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_LessThanOrEqual(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than or equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.LessThanOrEqual(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is less than or equal to another Tempurature measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.GreaterThanOrEqual(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than or equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_GreaterThanOrEqual(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than or equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.GreaterThanOrEqual(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is greater than or equal to another Tempurature measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Equal(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Equality(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Equal(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is equal to another Tempurature measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.NotEqual(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is not equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.op_Inequality(Towel.Measurements.Tempurature{`0},Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is not equal to another Tempurature measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.NotEqual(Towel.Measurements.Tempurature{`0})">
            <summary>Determines if an Tempurature measurement is not equal to another Tempurature measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.ToString">
            <summary>Converts the Tempurature measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Tempurature`1.GetHashCode">
            <summary>Base hashing function for Tempurature measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Time`1">
            <summary>Time measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Time`1.Convert(`0,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a Time measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromTimeUnits1">The current units of the measurement.</param>
            <param name="toTimeUnits1">The desired units of the measurement.</param>
            <returns>The Time measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits)">
            <summary>Converts a Time measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Time measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Time measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits)">
            <summary>Constructs an Time with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Time.</param>
            <param name="units">The units of the Time.</param>
        </member>
        <member name="M:Towel.Measurements.Time`1.#ctor(`0,Towel.Measurements.Time.Units)">
            <summary>Constructs an Time with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Time.</param>
            <param name="TimeUnits1">The units of the Time.</param>
        </member>
        <member name="P:Towel.Measurements.Time`1.TimeUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Time`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Time`1.Item(Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="TimeUnits1">The #1 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeUnits})~Towel.Measurements.Time{`0}">
            <summary>Converts a ValueTuple to a Time measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Time measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Time`1.Add(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Adds two Time measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Addition(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Adds two Time measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Add(Towel.Measurements.Time{`0})">
            <summary>Adds two Time measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Subtract(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Subtracts two Time measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Subtraction(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Subtracts two Time measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Subtract(Towel.Measurements.Time{`0})">
            <summary>Subtracts two Time measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},`0)">
            <summary>Multiplies an Time by a scalar numeric value.</summary>
            <param name="a">The Time measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(`0,Towel.Measurements.Time{`0})">
            <summary>Multiplies an Time by a scalar numeric value.</summary>
            <param name="a">The Time measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},`0)">
            <summary>Multiplies an Time by a scalar numeric value.</summary>
            <param name="a">The Time measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(`0,Towel.Measurements.Time{`0})">
            <summary>Multiplies an Time by a scalar numeric value.</summary>
            <param name="a">The Time measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Add(`0)">
            <summary>Multiplies an Time by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Time by Acceleration resulting in Speed.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Time by Acceleration resulting in Speed.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies Time by Acceleration resulting in Speed.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Speed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies Time by AngularAcceleration resulting in AngularSpeed.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies Time by AngularAcceleration resulting in AngularSpeed.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies Time by AngularAcceleration resulting in AngularSpeed.</summary>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The AngularSpeed result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Mulitplies Time by AngularSpeed resulting in Angle.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The AngularSpeed to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.AngularSpeed{`0})">
            <summary>Mulitplies Time by AngularSpeed resulting in Angle.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The AngularSpeed to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.AngularSpeed{`0})">
            <summary>Mulitplies Time by AngularSpeed resulting in Angle.</summary>
            <param name="b">The AngularSpeed to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Mulitplies Time by ElectricCurrent resulting in ElectricCharge.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The ElectricCurrent to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.ElectricCurrent{`0})">
            <summary>Mulitplies Time by ElectricCurrent resulting in ElectricCharge.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The ElectricCurrent to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.ElectricCurrent{`0})">
            <summary>Mulitplies Time by ElectricCurrent resulting in ElectricCharge.</summary>
            <param name="b">The ElectricCurrent to multiply by.</param>
            <returns>The ElectricCharge result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Time by Force resulting in LinearMassFlow.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies Time by Force resulting in LinearMassFlow.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Force{`0})">
            <summary>Mulitplies Time by Force resulting in LinearMassFlow.</summary>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Time by LinearMassFlow resulting in LinearMass.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Time by LinearMassFlow resulting in LinearMass.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.LinearMassFlow{`0})">
            <summary>Mulitplies Time by LinearMassFlow resulting in LinearMass.</summary>
            <param name="b">The LinearMassFlow to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Time by MassRate resulting in Mass.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Time by MassRate resulting in Mass.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.MassRate{`0})">
            <summary>Mulitplies Time by MassRate resulting in Mass.</summary>
            <param name="b">The MassRate to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Power{`0})">
            <summary>Mulitplies Time by Power resulting in Energy.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Power to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Power{`0})">
            <summary>Mulitplies Time by Power resulting in Energy.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Power to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Power{`0})">
            <summary>Mulitplies Time by Power resulting in Energy.</summary>
            <param name="b">The Power to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Time by Speed resulting in Length.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Time by Speed resulting in Length.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Speed{`0})">
            <summary>Mulitplies Time by Speed resulting in Length.</summary>
            <param name="b">The Speed to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Time by Time resulting in TimeArea.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The TimeArea result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies Time by Time resulting in TimeArea.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The TimeArea result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies Time by Time resulting in TimeArea.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The TimeArea result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.Time{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Time by VolumeRate resulting in Volume.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Multiply(Towel.Measurements.Time{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Time by VolumeRate resulting in Volume.</summary>
            <param name="a">The Time to be multiplied.</param>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Multiply(Towel.Measurements.VolumeRate{`0})">
            <summary>Mulitplies Time by VolumeRate resulting in Volume.</summary>
            <param name="b">The VolumeRate to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Divide(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Divides an Time measurement by another Time measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Divide(Towel.Measurements.Time{`0},`0)">
            <summary>Divides this Time measurement by a numaric scalar value.</summary>
            <param name="a">The Time measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Division(Towel.Measurements.Time{`0},`0)">
            <summary>Divides this Time measurement by a numaric scalar value.</summary>
            <param name="a">The Time measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Divide(`0)">
            <summary>Divides this Time measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Division(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Divides an Time measurement by another Time measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides an Time measurement by another Time measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.LessThan(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than another Time measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_LessThan(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than another Time measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.LessThan(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than another Time measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.GreaterThan(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than another Time measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_GreaterThan(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than another Time measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.GreaterThan(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than another Time measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.LessThanOrEqual(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than or equal to another Time measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_LessThanOrEqual(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than or equal to another Time measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.LessThanOrEqual(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is less than or equal to another Time measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.GreaterThanOrEqual(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than or equal to another Time measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_GreaterThanOrEqual(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than or equal to another Time measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.GreaterThanOrEqual(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is greater than or equal to another Time measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Equal(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is equal to another Time measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Equality(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is equal to another Time measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Equal(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is equal to another Time measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.NotEqual(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is not equal to another Time measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.op_Inequality(Towel.Measurements.Time{`0},Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is not equal to another Time measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.NotEqual(Towel.Measurements.Time{`0})">
            <summary>Determines if an Time measurement is not equal to another Time measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.ToString">
            <summary>Converts the Time measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Time`1.GetHashCode">
            <summary>Base hashing function for Time measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.TimeArea`1">
            <summary>TimeArea measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Convert(`0,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a TimeArea measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromTimeUnits1">The current units of the measurement.</param>
            <param name="fromTimeUnits2">The current units of the measurement.</param>
            <param name="toTimeUnits1">The desired units of the measurement.</param>
            <param name="toTimeUnits2">The desired units of the measurement.</param>
            <returns>The TimeArea measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeAreaBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeAreaBaseUnits)">
            <summary>Converts a TimeArea measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The TimeArea measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a TimeArea measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeAreaBaseUnits)">
            <summary>Constructs an TimeArea with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the TimeArea.</param>
            <param name="units">The units of the TimeArea.</param>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.#ctor(`0,Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an TimeArea with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the TimeArea.</param>
            <param name="TimeUnits1">The units of the TimeArea.</param>
            <param name="TimeUnits2">The units of the TimeArea.</param>
        </member>
        <member name="P:Towel.Measurements.TimeArea`1.TimeUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.TimeArea`1.TimeUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.TimeArea`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeAreaBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.TimeArea`1.Item(Towel.Measurements.Time.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="TimeUnits1">The #1 component of this measurements units.</param>
            <param name="TimeUnits2">The #2 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.TimeAreaBaseUnits})~Towel.Measurements.TimeArea{`0}">
            <summary>Converts a ValueTuple to a TimeArea measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a TimeArea measurement.</param>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Add(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Adds two TimeArea measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Addition(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Adds two TimeArea measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Add(Towel.Measurements.TimeArea{`0})">
            <summary>Adds two TimeArea measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Subtract(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Subtracts two TimeArea measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Subtraction(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Subtracts two TimeArea measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Subtract(Towel.Measurements.TimeArea{`0})">
            <summary>Subtracts two TimeArea measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.TimeArea{`0},`0)">
            <summary>Multiplies an TimeArea by a scalar numeric value.</summary>
            <param name="a">The TimeArea measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(`0,Towel.Measurements.TimeArea{`0})">
            <summary>Multiplies an TimeArea by a scalar numeric value.</summary>
            <param name="a">The TimeArea measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(Towel.Measurements.TimeArea{`0},`0)">
            <summary>Multiplies an TimeArea by a scalar numeric value.</summary>
            <param name="a">The TimeArea measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(`0,Towel.Measurements.TimeArea{`0})">
            <summary>Multiplies an TimeArea by a scalar numeric value.</summary>
            <param name="a">The TimeArea measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Add(`0)">
            <summary>Multiplies an TimeArea by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies TimeArea by Acceleration resulting in Length.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies TimeArea by Acceleration resulting in Length.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.Acceleration{`0})">
            <summary>Mulitplies TimeArea by Acceleration resulting in Length.</summary>
            <param name="b">The Acceleration to multiply by.</param>
            <returns>The Length result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies TimeArea by AngularAcceleration resulting in Angle.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies TimeArea by AngularAcceleration resulting in Angle.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.AngularAcceleration{`0})">
            <summary>Mulitplies TimeArea by AngularAcceleration resulting in Angle.</summary>
            <param name="b">The AngularAcceleration to multiply by.</param>
            <returns>The Angle result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies TimeArea by Force resulting in LinearMass.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Force{`0})">
            <summary>Mulitplies TimeArea by Force resulting in LinearMass.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.Force{`0})">
            <summary>Mulitplies TimeArea by Force resulting in LinearMass.</summary>
            <param name="b">The Force to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies TimeArea by Pressure resulting in LinearDensity.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Multiply(Towel.Measurements.TimeArea{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies TimeArea by Pressure resulting in LinearDensity.</summary>
            <param name="a">The TimeArea to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Multiply(Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies TimeArea by Pressure resulting in LinearDensity.</summary>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The LinearDensity result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides an TimeArea measurement by another TimeArea measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(Towel.Measurements.TimeArea{`0},`0)">
            <summary>Divides this TimeArea measurement by a numaric scalar value.</summary>
            <param name="a">The TimeArea measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Division(Towel.Measurements.TimeArea{`0},`0)">
            <summary>Divides this TimeArea measurement by a numaric scalar value.</summary>
            <param name="a">The TimeArea measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(`0)">
            <summary>Divides this TimeArea measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Division(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Divides an TimeArea measurement by another TimeArea measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(Towel.Measurements.TimeArea{`0})">
            <summary>Divides an TimeArea measurement by another TimeArea measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(Towel.Measurements.TimeArea{`0},Towel.Measurements.Time{`0})">
            <summary>Divides TimeArea by Time resulting in Time.</summary>
            <param name="a">The TimeArea to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Division(Towel.Measurements.TimeArea{`0},Towel.Measurements.Time{`0})">
            <summary>Divides TimeArea by Time resulting in Time.</summary>
            <param name="a">The TimeArea to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides TimeArea by Time resulting in Time.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.LessThan(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than another TimeArea measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_LessThan(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than another TimeArea measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.LessThan(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than another TimeArea measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.GreaterThan(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than another TimeArea measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_GreaterThan(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than another TimeArea measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.GreaterThan(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than another TimeArea measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.LessThanOrEqual(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than or equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_LessThanOrEqual(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than or equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.LessThanOrEqual(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is less than or equal to another TimeArea measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.GreaterThanOrEqual(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than or equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_GreaterThanOrEqual(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than or equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.GreaterThanOrEqual(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is greater than or equal to another TimeArea measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Equal(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Equality(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Equal(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is equal to another TimeArea measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.NotEqual(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is not equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.op_Inequality(Towel.Measurements.TimeArea{`0},Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is not equal to another TimeArea measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.NotEqual(Towel.Measurements.TimeArea{`0})">
            <summary>Determines if an TimeArea measurement is not equal to another TimeArea measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.ToString">
            <summary>Converts the TimeArea measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.TimeArea`1.GetHashCode">
            <summary>Base hashing function for TimeArea measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Volume`1">
            <summary>Volume measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Converts a Volume measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <returns>The Volume measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeBaseUnits)">
            <summary>Converts a Volume measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The Volume measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a Volume measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeBaseUnits)">
            <summary>Constructs an Volume with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Volume.</param>
            <param name="units">The units of the Volume.</param>
        </member>
        <member name="M:Towel.Measurements.Volume`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Constructs an Volume with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the Volume.</param>
            <param name="LengthUnits1">The units of the Volume.</param>
            <param name="LengthUnits2">The units of the Volume.</param>
            <param name="LengthUnits3">The units of the Volume.</param>
        </member>
        <member name="P:Towel.Measurements.Volume`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Volume`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Volume`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.Volume`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.Volume`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeBaseUnits})~Towel.Measurements.Volume{`0}">
            <summary>Converts a ValueTuple to a Volume measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a Volume measurement.</param>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Add(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Adds two Volume measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Addition(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Adds two Volume measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Add(Towel.Measurements.Volume{`0})">
            <summary>Adds two Volume measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Subtract(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Subtracts two Volume measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Subtraction(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Subtracts two Volume measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Subtract(Towel.Measurements.Volume{`0})">
            <summary>Subtracts two Volume measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Volume{`0},`0)">
            <summary>Multiplies an Volume by a scalar numeric value.</summary>
            <param name="a">The Volume measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(`0,Towel.Measurements.Volume{`0})">
            <summary>Multiplies an Volume by a scalar numeric value.</summary>
            <param name="a">The Volume measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Multiply(Towel.Measurements.Volume{`0},`0)">
            <summary>Multiplies an Volume by a scalar numeric value.</summary>
            <param name="a">The Volume measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Multiply(`0,Towel.Measurements.Volume{`0})">
            <summary>Multiplies an Volume by a scalar numeric value.</summary>
            <param name="a">The Volume measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Add(`0)">
            <summary>Multiplies an Volume by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Volume by AreaDensity resulting in LinearMass.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Volume by AreaDensity resulting in LinearMass.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies Volume by AreaDensity resulting in LinearMass.</summary>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Volume by Density resulting in Mass.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies Volume by Density resulting in Mass.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Density{`0})">
            <summary>Mulitplies Volume by Density resulting in Mass.</summary>
            <param name="b">The Density to multiply by.</param>
            <returns>The Mass result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Volume by Pressure resulting in Energy.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Multiply(Towel.Measurements.Volume{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Volume by Pressure resulting in Energy.</summary>
            <param name="a">The Volume to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Multiply(Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies Volume by Pressure resulting in Energy.</summary>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Energy result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides an Volume measurement by another Volume measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},`0)">
            <summary>Divides this Volume measurement by a numaric scalar value.</summary>
            <param name="a">The Volume measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},`0)">
            <summary>Divides this Volume measurement by a numaric scalar value.</summary>
            <param name="a">The Volume measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(`0)">
            <summary>Divides this Volume measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Divides an Volume measurement by another Volume measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0})">
            <summary>Divides an Volume measurement by another Volume measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Volume by Area resulting in Length.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},Towel.Measurements.Area{`0})">
            <summary>Divides Volume by Area resulting in Length.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides Volume by Area resulting in Length.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The Length result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Volume by Length resulting in Area.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},Towel.Measurements.Length{`0})">
            <summary>Divides Volume by Length resulting in Area.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Length to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Length{`0})">
            <summary>Divides Volume by Length resulting in Area.</summary>
            <param name="b">The Length to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Volume by Time resulting in VolumeRate.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},Towel.Measurements.Time{`0})">
            <summary>Divides Volume by Time resulting in VolumeRate.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The Time to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Time{`0})">
            <summary>Divides Volume by Time resulting in VolumeRate.</summary>
            <param name="b">The Time to divide by.</param>
            <returns>The VolumeRate result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.Volume{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Volume by VolumeRate resulting in Time.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Division(Towel.Measurements.Volume{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Volume by VolumeRate resulting in Time.</summary>
            <param name="a">The Volume to be divided.</param>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Divide(Towel.Measurements.VolumeRate{`0})">
            <summary>Divides Volume by VolumeRate resulting in Time.</summary>
            <param name="b">The VolumeRate to divide by.</param>
            <returns>The Time result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.LessThan(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than another Volume measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_LessThan(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than another Volume measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.LessThan(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than another Volume measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.GreaterThan(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than another Volume measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_GreaterThan(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than another Volume measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.GreaterThan(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than another Volume measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.LessThanOrEqual(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than or equal to another Volume measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_LessThanOrEqual(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than or equal to another Volume measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.LessThanOrEqual(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is less than or equal to another Volume measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.GreaterThanOrEqual(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than or equal to another Volume measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_GreaterThanOrEqual(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than or equal to another Volume measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.GreaterThanOrEqual(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is greater than or equal to another Volume measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Equal(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is equal to another Volume measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Equality(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is equal to another Volume measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Equal(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is equal to another Volume measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.NotEqual(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is not equal to another Volume measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.op_Inequality(Towel.Measurements.Volume{`0},Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is not equal to another Volume measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.NotEqual(Towel.Measurements.Volume{`0})">
            <summary>Determines if an Volume measurement is not equal to another Volume measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.ToString">
            <summary>Converts the Volume measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.Volume`1.GetHashCode">
            <summary>Base hashing function for Volume measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.VolumeRate`1">
            <summary>VolumeRate measurement with a value and the units.</summary>
            <typeparam name="T">The generic numeric type used to store the value of the measurement.</typeparam>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Convert(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Converts a VolumeRate measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="fromLengthUnits1">The current units of the measurement.</param>
            <param name="fromLengthUnits2">The current units of the measurement.</param>
            <param name="fromLengthUnits3">The current units of the measurement.</param>
            <param name="fromTimeUnits4">The current units of the measurement.</param>
            <param name="toLengthUnits1">The desired units of the measurement.</param>
            <param name="toLengthUnits2">The desired units of the measurement.</param>
            <param name="toLengthUnits3">The desired units of the measurement.</param>
            <param name="toTimeUnits4">The desired units of the measurement.</param>
            <returns>The VolumeRate measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Convert(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeRateBaseUnits,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeRateBaseUnits)">
            <summary>Converts a VolumeRate measurement from units to another.</summary>
            <param name="value">The value to convert the units of.</param>
            <param name="from">The current units of the measurement.</param>
            <param name="to">The desired units of the measurement.</param>
            <returns>The VolumeRate measurement converted into the desired units.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.TryParse(System.String,System.Func{System.String,System.ValueTuple{System.Boolean,`0}})">
            <summary>Parses a VolumeRate measurement string.</summary>
            <param name="string">The string to be parsed.</param>
            <param name="tryParse">The tryparse function for the generic type.</param>
            <returns>True if the parse was successful or false if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.#ctor(`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeRateBaseUnits)">
            <summary>Constructs an VolumeRate with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the VolumeRate.</param>
            <param name="units">The units of the VolumeRate.</param>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.#ctor(`0,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Constructs an VolumeRate with the measurement value and units.</summary>
            <param name="measurement">The measurement value of the VolumeRate.</param>
            <param name="LengthUnits1">The units of the VolumeRate.</param>
            <param name="LengthUnits2">The units of the VolumeRate.</param>
            <param name="LengthUnits3">The units of the VolumeRate.</param>
            <param name="TimeUnits4">The units of the VolumeRate.</param>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.LengthUnits1">
            <summary>The #1 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.LengthUnits2">
            <summary>The #2 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.LengthUnits3">
            <summary>The #3 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.TimeUnits4">
            <summary>The #4 component of this measurements units.</summary>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.Item(Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeRateBaseUnits)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="units">The units to get the measurement in.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="P:Towel.Measurements.VolumeRate`1.Item(Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Length.Units,Towel.Measurements.Time.Units)">
            <summary>Gets the measurement in the specified units.</summary>
            <param name="LengthUnits1">The #1 component of this measurements units.</param>
            <param name="LengthUnits2">The #2 component of this measurements units.</param>
            <param name="LengthUnits3">The #3 component of this measurements units.</param>
            <param name="TimeUnits4">The #4 component of this measurements units.</param>
            <returns>The measurement value in the specified units.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Implicit(System.ValueTuple{`0,Towel.Measurements.MeasurementUnitsSyntaxTypes.VolumeRateBaseUnits})~Towel.Measurements.VolumeRate{`0}">
            <summary>Converts a ValueTuple to a VolumeRate measurement.</summary>
            <param name="valueTuple">The ValueTuple to converted into a VolumeRate measurement.</param>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Add(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Adds two VolumeRate measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Addition(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Adds two VolumeRate measurements.</summary>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Add(Towel.Measurements.VolumeRate{`0})">
            <summary>Adds two VolumeRate measurements.</summary>
            <param name="b">The second operand of the addition.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Subtract(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Subtracts two VolumeRate measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Subtraction(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Subtracts two VolumeRate measurements.</summary>
            <param name="a">The first operand of the subtraction.</param>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Subtract(Towel.Measurements.VolumeRate{`0})">
            <summary>Subtracts two VolumeRate measurements.</summary>
            <param name="b">The second operand of the subtraction.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.VolumeRate{`0},`0)">
            <summary>Multiplies an VolumeRate by a scalar numeric value.</summary>
            <param name="a">The VolumeRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(`0,Towel.Measurements.VolumeRate{`0})">
            <summary>Multiplies an VolumeRate by a scalar numeric value.</summary>
            <param name="a">The VolumeRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(Towel.Measurements.VolumeRate{`0},`0)">
            <summary>Multiplies an VolumeRate by a scalar numeric value.</summary>
            <param name="a">The VolumeRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(`0,Towel.Measurements.VolumeRate{`0})">
            <summary>Multiplies an VolumeRate by a scalar numeric value.</summary>
            <param name="a">The VolumeRate measurement to multiply.</param>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Add(`0)">
            <summary>Multiplies an VolumeRate by a scalar numeric value.</summary>
            <param name="b">The scalar numeric value to multiply the measurement by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies VolumeRate by AreaDensity resulting in LinearMassFlow.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies VolumeRate by AreaDensity resulting in LinearMassFlow.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.AreaDensity{`0})">
            <summary>Mulitplies VolumeRate by AreaDensity resulting in LinearMassFlow.</summary>
            <param name="b">The AreaDensity to multiply by.</param>
            <returns>The LinearMassFlow result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies VolumeRate by Density resulting in MassRate.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Density{`0})">
            <summary>Mulitplies VolumeRate by Density resulting in MassRate.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Density to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.Density{`0})">
            <summary>Mulitplies VolumeRate by Density resulting in MassRate.</summary>
            <param name="b">The Density to multiply by.</param>
            <returns>The MassRate result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies VolumeRate by Pressure resulting in Power.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies VolumeRate by Pressure resulting in Power.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.Pressure{`0})">
            <summary>Mulitplies VolumeRate by Pressure resulting in Power.</summary>
            <param name="b">The Pressure to multiply by.</param>
            <returns>The Power result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies VolumeRate by Time resulting in Volume.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Multiply(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Time{`0})">
            <summary>Mulitplies VolumeRate by Time resulting in Volume.</summary>
            <param name="a">The VolumeRate to be multiplied.</param>
            <param name="b">The Time to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Multiply(Towel.Measurements.Time{`0})">
            <summary>Mulitplies VolumeRate by Time resulting in Volume.</summary>
            <param name="b">The Time to multiply by.</param>
            <returns>The Volume result of the multiplication.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides an VolumeRate measurement by another VolumeRate measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.VolumeRate{`0},`0)">
            <summary>Divides this VolumeRate measurement by a numaric scalar value.</summary>
            <param name="a">The VolumeRate measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Division(Towel.Measurements.VolumeRate{`0},`0)">
            <summary>Divides this VolumeRate measurement by a numaric scalar value.</summary>
            <param name="a">The VolumeRate measurement to divide.</param>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(`0)">
            <summary>Divides this VolumeRate measurement by a numaric scalar value.</summary>
            <param name="b">The numeric scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Division(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Divides an VolumeRate measurement by another VolumeRate measurement resulting in a scalar numeric value.</summary>
            <param name="a">The first operand of the division operation.</param>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.VolumeRate{`0})">
            <summary>Divides an VolumeRate measurement by another VolumeRate measurement resulting in a scalar numeric value.</summary>
            <param name="b">The second operand of the division operation.</param>
            <returns>The scalar numeric value result from the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Area{`0})">
            <summary>Divides VolumeRate by Area resulting in Speed.</summary>
            <param name="a">The VolumeRate to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Division(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Area{`0})">
            <summary>Divides VolumeRate by Area resulting in Speed.</summary>
            <param name="a">The VolumeRate to be divided.</param>
            <param name="b">The Area to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.Area{`0})">
            <summary>Divides VolumeRate by Area resulting in Speed.</summary>
            <param name="b">The Area to divide by.</param>
            <returns>The Speed result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides VolumeRate by Speed resulting in Area.</summary>
            <param name="a">The VolumeRate to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Division(Towel.Measurements.VolumeRate{`0},Towel.Measurements.Speed{`0})">
            <summary>Divides VolumeRate by Speed resulting in Area.</summary>
            <param name="a">The VolumeRate to be divided.</param>
            <param name="b">The Speed to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Divide(Towel.Measurements.Speed{`0})">
            <summary>Divides VolumeRate by Speed resulting in Area.</summary>
            <param name="b">The Speed to divide by.</param>
            <returns>The Area result of the division.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.LessThan(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than another VolumeRate measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_LessThan(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than another VolumeRate measurement.</summary>
            <param name="a">The first operand of the less than operation.</param>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.LessThan(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than another VolumeRate measurement.</summary>
            <param name="b">The second operand of the less than operation.</param>
            <returns>True if the first operand is less than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.GreaterThan(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than another VolumeRate measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_GreaterThan(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than another VolumeRate measurement.</summary>
            <param name="a">The first operand of the greater than operation.</param>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.GreaterThan(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than another VolumeRate measurement.</summary>
            <param name="b">The second operand of the greater than operation.</param>
            <returns>True if the first operand is greater than the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.LessThanOrEqual(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than or equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_LessThanOrEqual(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than or equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the less than or equal to operation.</param>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.LessThanOrEqual(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is less than or equal to another VolumeRate measurement.</summary>
            <param name="b">The second operand of the less than or equal to operation.</param>
            <returns>True if the first operand is less than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.GreaterThanOrEqual(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than or equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_GreaterThanOrEqual(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than or equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the greater than or equal to operation.</param>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.GreaterThanOrEqual(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is greater than or equal to another VolumeRate measurement.</summary>
            <param name="b">The second operand of the greater than or equal to operation.</param>
            <returns>True if the first operand is greater than or equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Equal(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Equality(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the equal to operation.</param>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Equal(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is equal to another VolumeRate measurement.</summary>
            <param name="b">The second operand of the equal to operation.</param>
            <returns>True if the first operand is equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.NotEqual(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is not equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.op_Inequality(Towel.Measurements.VolumeRate{`0},Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is not equal to another VolumeRate measurement.</summary>
            <param name="a">The first operand of the not equal to operation.</param>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.NotEqual(Towel.Measurements.VolumeRate{`0})">
            <summary>Determines if an VolumeRate measurement is not equal to another VolumeRate measurement.</summary>
            <param name="b">The second operand of the not equal to operation.</param>
            <returns>True if the first operand is not equal to the second operand. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.Equals(System.Object)">
            <summary>Base Equals override that performs a type and value equality check.</summary>
            <param name="obj">The object to check for equality with.</param>
            <returns>True if the types and values equal. False if not.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.ToString">
            <summary>Converts the VolumeRate measurement to a string represenation.</summary>
            <returns>The string representation of the measurement.</returns>
        </member>
        <member name="M:Towel.Measurements.VolumeRate`1.GetHashCode">
            <summary>Base hashing function for VolumeRate measurements.</summary>
            <returns>Computed hash code for this instance.</returns>
        </member>
        <member name="T:Towel.Measurements.Angle">
            <summary>Contains unit types and conversion factors for the generic Angle struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Angle.Units">
            <summary>Units for angle measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Gradians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Degrees">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Radians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Angle.Units.Revolutions">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge">
            <summary>Contains unit types and conversion factors for the generic ElectricCharge struct.</summary>
        </member>
        <member name="T:Towel.Measurements.ElectricCharge.Units">
            <summary>Units for electric charge measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Yoctocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Zeptocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Attocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Femtocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Picocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Nanocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Microcoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Millicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Centicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Decicoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Coulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Dekacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Hectocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Kilocoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Megacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Gigacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Teracoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Petacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Exacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Zettacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.ElectricCharge.Units.Yottacoulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Length">
            <summary>Contains unit types and conversion factors for the generic Length struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Length.Units">
            <summary>Units for length measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yoctometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Zeptometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Attometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Femtometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Picometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Nanometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Micrometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Millimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Centimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Inches">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Decimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Feet">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yards">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Meters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Dekameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Hectometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Kilometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Miles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.NauticalMiles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Megameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Gigameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Terameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Petameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Exameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Zettameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Length.Units.Yottameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Mass">
            <summary>Contains unit types and conversion factors for the generic Mass struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Mass.Units">
            <summary>Units for Mass measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Yoctograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Zeptograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Attograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Femtograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Picograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Nanograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Micrograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Milligrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Centigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Decigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Grams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Dekagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Hectograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Kilograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Megagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Gigagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Teragrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Petagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Exagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Zettagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Mass.Units.Yottagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Tempurature">
            <summary>Contains unit types and conversion factors for the generic Tempurature struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Tempurature.Units">
            <summary>Units for Tempurature measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Kelvin">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Celsius">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Tempurature.Units.Fahrenheit">
            <summary>Units of an Tempurature measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.Time">
            <summary>Contains unit types and conversion factors for the generic Time struct.</summary>
        </member>
        <member name="T:Towel.Measurements.Time.Units">
            <summary>Units for time measurements.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Milliseconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Seconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Minutes">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Hours">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.Time.Units.Days">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="T:Towel.Measurements.MeasurementsSyntax">
            <summary>Provides syntax for measurement unit definition. Intended to be referenced via "using static" keyword in files.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Gradians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Degrees">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Radians">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Revolutions">
            <summary>Units of an angle measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Coulombs">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yoctoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zeptoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Attoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Femtoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Picoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Nanoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Microampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Milliampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Centiampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Deciampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Amperes">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Dekaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Hectoampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Kiloampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Megaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Gigaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Teraampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Petaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Exaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zettaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yottaampheres">
            <summary>Units of an electric charge measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Joules">
            <summary>Units of an Energy measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Newtons">
            <summary>Units of an force measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yoctometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zeptometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Attometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Femtometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Picometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Nanometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Micrometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Millimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Centimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Inches">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Decimeters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Feet">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yards">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Meters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Dekameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Hectometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Kilometers">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Miles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.NauticalMiles">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Megameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Gigameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Terameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Petameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Exameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zettameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yottameters">
            <summary>Units of an length measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yoctograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zeptograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Attograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Femtograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Picograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Nanograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Micrograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Milligrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Centigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Decigrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Grams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Dekagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Hectograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Kilograms">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Megagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Gigagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Teragrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Petagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Exagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Zettagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Yottagrams">
            <summary>Units of an mass measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Watts">
            <summary>Units of an Power measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Pascals">
            <summary>Units of an Pressure measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Knots">
            <summary>Units of an speed measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Milliseconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Seconds">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Minutes">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Hours">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="F:Towel.Measurements.MeasurementsSyntax.Days">
            <summary>Units of an time measurement.</summary>
        </member>
        <member name="T:Towel.Meta">
            <summary>Constains static analysis methods of the code (reflection).</summary>
        </member>
        <member name="M:Towel.Meta.GetTryParseMethod``1">
            <summary>Gets the TryParse <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> TryParse(<see cref="T:System.String"/>, out <typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetTryParseMethod(System.Type)">
            <summary>Gets the TryParse <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> TryParse(<see cref="T:System.String"/>, out <paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetFactorialMethod``1">
            <summary>Gets the Factorial <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> Factorial(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsPrime <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetFactorialMethod(System.Type)">
            <summary>Gets the Factorial <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> Factorial(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsPrimeMethod``1">
            <summary>Gets the IsPrime <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPrime(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsPrime <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsPrimeMethod(System.Type)">
            <summary>Gets the IsPrime <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPrime(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsNonNegativeMethod``1">
            <summary>Gets the IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNonNegative(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsNonNegativeMethod(System.Type)">
            <summary>Gets the IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNonNegative(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNonNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsNegativeMethod``1">
            <summary>Gets the IsNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNegative(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsNegativeMethod(System.Type)">
            <summary>Gets the IsNegative <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsNegative(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsNegative <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsPositiveMethod``1">
            <summary>Gets the IsPositive <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPositive(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsPositive <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsPositiveMethod(System.Type)">
            <summary>Gets the IsPositive <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsPositive(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsPositive <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsEvenMethod``1">
            <summary>Gets the IsEven <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsEven(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsEven <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsEvenMethod(System.Type)">
            <summary>Gets the IsEven <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsEven(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsEven <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsOddMethod``1">
            <summary>Gets the IsOdd <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsOdd(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The IsOdd <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsOddMethod(System.Type)">
            <summary>Gets the IsOdd <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsOdd(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The IsOdd <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsIntegerMethod``1">
            <summary>Gets the IsInteger <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsInteger(<typeparamref name="T"/>)].</summary>
            <typeparam name="T">The type of the out parameter.</typeparam>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetIsIntegerMethod(System.Type)">
            <summary>Gets the IsInteger <see cref="T:System.Reflection.MethodInfo"/> on a type if it exists [<see cref="T:System.Boolean"/> IsInteger(<paramref name="a"/>)].</summary>
            <param name="a">The type of the out parameter.</param>
            <returns>The TryParse <see cref="T:System.Reflection.MethodInfo"/> if found or null if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetLessThanMethod``3">
            <summary>Determines if an op_LessThan member exists.</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <returns>True if the op_LessThan member exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetLessThanMethod(System.Type,System.Type,System.Type)">
            <summary>Determines if an op_LessThan member exists.</summary>
            <param name="a">The type of the left operand.</param>
            <param name="b">The type of the right operand.</param>
            <param name="c">The type of the return.</param>
            <returns>True if the op_LessThan member exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetGreaterThanMethod``3">
            <summary>Determines if an op_GreaterThan member exists.</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <returns>True if the op_GreaterThan member exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.GetGreaterThanMethod(System.Type,System.Type,System.Type)">
            <summary>Determines if an op_GreaterThan member exists.</summary>
            <param name="a">The type of the left operand.</param>
            <param name="b">The type of the right operand.</param>
            <param name="c">The type of the return.</param>
            <returns>True if the op_GreaterThan member exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.HasImplicitCast``2">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <typeparam name="TFrom">The parameter type of the implicit casting operator.</typeparam>
            <typeparam name="TTo">The return type fo the implicit casting operator.</typeparam>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.HasExplicitCast``2">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <typeparam name="TFrom">The parameter type of the implicit casting operator.</typeparam>
            <typeparam name="TTo">The return type fo the implicit casting operator.</typeparam>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.HasImplicitCast(System.Type,System.Type)">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <param name="fromType">The parameter type of the implicit casting operator.</param>
            <param name="toType">The return type fo the implicit casting operator.</param>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.HasExplicitCast(System.Type,System.Type)">
            <summary>Determines if an implicit casting operator exists from one type to another.</summary>
            <param name="fromType">The parameter type of the implicit casting operator.</param>
            <param name="toType">The return type fo the implicit casting operator.</param>
            <returns>True if the implicit casting operator exists or false if not.</returns>
        </member>
        <member name="M:Towel.Meta.ConvertToCSharpSource(System.Type,System.Boolean)">
            <summary>Converts a <see cref="T:System.Type"/> into a <see cref="T:System.String"/> as it would appear in C# source code.</summary>
            <param name="type">The <see cref="T:System.Type"/> to convert to a <see cref="T:System.String"/>.</param>
            <param name="showGenericParameters">If the generic parameters are the generic types, whether they should be shown or not.</param>
            <returns>The <see cref="T:System.String"/> as the <see cref="T:System.Type"/> would appear in C# source code.</returns>
        </member>
        <member name="M:Towel.Meta.GetEnumAttribute``1(System.Enum)">
            <summary>Gets a custom attribute on an enum value by generic type.</summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="enum">The enum value to get the attribute of.</param>
            <returns>The attribute on the enum value of the provided type.</returns>
        </member>
        <member name="M:Towel.Meta.GetEnumAttributes``1(System.Enum)">
            <summary>Gets custom attributes on an enum value by generic type.</summary>
            <typeparam name="TAttribute">The type of attribute to get.</typeparam>
            <param name="enum">The enum value to get the attribute of.</param>
            <returns>The attributes on the enum value of the provided type.</returns>
        </member>
        <member name="M:Towel.Meta.GetLastEnumValue``1">
            <summary>Gets the maximum value of an enum.</summary>
            <typeparam name="TEnum">The enum type to get the maximum value of.</typeparam>
            <returns>The maximum enum value of the provided type.</returns>
        </member>
        <member name="M:Towel.Meta.GetEventInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the events with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the events of.</param>
            <returns>The IEnumerable of the events with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetConstructorInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the constructors with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the constructors of.</param>
            <returns>The IEnumerable of the constructors with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetPropertyInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the properties with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the properties of.</param>
            <returns>The IEnumerable of the properties with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetFieldInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the fields with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the fields of.</param>
            <returns>The IEnumerable of the fields with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetMethodInfosWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the methods with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the methods of.</param>
            <returns>The IEnumerable of the methods with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetTypesWithAttribute``1(System.Reflection.Assembly)">
            <summary>Enumerates through all the types with a custom attribute.</summary>
            <typeparam name="TAttribute">The type of the custom attribute.</typeparam>
            <param name="assembly">The assembly to iterate through the types of.</param>
            <returns>The IEnumerable of the types with the provided attribute type.</returns>
        </member>
        <member name="M:Towel.Meta.GetDerivedTypes``1(System.Reflection.Assembly)">
            <summary>Gets all the types in an assembly that derive from a base.</summary>
            <typeparam name="TBase">The base type to get the deriving types of.</typeparam>
            <param name="assembly">The assmebly to perform the search on.</param>
            <returns>The IEnumerable of the types that derive from the provided base.</returns>
        </member>
        <member name="M:Towel.Meta.GetDirectoryPath(System.Reflection.Assembly)">
            <summary>Gets the file path of an assembly.</summary>
            <param name="assembly">The assembly to get the file path of.</param>
            <returns>The file path of the assembly.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Type)">
            <summary>Gets the XML name of an <see cref="T:System.Type"/> as it appears in the XML docs.</summary>
            <param name="type">The field to get the XML name of.</param>
            <returns>The XML name of <paramref name="type"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Reflection.MethodInfo)">
            <summary>Gets the XML name of an <see cref="T:System.Reflection.MethodInfo"/> as it appears in the XML docs.</summary>
            <param name="methodInfo">The field to get the XML name of.</param>
            <returns>The XML name of <paramref name="methodInfo"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Reflection.ConstructorInfo)">
            <summary>Gets the XML name of an <see cref="T:System.Reflection.ConstructorInfo"/> as it appears in the XML docs.</summary>
            <param name="constructorInfo">The field to get the XML name of.</param>
            <returns>The XML name of <paramref name="constructorInfo"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Reflection.PropertyInfo)">
            <summary>Gets the XML name of an <see cref="T:System.Reflection.PropertyInfo"/> as it appears in the XML docs.</summary>
            <param name="propertyInfo">The field to get the XML name of.</param>
            <returns>The XML name of <paramref name="propertyInfo"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Reflection.FieldInfo)">
            <summary>Gets the XML name of an <see cref="T:System.Reflection.FieldInfo"/> as it appears in the XML docs.</summary>
            <param name="fieldInfo">The field to get the XML name of.</param>
            <returns>The XML name of <paramref name="fieldInfo"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.GetXmlName(System.Reflection.EventInfo)">
            <summary>Gets the XML name of an <see cref="T:System.Reflection.EventInfo"/> as it appears in the XML docs.</summary>
            <param name="eventInfo">The event to get the XML name of.</param>
            <returns>The XML name of <paramref name="eventInfo"/> as it appears in the XML docs.</returns>
        </member>
        <member name="M:Towel.Meta.LoadXmlDocumentation(System.String)">
            <summary>Loads the XML code documentation into memory so it can be accessed by extension methods on reflection types.</summary>
            <param name="xmlDocumentation">The content of the XML code documentation.</param>
        </member>
        <member name="M:Towel.Meta.LoadXmlDocumentation(System.IO.TextReader)">
            <summary>Loads the XML code documentation into memory so it can be accessed by extension methods on reflection types.</summary>
            <param name="textReader">The text reader to process in an XmlReader.</param>
        </member>
        <member name="M:Towel.Meta.ClearXmlDocumentation">
            <summary>Clears the currently loaded XML documentation.</summary>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Type)">
            <summary>Gets the XML documentation on a type.</summary>
            <param name="type">The type to get the XML documentation of.</param>
            <returns>The XML documentation on the type.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>Gets the XML documentation on a method.</summary>
            <param name="methodInfo">The method to get the XML documentation of.</param>
            <returns>The XML documentation on the method.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.ConstructorInfo)">
            <summary>Gets the XML documentation on a constructor.</summary>
            <param name="constructorInfo">The constructor to get the XML documentation of.</param>
            <returns>The XML documentation on the constructor.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.PropertyInfo)">
            <summary>Gets the XML documentation on a property.</summary>
            <param name="propertyInfo">The property to get the XML documentation of.</param>
            <returns>The XML documentation on the property.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.FieldInfo)">
            <summary>Gets the XML documentation on a field.</summary>
            <param name="fieldInfo">The field to get the XML documentation of.</param>
            <returns>The XML documentation on the field.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.EventInfo)">
            <summary>Gets the XML documentation on an event.</summary>
            <param name="eventInfo">The event to get the XML documentation of.</param>
            <returns>The XML documentation on the event.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>Gets the XML documentation on a member.</summary>
            <param name="memberInfo">The member to get the XML documentation of.</param>
            <returns>The XML documentation on the member.</returns>
            <remarks>The XML documentation must be loaded into memory for this function to work.</remarks>
        </member>
        <member name="M:Towel.Meta.GetDocumentation(System.Reflection.ParameterInfo)">
            <summary>Gets the XML documentation for a parameter.</summary>
            <param name="parameterInfo">The parameter to get the XML documentation for.</param>
            <returns>The XML documenation of the parameter.</returns>
        </member>
        <member name="M:Towel.Meta.IsLocalFunction(System.Reflection.MethodBase)">
            <summary>Determines if a method is a local function.</summary>
            <param name="methodBase">The method to determine if it is a local function.</param>
            <returns>True if the method is a local function. False if not.</returns>
        </member>
        <member name="T:Towel.Serialization">
            <summary>Static class containing serialization code.</summary>
        </member>
        <member name="M:Towel.Serialization.DefaultToXml``1(``0)">
            <summary>Wrapper for the default XML serialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The XML serialzation of the value.</returns>
        </member>
        <member name="M:Towel.Serialization.DefaultToXml``1(``0,System.Xml.XmlWriterSettings)">
            <summary>Wrapper for the default XML serialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="xmlWriterSettings">The settings of the XML writer during serialization.</param>
            <returns>The XML serialzation of the value.</returns>
        </member>
        <member name="M:Towel.Serialization.DefaultToXml``1(``0,System.IO.TextWriter)">
            <summary>Wrapper for the default XML serialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="textWriter">The text writer to output the XML serialization to.</param>
        </member>
        <member name="M:Towel.Serialization.DefaultToXml``1(``0,System.IO.TextWriter,System.Xml.XmlWriterSettings)">
            <summary>Wrapper for the default XML serialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to serialize.</typeparam>
            <param name="value">The value to serialize.</param>
            <param name="textWriter">The text writer to output the XML serialization to.</param>
            <param name="xmlWriterSettings">The settings of the XML writer during serialization.</param>
        </member>
        <member name="M:Towel.Serialization.DefaultFromXml``1(System.String)">
            <summary>Wrapper for the default XML deserialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="string">The string containing the XML content to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Towel.Serialization.DefaultFromXml``1(System.IO.TextReader)">
            <summary>Wrapper for the default XML deserialization in .NET using XmlSerializer.</summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="textReader">The text reader providing the XML to deserialize.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateToXml``1(``0)">
            <summary>Serializes a static delegate to XML.</summary>
            <typeparam name="T">The type of delegate to serialize.</typeparam>
            <param name="delegate">The delegate to serialize.</param>
            <returns>The XML serialization of the delegate.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateToXml``1(``0,System.Xml.XmlWriterSettings)">
            <summary>Serializes a static delegate to XML.</summary>
            <typeparam name="T">The type of delegate to serialize.</typeparam>
            <param name="delegate">The delegate to serialize.</param>
            <param name="xmlWriterSettings">The settings of the XML writer during serialization.</param>
            <returns>The XML serialization of the delegate.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateToXml``1(``0,System.IO.TextWriter)">
            <summary>Serializes a static delegate to XML.</summary>
            <typeparam name="T">The type of delegate to serialize.</typeparam>
            <param name="delegate">The delegate to serialize.</param>
            <param name="textWriter">The text writer to output the XML serialization to.</param>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateToXml``1(``0,System.IO.TextWriter,System.Xml.XmlWriterSettings)">
            <summary>Serializes a static delegate to XML.</summary>
            <typeparam name="T">The type of delegate to serialize.</typeparam>
            <param name="delegate">The delegate to serialize.</param>
            <param name="textWriter">The text writer to output the XML serialization to.</param>
            <param name="xmlWriterSettings">The settings of the XML writer during serialization.</param>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateFromXml``1(System.String)">
            <summary>Deserializes a static delegate from XML.</summary>
            <typeparam name="T">The type of the delegate to deserialize.</typeparam>
            <param name="string">The string of XML content to deserialize.</param>
            <returns>The deserialized delegate.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when deserialization fails due to a return type mis-match.
            </exception>
            <exception cref="T:System.Exception">
            Thrown when deserialization fails. See the inner exception for more information.
            </exception>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateFromXml``1(System.IO.TextReader)">
            <summary>Deserializes a static delegate from XML.</summary>
            <typeparam name="TDelegate">The type of the delegate to deserialize.</typeparam>
            <param name="textReader">The text reader providing the XML to deserialize.</param>
            <returns>The deserialized delegate.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a non-static method.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the delegate is pointing to a local function.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when deserialization fails due to a return type mis-match.
            </exception>
            <exception cref="T:System.Exception">
            Thrown when deserialization fails. See the inner exception for more information.
            </exception>
        </member>
        <member name="T:Towel.Serialization.Json">
            <summary>An object for the purposes of serializing static delegates.</summary>
        </member>
        <member name="T:Towel.Serialization.Json.Delegate">
            <summary>An object for the purposes of serializing static delegates.</summary>
        </member>
        <member name="P:Towel.Serialization.Json.Delegate.DeclaringType">
            <summary>The assemlby qualified declaring type of the method.</summary>
        </member>
        <member name="P:Towel.Serialization.Json.Delegate.MethodName">
            <summary>The name of the method.</summary>
        </member>
        <member name="P:Towel.Serialization.Json.Delegate.ParameterTypes">
            <summary>The assembly qualified parameter types of the method.</summary>
        </member>
        <member name="P:Towel.Serialization.Json.Delegate.ReturnType">
            <summary>The assembly qualified return type of the method.</summary>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateToJson``1(``0)">
            <summary>Serializes a static delegate to JSON.</summary>
            <typeparam name="T">The type of delegate to serialize.</typeparam>
            <param name="delegate">The delegate to serialize.</param>
            <returns>The JSON serialization of the delegate.</returns>
        </member>
        <member name="M:Towel.Serialization.StaticDelegateFromJson``1(System.String)">
            <summary>Deserializes a static delegate from JSON.</summary>
            <typeparam name="TDelegate">The type of the delegate to deserialize.</typeparam>
            <param name="string">The string of JSON content to deserialize.</param>
            <returns>The deserialized delegate.</returns>
        </member>
        <member name="T:Towel.SpanBuilder`1">
            <summary>Represents a <see cref="T:System.Span`1"/> in the process of being initialized.</summary>
            <typeparam name="T">The type of values in the <see cref="T:System.Span`1"/>.</typeparam>
        </member>
        <member name="M:Towel.SpanBuilder`1.#ctor(System.Span{`0})">
            <summary>Constructs a new <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <see cref="T:System.Span`1"/> to initialize.</param>
        </member>
        <member name="M:Towel.SpanBuilder`1.Append(`0)">
            <summary>Appends a <typeparamref name="T"/> to this <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="value">The <typeparamref name="T"/> to append to this <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="M:Towel.SpanBuilder`1.Append(System.ReadOnlySpan{`0})">
            <summary>Appends a <typeparamref name="T"/> span to this <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <typeparamref name="T"/> span to append to this <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="M:Towel.SpanBuilder`1.op_Implicit(Towel.SpanBuilder{`0})~System.ReadOnlySpan{`0}">
            <summary>Converts a <see cref="T:Towel.SpanBuilder`1"/> to a <see cref="T:System.ReadOnlySpan`1"/>.</summary>
            <param name="spanBuilder">The <see cref="T:Towel.SpanBuilder`1"/> to convert to a <see cref="T:System.ReadOnlySpan`1"/>.</param>
        </member>
        <member name="M:Towel.SpanBuilder`1.op_Implicit(Towel.SpanBuilder{`0})~System.Span{`0}">
            <summary>Converts a <see cref="T:Towel.SpanBuilder`1"/> to a <see cref="T:System.Span`1"/>.</summary>
            <param name="spanBuilder">The <see cref="T:Towel.SpanBuilder`1"/> to convert to a <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:Towel.SpanBuilder`1.op_Implicit(System.Span{`0})~Towel.SpanBuilder{`0}">
            <summary>Converts a <see cref="T:System.Span`1"/> to a <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <see cref="T:System.Span`1"/> to convert to a <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="T:Towel.Statics">
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
            <summary>Root type of the static functional methods in Towel.</summary>
        </member>
        <member name="M:Towel.Statics.AppendLine(Towel.SpanBuilder{System.Char}@,System.Char)">
            <summary>Appends a <see cref="T:System.Char"/> followed by <see cref="P:System.Environment.NewLine"/> to a <paramref name="spanBuilder"/>.</summary>
            <param name="spanBuilder">The <see cref="T:Towel.SpanBuilder`1"/> to append to.</param>
            <param name="value">The <see cref="T:System.Char"/> to append to the <paramref name="spanBuilder"/>.</param>
        </member>
        <member name="M:Towel.Statics.AppendLine(Towel.SpanBuilder{System.Char}@,System.ReadOnlySpan{System.Char})">
            <summary>Appends a <see cref="T:System.Char"/> span followed by <see cref="P:System.Environment.NewLine"/> to a <paramref name="spanBuilder"/>.</summary>
            <param name="spanBuilder">The <see cref="T:Towel.SpanBuilder`1"/> to append to.</param>
            <param name="span">The <see cref="T:System.Char"/> span to append to the <paramref name="spanBuilder"/>.</param>
        </member>
        <member name="M:Towel.Statics.AppendLine(Towel.SpanBuilder{System.Char}@)">
            <summary>Appends a <see cref="P:System.Environment.NewLine"/> to a <paramref name="spanBuilder"/>.</summary>
            <param name="spanBuilder">The <see cref="T:Towel.SpanBuilder`1"/> to append to.</param>
        </member>
        <member name="M:Towel.Statics.Combinations``1(``0[][],Towel.Statics.Action_ReadOnlySpan{``0})">
            <summary>Iterates through all combinations of the provided per-index element values.</summary>
            <typeparam name="T">The element type of the combinations to iterate.</typeparam>
            <param name="elementPosibilities">The possible element values at each index.</param>
            <param name="action">The action to perform on each possible combination.</param>
        </member>
        <member name="M:Towel.Statics.Combinations``2(``0[][],``1)">
            <summary>Iterates through all combinations of the provided per-index element values.</summary>
            <typeparam name="T">The element type of the combinations to iterate.</typeparam>
            <typeparam name="TAction">The action to perform on each combination.</typeparam>
            <param name="elementPosibilities">The possible element values at each index.</param>
            <param name="action">The action to perform on each possible combination.</param>
        </member>
        <member name="M:Towel.Statics.Combinations``1(System.Int32,Towel.Statics.Action_ReadOnlySpan{``0},System.Func{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,``0})">
            <summary>Iterates through all combinations of the provided per-index element values.</summary>
            <typeparam name="T">The element type of the combinations to iterate.</typeparam>
            <param name="length">The length of the spans to iterate.</param>
            <param name="action">The action to perform on each combination.</param>
            <param name="indexPossibilities">The function to get the possible element values at each index.</param>
            <param name="valueAt">The action to perform on each possible combination.</param>
        </member>
        <member name="M:Towel.Statics.Combinations``4(System.Int32,``1,``2,``3)">
            <summary>Iterates through all combinations of the provided per-index element values.</summary>
            <typeparam name="T">The element type of the combinations to iterate.</typeparam>
            <typeparam name="TAction">Thetype of action to perform on each combination.</typeparam>
            <typeparam name="TIndexPossibilities">The type of function to get the possible element values at each index.</typeparam>
            <typeparam name="TValueAt">The type of action to perform on each possible combination.</typeparam>
            <param name="length">The length of the spans to iterate.</param>
            <param name="action">The action to perform on each combination.</param>
            <param name="indexPossibilities">The function to get the possible element values at each index.</param>
            <param name="valueAt">The action to perform on each possible combination.</param>
        </member>
        <member name="M:Towel.Statics.Replace(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>Returns a new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements.</summary>
            <remarks>Uses Regex without a timeout.</remarks>
            <param name="original">The <see cref="T:System.String"/> to perform the replacements on.</param>
            <param name="rules">The patterns and relative replacements to apply to this <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> in which all occurrences of Unicode <see cref="T:System.String"/> patterns in this instance are replaced with a relative Unicode <see cref="T:System.String"/> replacements.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if any of the parameters are null or contain null values.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="rules"/> is empty, <paramref name="rules"/> contains empty patterns, or <paramref name="rules"/> contains duplicate patterns.</exception>
        </member>
        <member name="M:Towel.Statics.ContainsAny(System.String,System.Char[])">
            <summary>Checks if a string contains any of a collections on characters.</summary>
            <param name="string">The string to see if it contains any of the specified characters.</param>
            <param name="chars">The characters to check if the string contains any of them.</param>
            <returns>True if the string contains any of the provided characters. False if not.</returns>
        </member>
        <member name="M:Towel.Statics.StandardizeNewLines(System.String)">
            <summary>Removes carriage returns and then replaces all new line characters with System.Environment.NewLine.</summary>
            <param name="string">The string to standardize the new lines of.</param>
            <returns>The new line standardized string.</returns>
        </member>
        <member name="M:Towel.Statics.Repeat(System.String,System.Int32)">
            <summary>Creates a string of a repreated string a provided number of times.</summary>
            <param name="string">The string to repeat.</param>
            <param name="count">The number of repetitions of the string to repeat.</param>
            <returns>The string of the repeated string to repeat.</returns>
        </member>
        <member name="M:Towel.Statics.SplitLines(System.String)">
            <summary>Splits the string into the individual lines.</summary>
            <param name="string">The string to get the lines of.</param>
            <returns>an array of the individual lines of the string.</returns>
        </member>
        <member name="M:Towel.Statics.IndentLines(System.String)">
            <summary>Indents every line in a string with a single tab character.</summary>
            <param name="string">The string to indent the lines of.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Towel.Statics.IndentLines(System.String,System.Int32)">
            <summary>Indents every line in a string with a given number of tab characters.</summary>
            <param name="string">The string to indent the lines of.</param>
            <param name="count">The number of tabs of the indention.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Towel.Statics.IndentNewLinesBetweenIndeces(System.String,System.Int32,System.Int32)">
            <summary>Indents after every new line sequence found between two string indeces.</summary>
            <param name="string">The string to be indented.</param>
            <param name="start">The starting index to look for new line sequences to indent.</param>
            <param name="end">The ending index to look for new line sequences to indent.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Towel.Statics.IndentNewLinesBetweenIndeces(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Indents after every new line sequence found between two string indeces.</summary>
            <param name="string">The string to be indented.</param>
            <param name="count">The number of tabs of this indention.</param>
            <param name="start">The starting index to look for new line sequences to indent.</param>
            <param name="end">The ending index to look for new line sequences to indent.</param>
            <returns>The indented string.</returns>
        </member>
        <member name="M:Towel.Statics.IndentLineNumbers(System.String,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="string">The string to indent specified lines of.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:Towel.Statics.IndentLineNumbers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Indents a range of line numbers in a string.</summary>
            <param name="string">The string to indent specified lines of.</param>
            <param name="count">The number of tabs for the indention.</param>
            <param name="startingLineNumber">The line number to start line indention on.</param>
            <param name="endingLineNumber">The line number to stop line indention on.</param>
            <returns>The string with the specified lines indented.</returns>
        </member>
        <member name="M:Towel.Statics.PadLinesLeft(System.String,System.String)">
            <summary>Adds a string onto the beginning of every line in a string.</summary>
            <param name="string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.PadSubstringLinesRight(System.String,System.String)">
            <summary>Adds a string onto the end of every line in a string.</summary>
            <param name="string">The string to pad.</param>
            <param name="padding">The padding to add to the front of every line.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.PadLinesLeftBetweenIndeces(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string after every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply after every newline sequence found.</param>
            <param name="start">The starting index of the string to search for new line sequences.</param>
            <param name="end">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.PadLinesRightBetweenIndeces(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string before every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply before every newline sequence found.</param>
            <param name="start">The starting index of the string to search for new line sequences.</param>
            <param name="end">The ending index of the string to search for new line sequences.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.PadLinesLeft(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string after every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply after every newline sequence found.</param>
            <param name="startingLineNumber">The starting index of the line in the string to pad.</param>
            <param name="endingLineNumber">The ending index of the line in the string to pad.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.PadLinesRight(System.String,System.String,System.Int32,System.Int32)">
            <summary>Adds a string before every new line squence found between two indeces of a string.</summary>
            <param name="string">The string to be padded.</param>
            <param name="padding">The padding to apply before every newline sequence found.</param>
            <param name="startingLineNumber">The starting index of the line in the string to pad.</param>
            <param name="endingLineNumber">The ending index of the line in the string to pad.</param>
            <returns>The padded string.</returns>
        </member>
        <member name="M:Towel.Statics.Reverse(System.String)">
            <summary>Reverses the characters in a string.</summary>
            <param name="string">The string to reverse the characters of.</param>
            <returns>The reversed character string.</returns>
        </member>
        <member name="M:Towel.Statics.Remove(System.String,System.Predicate{System.Char})">
            <summary>Removes all the characters from a string based on a predicate.</summary>
            <param name="string">The string to remove characters from.</param>
            <param name="where">The predicate determining removal of each character.</param>
            <returns>The string after removing any predicated characters.</returns>
        </member>
        <member name="M:Towel.Statics.CountLines(System.String)">
            <summary>Counts the number of lines in the string.</summary>
            <param name="str">The string to get the line count of.</param>
            <returns>The number of lines in the string.</returns>
        </member>
        <member name="M:Towel.Statics.XML_Stepper">
            <summary>Performs a method on every value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TStep">The type of method to perform on every <typeparamref name="T"/> value.</typeparam>
            <param name="span">The sequence of <typeparamref name="T"/> values.</param>
            <param name="array">The sequence of <typeparamref name="T"/> values.</param>
            <param name="step">The method to perform on every <typeparamref name="T"/> value.</param>
            <param name="start">The inclusive starting index.</param>
            <param name="end">The exclusive ending index.</param>
        </member>
        <member name="M:Towel.Statics.XML_StepperBreak">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
            <returns><see cref="T:Towel.StepStatus"/></returns>
        </member>
        <member name="M:Towel.Statics.Stepper``1(System.ReadOnlySpan{``0},System.Action{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``1(System.ReadOnlySpan{``0},System.Func{``0,Towel.StepStatus})">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.Stepper``1(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Action{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``1(System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Func{``0,Towel.StepStatus})">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``2(System.ReadOnlySpan{``0},System.Int32,System.Int32,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.Stepper``1(``0[],System.Action{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``2(``0[],``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``1(``0[],System.Func{``0,Towel.StepStatus})">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``2(``0[],``1)">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.Stepper``1(``0[],System.Int32,System.Int32,System.Action{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``2(``0[],System.Int32,System.Int32,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Stepper"/>
        </member>
        <member name="M:Towel.Statics.Stepper``1(``0[],System.Int32,System.Int32,System.Func{``0,Towel.StepStatus})">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.StepperBreak``2(``0[],System.Int32,System.Int32,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_StepperBreak"/>
        </member>
        <member name="M:Towel.Statics.BuildArray``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>Builds an array from a size and initialization delegate.</summary>
            <typeparam name="T">The generic type of the array.</typeparam>
            <param name="size">The size of the array to build.</param>
            <param name="func">The initialization pattern.</param>
            <returns>The built array.</returns>
        </member>
        <member name="M:Towel.Statics.Format``1(``0[],``0)">
            <summary>Formats an array so that all values are the same.</summary>
            <typeparam name="T">The generic type of the array to format.</typeparam>
            <param name="array">The array to format.</param>
            <param name="value">The value to format all entries in the array with.</param>
        </member>
        <member name="M:Towel.Statics.Format``1(``0[],System.Func{System.Int32,``0})">
            <summary>Formats an array so that all values are the same.</summary>
            <typeparam name="T">The generic type of the array to format.</typeparam>
            <param name="array">The array to format.</param>
            <param name="func">The per-index format function.</param>
        </member>
        <member name="M:Towel.Statics.ConstructRectangularJaggedArray``1(System.Int32,System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="length1">The length of the first dimension.</param>
            <param name="length2">The length of the second dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Towel.Statics.ConstructRectangularJaggedArray``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="length1">The length of the first dimension.</param>
            <param name="length2">The length of the second dimension.</param>
            <param name="func">The function to initialize the values with.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Towel.Statics.ConstructSquareJaggedArray``1(System.Int32)">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="sideLength">The length of each dimension.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Towel.Statics.ConstructSquareJaggedArray``1(System.Int32,System.Func{System.Int32,System.Int32,``0})">
            <summary>Constructs a square jagged array of the desired dimensions.</summary>
            <typeparam name="T">The generic type to store in the jagged array.</typeparam>
            <param name="sideLength">The length of each dimension.</param>
            <param name="func">The function to initialize the values with.</param>
            <returns>The constructed jagged array.</returns>
        </member>
        <member name="M:Towel.Statics.Time_DateTime(System.Action)">
            <summary>Times an action using System.DateTime.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
        <member name="M:Towel.Statics.Time_StopWatch(System.Action)">
            <summary>Times an action using System.Diagnostics.Stopwatch.</summary>
            <param name="action">The action to time.</param>
            <returns>The TimeSpan the action took to complete.</returns>
        </member>
        <member name="M:Towel.Statics.TryFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>Tries to get the first value in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">The generic type of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="iEnumerable">The IEnumerable to try to get the first value of.</param>
            <param name="first">The first value of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> or default if empty.</param>
            <returns>True if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> has a first value or false if it is empty.</returns>
        </member>
        <member name="M:Towel.Statics.CreateDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of the specified type from this <see cref="T:System.Reflection.MethodInfo"/>.</summary>
            <typeparam name="TDelegate">The type of the delegate to create.</typeparam>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> to create the delegate from.</param>
            <returns>The delegate for this <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>This extension is syntax sugar so you don't have to cast the return.</remarks>
        </member>
        <member name="M:Towel.Statics.IsDefined``1(``0)">
            <inheritdoc cref="M:System.Enum.IsDefined``1(``0)"/>
        </member>
        <member name="M:Towel.Statics.ToIEnumerable(System.Range)">
            <summary>Converts a <see cref="T:System.Range"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <param name="range">The <see cref="T:System.Range"/> to convert int a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the conversion.</returns>
            <exception cref="T:System.ArgumentException">range.Start.IsFromEnd</exception>
            <exception cref="T:System.ArgumentException">range.End.IsFromEnd</exception>
        </member>
        <member name="M:Towel.Statics.GetEnumerator(System.Range)">
            <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the <paramref name="range"/>.</summary>
            <param name="range">The range to get the <see cref="T:System.Collections.Generic.IEnumerator`1"/> of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the <paramref name="range"/>.</returns>
        </member>
        <member name="M:Towel.Statics.ToSpan(System.Range)">
            <inheritdoc cref="M:Towel.Statics.ToSpan``2(System.Range,``1)" />
        </member>
        <member name="M:Towel.Statics.ToSpan``1(System.Range,System.Func{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.ToSpan``2(System.Range,``1)" />
        </member>
        <member name="M:Towel.Statics.ToSpan``2(System.Range,``1)">
            <summary>Converts a <paramref name="range"/> to a to an span of values.</summary>
            <typeparam name="T">The resulting element type of the span.</typeparam>
            <typeparam name="TSelect">The type of method for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</typeparam>
            <param name="range">The range of values to convert into an span.</param>
            <param name="select">The method for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</param>
            <returns>An span of the values of the <paramref name="range"/>.</returns>
        </member>
        <member name="M:Towel.Statics.ToArray(System.Range)">
            <inheritdoc cref="M:Towel.Statics.ToArray``2(System.Range,``1)"/>
        </member>
        <member name="M:Towel.Statics.ToArray``1(System.Range,System.Func{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.ToArray``2(System.Range,``1)"/>
        </member>
        <member name="M:Towel.Statics.ToArray``2(System.Range,``1)">
            <summary>Converts a <paramref name="range"/> to a to an array of values.</summary>
            <typeparam name="T">The resulting element type of the array.</typeparam>
            <typeparam name="TSelect">The type of method for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</typeparam>
            <param name="range">The range of values to convert into an array.</param>
            <param name="select">The method for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</param>
            <returns>An array of the values of the <paramref name="range"/>.</returns>
        </member>
        <member name="M:Towel.Statics.Select``1(System.Range,System.Func{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.Select``2(System.Range,``1)"/>
        </member>
        <member name="M:Towel.Statics.Select``2(System.Range,``1)">
            <summary>Projects each element of a sequence into a new form.</summary>
            <typeparam name="T">The type of the value returned by selector.</typeparam>
            <typeparam name="TSelect">The type of function for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</typeparam>
            <param name="range">A sequence of values to invoke a transform function on.</param>
            <param name="select">The function for selecting a <typeparamref name="T"/> based on an <see cref="T:System.Int32"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the transform function on each element of source.</returns>
        </member>
        <member name="M:Towel.Statics.Gaps``1(System.Action{``0},System.Action{``0})">
            <summary>Adds a step to the gaps (in-betweens) of another step funtion.</summary>
            <typeparam name="T">The generic type of the step function.</typeparam>
            <param name="step">The step to add a gap step to.</param>
            <param name="gapStep">The step to perform in the gaps.</param>
            <returns>The combined step + gapStep function.</returns>
        </member>
        <member name="M:Towel.Statics.Convert``2(System.Action{System.Action{``0}},System.Func{``0,``1})">
            <summary>Converts the values in this stepper to another type.</summary>
            <typeparam name="TA">The generic type of the values of the original stepper.</typeparam>
            <typeparam name="TB">The generic type of the values to convert the stepper into.</typeparam>
            <param name="stepper">The stepper to convert.</param>
            <param name="func">The conversion function.</param>
            <returns>The converted stepper.</returns>
        </member>
        <member name="M:Towel.Statics.Append``1(System.Action{System.Action{``0}},``0[])">
            <summary>Appends values to the stepper.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to append to.</param>
            <param name="values">The values to append to the stepper.</param>
            <returns>The resulting stepper with the appended values.</returns>
        </member>
        <member name="M:Towel.Statics.Build``1(``0[])">
            <summary>Builds a stepper from values.</summary>
            <typeparam name="T">The generic type of the stepper to build.</typeparam>
            <param name="values">The values to build the stepper from.</param>
            <returns>The resulting stepper function for the provided values.</returns>
        </member>
        <member name="M:Towel.Statics.Concat``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}}[])">
            <summary>Concatenates steppers.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The first stepper of the contactenation.</param>
            <param name="otherSteppers">The other steppers of the concatenation.</param>
            <returns>The concatenated steppers as a single stepper.</returns>
        </member>
        <member name="M:Towel.Statics.Where``1(System.Action{System.Action{``0}},System.Func{``0,System.Boolean})">
            <summary>Filters a stepper using a where predicate.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to filter.</param>
            <param name="predicate">The predicate of the where filter.</param>
            <returns>The filtered stepper.</returns>
        </member>
        <member name="M:Towel.Statics.Iterate(System.Int32,System.Action{System.Int32})">
            <summary>Steps through a set number of integers.</summary>
            <param name="iterations">The number of times to iterate.</param>
            <param name="step">The step function.</param>
        </member>
        <member name="M:Towel.Statics.ToStepper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an IEnumerable into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="iEnumerable">The IEnumerable to convert.</param>
            <returns>The stepper delegate comparable to the IEnumerable provided.</returns>
        </member>
        <member name="M:Towel.Statics.ToStepperBreak``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an IEnumerable into a stepper delegate./></summary>
            <typeparam name="T">The generic type being iterated.</typeparam>
            <param name="iEnumerable">The IEnumerable to convert.</param>
            <returns>The stepper delegate comparable to the IEnumerable provided.</returns>
        </member>
        <member name="M:Towel.Statics.ToArray``1(System.Action{System.Action{``0}})">
            <summary>Converts the stepper into an array.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to convert.</param>
            <returns>The array created from the stepper.</returns>
        </member>
        <member name="M:Towel.Statics.Count``1(System.Action{System.Action{``0}})">
            <summary>Counts the number of items in the stepper.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to count the items of.</param>
            <returns>The number of items in the stepper.</returns>
        </member>
        <member name="M:Towel.Statics.EveryNth``1(System.Action{System.Action{``0}},System.Int32)">
            <summary>Reduces the stepper to be every nth value.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to reduce.</param>
            <param name="nth">Represents the values to reduce the stepper to; "5" means every 5th value.</param>
            <returns>The reduced stepper function.</returns>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``1(System.Func{System.Func{``0,Towel.StepStatus},Towel.StepStatus},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``1(System.Action{System.Action{``0}},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <param name="equate">An equality function for the data</param>
            <param name="hash">A hashing function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``1(System.Func{System.Func{``0,Towel.StepStatus},Towel.StepStatus})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``1(System.Action{System.Action{``0}})">
            <summary>Determines if the data contains any duplicates.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The stepper function for the data.</param>
            <returns>True if the data contains duplicates. False if not.</returns>
            <remarks>Use the StepperBreak overload if possible. It is more effiecient.</remarks>
        </member>
        <member name="M:Towel.Statics.Any``1(System.Action{System.Action{``0}},System.Predicate{``0})">
            <summary>Determines if the stepper contains any of the predicated values.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to determine if any predicated values exist.</param>
            <param name="where">The predicate.</param>
            <returns>True if any of the predicated values exist or </returns>
        </member>
        <member name="M:Towel.Statics.Any``1(System.Func{System.Func{``0,Towel.StepStatus},Towel.StepStatus},System.Predicate{``0})">
            <summary>Determines if the stepper contains any of the predicated values.</summary>
            <typeparam name="T">The generic type of the stepper.</typeparam>
            <param name="stepper">The stepper to determine if any predicated values exist.</param>
            <param name="where">The predicate.</param>
            <returns>True if any of the predicated values exist or </returns>
        </member>
        <member name="M:Towel.Statics.ConcatToString(System.Action{System.Action{System.Char}})">
            <summary>Converts a stepper into a string of the concatenated chars.</summary>
            <param name="stepper">The stepper to concatenate the values into a string.</param>
            <returns>The string of the concatenated chars.</returns>
        </member>
        <member name="M:Towel.Statics.ToCompareResult(System.Int32)">
            <summary>Converts an <see cref="T:System.Int32"/> to the relative <see cref="T:Towel.CompareResult"/>.</summary>
            <param name="compareResult">The <see cref="T:System.Int32"/> to convert to the relative <see cref="T:Towel.CompareResult"/>.</param>
            <returns>
            <paramref name="compareResult"/> &lt; 0 =&gt; <see cref="F:Towel.CompareResult.Less"/><br/>
            <paramref name="compareResult"/> &gt; 0 =&gt; <see cref="F:Towel.CompareResult.Greater"/><br/>
            <paramref name="compareResult"/> is 0 =&gt; <see cref="F:Towel.CompareResult.Equal"/>
            </returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.Byte)">
            <summary>Converts a <see cref="T:System.Byte"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="byte">The <see cref="T:System.Byte"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.SByte)">
            <summary>Converts a <see cref="T:System.SByte"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="sbyte">The <see cref="T:System.SByte"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.SByte"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.Int16)">
            <summary>Converts a <see cref="T:System.Int16"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="short">The <see cref="T:System.Int16"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.UInt16)">
            <summary>Converts a <see cref="T:System.UInt16"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="ushort">The <see cref="T:System.UInt16"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.UInt16"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.Int32)">
            <summary>Converts a <see cref="T:System.Int32"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="int">The <see cref="T:System.Int32"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.UInt32)">
            <summary>Converts a <see cref="T:System.UInt32"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="uint">The <see cref="T:System.UInt32"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.UInt32"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.Int64)">
            <summary>Converts a <see cref="T:System.Int64"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="long">The <see cref="T:System.Int64"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.UInt64)">
            <summary>Converts a <see cref="T:System.UInt64"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="ulong">The <see cref="T:System.UInt64"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.ToEnglishWords(System.Decimal)">
            <summary>Converts a <see cref="T:System.Decimal"/> to the English words <see cref="T:System.String"/> representation.</summary>
            <param name="decimal">The <see cref="T:System.Decimal"/> value to convert to English words <see cref="T:System.String"/> representation.</param>
            <returns>The English words <see cref="T:System.String"/> representation of the <see cref="T:System.UInt64"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToDecimal(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToLong(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToUlong(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToInt(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToUint(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToShort(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToUshort(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToByte(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWordsToSbyte(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:Towel.Statics.TryParseEnglishWords``2(System.ReadOnlySpan{System.Char})">
            <summary>Attempts to parse a string of English words to a numeric value.</summary>
            <typeparam name="T">The numerical type to parse the string into.</typeparam>
            <typeparam name="TTryParse">The type of tryparse function for the numeric type.</typeparam>
            <param name="span">The span to attempt to parse.</param>
            <returns>True and the value if successful or False and default if not.</returns>
        </member>
        <member name="M:Towel.Statics.XML_Permute">
            <typeparam name="T">The generic element type of the indexed collection.</typeparam>
            <typeparam name="TAction">The type of action to perform on each permutation.</typeparam>
            <typeparam name="TStatus">The type of status checker for cancellation.</typeparam>
            <typeparam name="TGet">The type of get index operation of the collection.</typeparam>
            <typeparam name="TSet">The type of set index operation of the collection.</typeparam>
            <param name="start">The starting index of the values to permute.</param>
            <param name="end">The ending index of the values to permute.</param>
            <param name="action">The action to perform on each permutation.</param>
            <param name="status">The status checker for cancellation.</param>
            <param name="get">The get index operation of the collection.</param>
            <param name="set">The set index operation of the collection.</param>
            <param name="array">The array to iterate the permutations of.</param>
            <param name="list">The list to iterate the permutations of.</param>
            <param name="span">The span of the permutation.</param>
        </member>
        <member name="M:Towel.Statics.XML_PermuteRecursive">
            <summary>Iterates through all the permutations of an indexed collection (using a recursive algorithm).</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Permute"/>
        </member>
        <member name="M:Towel.Statics.XML_PermuteIterative">
            <summary>Iterates through all the permutations of an indexed collection (using an iterative algorithm).</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Permute"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``1(System.Int32,System.Int32,System.Action,System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``1(System.Int32,System.Int32,System.Action,System.Func{Towel.StepStatus},System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``5(System.Int32,System.Int32,``1,``2,``3,``4)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``1(System.Span{``0},System.Action)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``2(System.Span{``0},System.Action,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteRecursive``3(System.Span{``0},``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteRecursive"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``1(System.Int32,System.Int32,System.Action,System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``1(System.Int32,System.Int32,System.Action,System.Func{Towel.StepStatus},System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``5(System.Int32,System.Int32,``1,``2,``3,``4)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``1(System.Span{``0},System.Action)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``2(System.Span{``0},System.Action,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.PermuteIterative``3(System.Span{``0},``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_PermuteIterative"/>
        </member>
        <member name="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <summary>
            Generates <paramref name="count"/> random <see cref="T:System.Int32"/> values in the
            [<paramref name="minValue"/>..<paramref name="maxValue"/>] range where <paramref name="minValue"/> is
            inclusive and <paramref name="maxValue"/> is exclusive.
            </summary>
            <typeparam name="TStep">The type of function to perform on each generated <see cref="T:System.Int32"/> value.</typeparam>
            <typeparam name="TRandom">The type of random to generation algorithm.</typeparam>
            <param name="count">The number of <see cref="T:System.Int32"/> values to generate.</param>
            <param name="minValue">Inclusive endpoint of the random generation range.</param>
            <param name="maxValue">Exclusive endpoint of the random generation range.</param>
            <param name="excluded">Values that should be excluded during generation.</param>
            <param name="random">The random to generation algorithm.</param>
            <param name="step">The function to perform on each generated <see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:Towel.Statics.NextRollTracking``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <inheritdoc cref="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <inheritdoc cref="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"></inheritdoc>
            <param name="step">The function to perform on each randomly generated value.</param>
        </member>
        <member name="M:Towel.Statics.NextRollTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"></inheritdoc>
            <returns>The randomly generated values.</returns>
        </member>
        <member name="M:Towel.Statics.NextRollTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)">
            <summary>
            Generates <paramref name="count"/> unique random <see cref="T:System.Int32"/> values in the
            [<paramref name="minValue"/>..<paramref name="maxValue"/>] range where <paramref name="minValue"/> is
            inclusive and <paramref name="maxValue"/> is exclusive.
            </summary>
            <typeparam name="TStep">The type of function to perform on each generated <see cref="T:System.Int32"/> value.</typeparam>
            <typeparam name="TRandom">The type of random to generation algorithm.</typeparam>
            <param name="count">The number of <see cref="T:System.Int32"/> values to generate.</param>
            <param name="minValue">Inclusive endpoint of the random generation range.</param>
            <param name="maxValue">Exclusive endpoint of the random generation range.</param>
            <param name="random">The random to generation algorithm.</param>
            <param name="step">The function to perform on each generated <see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``2(System.Int32,System.Int32,System.Int32,``1,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``2(System.Int32,System.Int32,System.Int32,``1,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)"></inheritdoc>
            <param name="step">The function to perform on each randomly generated value.</param>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)"></inheritdoc>
            <returns>The randomly generated values.</returns>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <summary>
            Generates <paramref name="count"/> unique random <see cref="T:System.Int32"/> values in the
            [<paramref name="minValue"/>..<paramref name="maxValue"/>] range where <paramref name="minValue"/> is
            inclusive and <paramref name="maxValue"/> is exclusive.
            </summary>
            <typeparam name="TStep">The type of function to perform on each generated <see cref="T:System.Int32"/> value.</typeparam>
            <typeparam name="TRandom">The type of random to generation algorithm.</typeparam>
            <param name="count">The number of <see cref="T:System.Int32"/> values to generate.</param>
            <param name="minValue">Inclusive endpoint of the random generation range.</param>
            <param name="maxValue">Exclusive endpoint of the random generation range.</param>
            <param name="excluded">Values that should be excluded during generation.</param>
            <param name="random">The random to generation algorithm.</param>
            <param name="step">The function to perform on each generated <see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"></inheritdoc>
            <param name="step">The function to perform on each randomly generated value.</param>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"></inheritdoc>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"/>
            <returns>The randomly generated values.</returns>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextBool(System.Random)">
            <summary>Generates a random <see cref="T:System.Boolean"/> value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.NextByte(System.Random)">
            <summary>Generates a random <see cref="T:System.Byte"/> value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated <see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.NextString(System.Random,System.Int32)">
            <summary>Generates a random <see cref="T:System.String"/> of a given length using the System.Random generator.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextString(System.Random,System.Int32,System.Char[])">
            <summary>Generates a random <see cref="T:System.String"/> of a given length using the System.Random generator with a specific set of characters.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized <see cref="T:System.String"/> to generate.</param>
            <param name="characterPool">The set of allowable characters.</param>
            <returns>The generated randomized <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextEnglishAlphaNumericString(System.Random,System.Int32)">
            <summary>Generates a random English alphanumeric <see cref="T:System.String"/> of a given length (includes upper and lower case characters).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphanumeric <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphanumeric <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextUpperCaseEnglishAlphaNumericString(System.Random,System.Int32)">
            <summary>Generates a random English alphanumeric <see cref="T:System.String"/> of a given length (upper case characters only).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphanumeric <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphanumeric <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextLowerCaseEnglishAlphaNumericString(System.Random,System.Int32)">
            <summary>Generates a random English alphanumeric <see cref="T:System.String"/> of a given length (lower case characters only).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphanumeric <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphanumeric <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NumericEnglishString(System.Random,System.Int32)">
            <summary>Generates a random English numeric <see cref="T:System.String"/> of a given length.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized numeric <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized numeric <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextEnglishAlphabeticString(System.Random,System.Int32)">
            <summary>Generates a random English alhpabetical <see cref="T:System.String"/> of a given length (includes upper and lower case characters).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphabetical <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphabetical <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextUpperCaseEnglishAlphabeticString(System.Random,System.Int32)">
            <summary>Generates a random English alhpabetical <see cref="T:System.String"/> of a given length (upper case characters only).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphabetical <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphabetical <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextLowerCaseEnglishAlphabeticString(System.Random,System.Int32)">
            <summary>Generates a random English alhpabetical <see cref="T:System.String"/> of a given length (lower case characters only).</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="length">The length of the randomized alphabetical <see cref="T:System.String"/> to generate.</param>
            <returns>The generated randomized alphabetical <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Towel.Statics.NextChar(System.Random)">
            <summary>Generates a random char value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated char value.</returns>
        </member>
        <member name="M:Towel.Statics.NextChar(System.Random,System.Char,System.Char)">
            <summary>Generates a random char value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">Minimum allowed value of the random generation.</param>
            <param name="max">Maximum allowed value of the random generation.</param>
            <returns>A randomly generated char value.</returns>
        </member>
        <member name="M:Towel.Statics.NextDecimal(System.Random)">
            <summary>Generates a random <see cref="T:System.Decimal"/> value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:Towel.Statics.NextDecimal(System.Random,System.Decimal,System.Decimal)">
            <summary>Generates a random <see cref="T:System.Decimal"/> value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated <see cref="T:System.Decimal"/> value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Called if the range of random generation is too large and therefore invalid.</exception>
        </member>
        <member name="M:Towel.Statics.NextDateTime(System.Random)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:Towel.Statics.NextDateTime(System.Random,System.DateTime)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:Towel.Statics.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>Generates a random DateTime value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated DateTime value.</returns>
        </member>
        <member name="M:Towel.Statics.NextTimeSpan(System.Random)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:Towel.Statics.NextTimeSpan(System.Random,System.TimeSpan)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:Towel.Statics.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>Generates a random TimeSpan value.</summary>
            <param name="random">The random generation algorithm.</param>
            <param name="min">The minimum allowed value of the random generation.</param>
            <param name="max">The maximum allowed value of the random generation.</param>
            <returns>A randomly generated TimeSpan value.</returns>
        </member>
        <member name="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextRollTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextRollTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.Next(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextRollTracking``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextPoolTracking``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.Next``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.Action{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking(System.Random,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking(System.Random,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking(System.Random,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking(System.Random,System.Int32,System.Int32,System.Int32)">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Random,System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Random,System.Int32,System.Int32,System.Int32,``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},System.Action{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:Towel.Statics.NextUnique(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32})"/>
        </member>
        <member name="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``2(System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``1,``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniqueRollTracking``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.NextUniquePoolTracking``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)">
            <inheritdoc cref="M:Towel.Statics.NextUnique``1(System.Random,System.Int32,System.Int32,System.Int32,System.ReadOnlySpan{System.Int32},``0)"/>
        </member>
        <member name="M:Towel.Statics.From``1(System.Random,``0[])">
            <summary>Chooses a value at random from <paramref name="values"/>.</summary>
            <typeparam name="T">The generic type of the items to choose from.</typeparam>
            <param name="random">The random algorithm for index generation.</param>
            <param name="values">The values to choose from.</param>
            <returns>A randomly selected value from the supplied options.</returns>
        </member>
        <member name="M:Towel.Statics.From``1(System.Random,System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:Towel.Statics.From``1(System.Random,``0[])"/>
        </member>
        <member name="M:Towel.Statics.From``1(System.Random,System.Collections.Generic.IList{``0})">
            <inheritdoc cref="M:Towel.Statics.From``1(System.Random,``0[])"/>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Random,System.ValueTuple{``0,System.Double}[])">
            <summary>Selects a random value from a collection of weighted options.</summary>
            <typeparam name="T">The generic type to select a random instance of.</typeparam>
            <param name="random">The random algorithm.</param>
            <param name="pool">The pool of weighted values to choose from.</param>
            <returns>A randomly selected value from the weighted pool.</returns>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Random,System.Double,System.ValueTuple{``0,System.Double}[])">
            <summary>Selects a random value from a collection of weighted options.</summary>
            <typeparam name="T">The generic type to select a random instance of.</typeparam>
            <param name="random">The random algorithm.</param>
            <param name="totalWeight">The total weight of all the values in the pool.</param>
            <param name="pool">The pool of weighted values to choose from.</param>
            <returns>A randomly selected value from the weighted pool.</returns>
        </member>
        <member name="M:Towel.Statics.Next``1(System.Random,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,System.Double}},System.Nullable{System.Double})">
            <summary>Selects a random value from a collection of weighted options.</summary>
            <typeparam name="T">The generic type to select a random instance of.</typeparam>
            <param name="random">The random algorithm.</param>
            <param name="pool">The pool of weighted values to choose from.</param>
            <param name="totalWeight">The total weight of all the values in the pool.</param>
            <returns>A randomly selected value from the weighted pool.</returns>
        </member>
        <member name="M:Towel.Statics.TryParseRomanNumeral(System.ReadOnlySpan{System.Char})">
            <summary>Attempts to parse a Roman Numeral string into an <see cref="T:System.Int32"/> value.</summary>
            <param name="span">The Roman Numeral string to parse into an <see cref="T:System.Int32"/> value.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the parse was successful or false if not<br/>
            - <see cref="T:System.Int32"/> Value: the parsed value if the parse was successful or default if not
            </returns>
        </member>
        <member name="M:Towel.Statics.TryToRomanNumeral(System.Int32)">
            <summary>Converts an <see cref="T:System.Int32"/> <paramref name="value"/> to a roman numeral <see cref="T:System.String"/>?.</summary>
            <param name="value">The value to represent as a roman numeral. [min: 1] [max: 3999]</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if <paramref name="value"/> was converted to a roman numeral <see cref="T:System.String"/>? or false if not.<br/>
            - <see cref="T:System.String"/>? RomanNumeral: the resulting roman numeral <see cref="T:System.String"/>? if successful or null if not.
            </returns>
        </member>
        <member name="M:Towel.Statics.XML_SearchBinary">
            <summary>Performs a binary search on sorted indexed data.</summary>
            <typeparam name="T">The type of values to search through.</typeparam>
            <typeparam name="TGet">The type of function for getting an element at an index.</typeparam>
            <typeparam name="TSift">The type of function for sifting through the values.</typeparam>
            <typeparam name="TCompare">The type of compare function.</typeparam>
            <param name="index">The starting index of the binary search.</param>
            <param name="length">The number of values to be searched after the starting <paramref name="index"/>.</param>
            <param name="get">The function for getting an element at an index.</param>
            <param name="sift">The function for comparing the the values to th desired target.</param>
            <param name="array">The array search.</param>
            <param name="element">The element to search for.</param>
            <param name="compare">The compare function.</param>
            <param name="span">The span of the binary search.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Found: True if a match was found; False if not.<br/>
            - <see cref="T:System.Int32"/> Index: The resulting index of the search that will always be &lt;= the desired match.<br/>
            - <typeparamref name="T"/> Value: The resulting value of the binary search if a match was found or default if not.
            </returns>
        </member>
        <member name="M:Towel.Statics.SearchBinary``1(System.Int32,System.Func{System.Int32,``0},System.Func{``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="M:Towel.Statics.SearchBinary``3(System.Int32,System.Int32,``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="M:Towel.Statics.SearchBinary``1(System.ReadOnlySpan{``0},``0,System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="M:Towel.Statics.SearchBinary``1(System.ReadOnlySpan{``0},System.Func{``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="M:Towel.Statics.SearchBinary``2(System.ReadOnlySpan{``0},``0,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="M:Towel.Statics.SearchBinary``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchBinary"/>
        </member>
        <member name="T:Towel.Statics.GraphSearchStatus">
            <summary>The status of a graph search algorithm.</summary>
        </member>
        <member name="F:Towel.Statics.GraphSearchStatus.Continue">
            <summary>Graph search was not broken.</summary>
        </member>
        <member name="F:Towel.Statics.GraphSearchStatus.Break">
            <summary>Graph search was broken.</summary>
        </member>
        <member name="F:Towel.Statics.GraphSearchStatus.Goal">
            <summary>Graph search found the goal.</summary>
        </member>
        <member name="T:Towel.Statics.GraphSyntax">
            <summary>Syntax sugar hacks.</summary>
        </member>
        <member name="T:Towel.Statics.GraphSyntax.GraphSearchStatusStruct">
            <summary>This is a syntax sugar hack to allow implicit conversions from StepStatus to GraphSearchStatus.</summary>
        </member>
        <member name="M:Towel.Statics.GraphSyntax.GraphSearchStatusStruct.#ctor(Towel.Statics.GraphSearchStatus)">
            <summary>Constructs a new graph search status.</summary>
            <param name="value">The status of the graph search.</param>
        </member>
        <member name="M:Towel.Statics.GraphSyntax.GraphSearchStatusStruct.op_Implicit(Towel.Statics.GraphSearchStatus)~Towel.Statics.GraphSyntax.GraphSearchStatusStruct">
            <summary>Converts a <see cref="T:Towel.Statics.GraphSearchStatus"/> into a <see cref="T:Towel.Statics.GraphSyntax.GraphSearchStatusStruct"/>.</summary>
            <param name="value">The <see cref="T:Towel.Statics.GraphSearchStatus"/> to convert.</param>
        </member>
        <member name="M:Towel.Statics.GraphSyntax.GraphSearchStatusStruct.op_Implicit(Towel.StepStatus)~Towel.Statics.GraphSyntax.GraphSearchStatusStruct">
            <summary>Converts a <see cref="T:Towel.StepStatus"/> into a <see cref="T:Towel.Statics.GraphSyntax.GraphSearchStatusStruct"/>.</summary>
            <param name="value">The <see cref="T:Towel.StepStatus"/> to convert.</param>
        </member>
        <member name="M:Towel.Statics.GraphSyntax.GraphSearchStatusStruct.op_Implicit(Towel.Statics.GraphSyntax.GraphSearchStatusStruct)~Towel.Statics.GraphSearchStatus">
            <summary>Converts a <see cref="T:Towel.Statics.GraphSyntax.GraphSearchStatusStruct"/> into a <see cref="T:Towel.Statics.GraphSearchStatus"/>.</summary>
            <param name="value">The <see cref="T:Towel.Statics.GraphSyntax.GraphSearchStatusStruct"/> to convert.</param>
        </member>
        <member name="T:Towel.Statics.SearchNeighbors`1">
            <summary>Step function for all neigbors of a given node.</summary>
            <typeparam name="TNode">The node type of the graph being searched.</typeparam>
            <param name="current">The node to step through all the neighbors of.</param>
            <param name="neighbors">Step function to perform on all neighbors.</param>
        </member>
        <member name="T:Towel.Statics.SearchHeuristic`2">
            <summary>Computes the heuristic value of a given node in a graph (smaller values mean closer to goal node).</summary>
            <typeparam name="TNode">The node type of the graph being searched.</typeparam>
            <typeparam name="TNumeric">The numeric to use when performing calculations.</typeparam>
            <param name="node">The node to compute the heuristic value of.</param>
            <returns>The computed heuristic value for this node.</returns>
        </member>
        <member name="T:Towel.Statics.SearchCost`2">
            <summary>Computes the cost of moving from the current node to a specific neighbor.</summary>
            <typeparam name="TNode">The node type of the graph being searched.</typeparam>
            <typeparam name="TNumeric">The numeric to use when performing calculations.</typeparam>
            <param name="current">The current (starting) node.</param>
            <param name="neighbor">The node to compute the cost of movign to.</param>
            <returns>The computed cost value of movign from current to neighbor.</returns>
        </member>
        <member name="T:Towel.Statics.SearchGoal`1">
            <summary>Predicate for determining if we have reached the goal node.</summary>
            <typeparam name="TNode">The node type of the graph being searched.</typeparam>
            <param name="current">The current node.</param>
            <returns>True if the current node is a/the goal node; False if not.</returns>
        </member>
        <member name="T:Towel.Statics.SearchCheck`1">
            <summary>Checks the status of a graph search.</summary>
            <typeparam name="TNode">The node type of the search.</typeparam>
            <param name="current">The current node of the search.</param>
            <returns>The status of the search.</returns>
        </member>
        <member name="M:Towel.Statics.XML_SearchGraph">
            <typeparam name="TNode">The node type of the graph being searched.</typeparam>
            <typeparam name="TNumeric">The numeric to use when performing calculations.</typeparam>
            <param name="start">The node to start at.</param>
            <param name="neighbors">Step function for all neigbors of a given node.</param>
            <param name="heuristic">Computes the heuristic value of a given node in a graph.</param>
            <param name="cost">Computes the cost of moving from the current node to a specific neighbor.</param>
            <param name="check">Checks the status of the search.</param>
            <param name="totalCost">The total cost of the path if a path was found.</param>
            <param name="goal">The goal of the search.</param>
            <param name="graph">The graph to perform the search on.</param>
            <returns>Stepper of the shortest path or null if no path exists.</returns>
        </member>
        <member name="M:Towel.Statics.XML_SearchGraph_Astar">
            <summary>Runs the A* search algorithm on a graph.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},Towel.Statics.SearchGoal{``0},``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},Towel.Statics.SearchGoal{``0},``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},``0,``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},``0,System.Func{``0,``0,System.Boolean},``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},``0,``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},``0,System.Func{``0,``0,System.Boolean},``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCost{``0,``1},Towel.Statics.SearchCheck{``0},``1@)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Astar"/>
        </member>
        <member name="M:Towel.Statics.AStarSearch``2(Towel.DataStructures.IGraphWeighted{``0,``1},``0,``0,Towel.Statics.SearchHeuristic{``0,``1},``1@)">
            <summary>Perfoms A* Search on the graph</summary>
            <param name="graph">The weighted graph object</param>
            <param name="Source">The node to begin search from</param>
            <param name="Destination">The node to search</param>
            <param name="CustomHeuristic">The heuristic function of the node</param>
            <param name="TotalWeight">The total cost or weight incurred from source to destination</param>
            <typeparam name="TNode">The Node type of the graph</typeparam>
            <typeparam name="TNumeric">The Numeric type of the weighted graph</typeparam>
            <returns>IEnumerable of the ordered sequence of nodes from source to destination</returns>
        </member>
        <member name="M:Towel.Statics.AStarSearch``2(Towel.DataStructures.IGraphWeighted{``0,``1},``0,``0,Towel.Statics.SearchHeuristic{``0,``1},System.Action{``0},``1@)">
            <summary>Perfoms A* Search on the graph and executes action on every node in path</summary>
            <param name="graph">The weighted graph object</param>
            <param name="Source">The node to begin search from</param>
            <param name="Destination">The node to search</param>
            <param name="CustomHeuristic">The heuristic function of the node</param>
            <param name="action">The action to perform for every node on path</param>
            <param name="TotalWeight">The total cost or weight incurred from source to destination</param>
            <typeparam name="TNode">The Node type of the graph</typeparam>
            <typeparam name="TNumeric">The Numeric type of the weighted graph</typeparam>
        </member>
        <member name="M:Towel.Statics.XML_SearchGraph_Dijkstra">
            <summary>Runs the Dijkstra search algorithm on a graph.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchGoal{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},``0)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},``0)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchGoal{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``2(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchHeuristic{``0,``1},Towel.Statics.SearchCheck{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_Dijkstra"/>
        </member>
        <member name="M:Towel.Statics.DijkstraSearch``2(Towel.DataStructures.IGraphWeighted{``0,``1},``0,``0,``1@)">
            <summary>Performs Dijkstra search on graph</summary>
            <param name="graph">The weighted graph object to search</param>
            <param name="Source">The node to begin searching from</param>
            <param name="Destination">The node to search</param>
            <param name="TotalWeight">The total cost or weight incurred from the Soruce to the Destination node</param>
            <typeparam name="TNode">The Node Type of the graph</typeparam>
            <typeparam name="TNumeric">The Numeric Type of the graph</typeparam>
            <returns>IEnumerable of the ordered nodes in path from source to destination</returns>
        </member>
        <member name="M:Towel.Statics.DijkstraSearch``2(Towel.DataStructures.IGraphWeighted{``0,``1},``0,``0,System.Action{``0},``1@)">
            <summary>Performs Dijkstra Search and executes action on every node in path</summary>
            <param name="graph">The weighted graph object to search</param>
            <param name="Source">The node to begin searching from</param>
            <param name="Destination">The destination node to search</param>
            <param name="action">The action to execute for every node on the path</param>
            <param name="TotalWeight">The Total cost or weight incurred from the Source to the Destination node</param>
            <typeparam name="TNode">The Node Type of the graph</typeparam>
            <typeparam name="TNumeric">The Numeric Type of the graph</typeparam>
        </member>
        <member name="M:Towel.Statics.XML_SearchGraph_BreadthFirst">
            <summary>Runs the Breadth-First-Search search algorithm on a graph.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchGoal{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.Statics.SearchNeighbors{``0},``0)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.Statics.SearchNeighbors{``0},``0,System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.DataStructures.IGraph{``0},``0)">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.DataStructures.IGraph{``0},``0,System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.DataStructures.IGraph{``0},Towel.Statics.SearchGoal{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.SearchGraph``1(``0,Towel.Statics.SearchNeighbors{``0},Towel.Statics.SearchCheck{``0})">
            <inheritdoc cref="M:Towel.Statics.XML_SearchGraph_BreadthFirst"/>
        </member>
        <member name="M:Towel.Statics.PerformBredthFirstSearch``1(Towel.DataStructures.IGraph{``0},``0,``0)">
            <summary>Performs Breadth First Search and returns the path as ordered sequence of nodes</summary>
            <param name="graph">The IGraph object</param>
            <param name="Source">The node to begin the Breadth First Search from</param>
            <param name="Destination">The node to search</param>
            <typeparam name="TNode">The Node Type of the Graph</typeparam>
            <returns>IEnumerable of the Nodes found along the path</returns>
        </member>
        <member name="M:Towel.Statics.PerformBredthFirstSearch``1(Towel.DataStructures.IGraph{``0},``0,``0,System.Action{``0})">
            <summary>Performs Breadth First Search and executes the specified action on every ordered node to in the path searched.</summary>
            <param name="graph">The IGraph object</param>
            <param name="Source">The node to begin Breadth First Search from</param>
            <param name="Destination">The node to search</param>
            <param name="action">The action to perform</param>
            <typeparam name="TNode">The Node Type of the graph</typeparam>
        </member>
        <member name="M:Towel.Statics.EquateSequence``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>Determines if two sequences are equal.</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TA">The type of first sequence of the equate.</typeparam>
            <typeparam name="TB">The type of second sequence of the equate.</typeparam>
            <typeparam name="TEquate">The type of element equate function.</typeparam>
            <param name="start">The inclusive starting index to equate from.</param>
            <param name="end">The inclusive ending index to equate to.</param>
            <param name="a">The first sequence of the equate.</param>
            <param name="b">The second sequence of the equate.</param>
            <param name="equate">The element equate function.</param>
            <returns>True if the spans are equal; False if not.</returns>
        </member>
        <member name="M:Towel.Statics.EquateSequence``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean})">
            <summary>Determines if two spans are equal.</summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="a">The first span of the equate.</param>
            <param name="b">The second span of the equate.</param>
            <param name="equate">The element equate function.</param>
            <returns>True if the spans are equal; False if not.</returns>
        </member>
        <member name="M:Towel.Statics.EquateSequence``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <summary>Determines if two spans are equal.</summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <typeparam name="TEquate">The type of element equate function.</typeparam>
            <param name="a">The first span of the equate.</param>
            <param name="b">The second span of the equate.</param>
            <param name="equate">The element equate function.</param>
            <returns>True if the spans are equal; False if not.</returns>
        </member>
        <member name="M:Towel.Statics.EquateSet``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if neither span contains an element the other does not.</summary>
            <typeparam name="T">The element type of each span.</typeparam>
            <param name="a">The first span.</param>
            <param name="b">The second span.</param>
            <param name="equate">The function for determining equality of values.</param>
            <param name="hash">The function for hashing the values.</param>
            <returns>True if neither span contains an element the other does not.</returns>
        </member>
        <member name="M:Towel.Statics.EquateSet``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)">
            <summary>Determines if neither span contains an element the other does not.</summary>
            <typeparam name="T">The element type of each span.</typeparam>
            <typeparam name="TEquate">The type of function for determining equality of values.</typeparam>
            <typeparam name="THash">The type of function for hashing the values.</typeparam>
            <param name="a">The first span.</param>
            <param name="b">The second span.</param>
            <param name="equate">The function for determining equality of values.</param>
            <param name="hash">The function for hashing the values.</param>
            <returns>True if neither span contains an element the other does not.</returns>
        </member>
        <member name="M:Towel.Statics.EquateOccurences``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:Towel.Statics.IsReorderOf``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)"/>
        </member>
        <member name="M:Towel.Statics.EquateOccurences``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)">
            <inheritdoc cref="M:Towel.Statics.IsReorderOf``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)"/>
        </member>
        <member name="M:Towel.Statics.XML_Maximum">
            <summary>Finds the maximum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the maximum value in.</param>
            <param name="span">The span of values to find the maximum value in.</param>
            <returns>
            - <see cref="T:System.Int32"/> Index: the index of the first occurence of the maximum value<br/>
            - <typeparamref name="T"/> Value: the maximum value in the sequence
            </returns>
        </member>
        <member name="M:Towel.Statics.Maximum``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_Maximum"/>
        </member>
        <member name="M:Towel.Statics.Maximum``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_Maximum"/>
        </member>
        <member name="M:Towel.Statics.Maximum``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Maximum"/>
        </member>
        <member name="M:Towel.Statics.XML_MaximumValue_Two">
            <summary>Finds the maximum between two values.</summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="a">The first value to compare.</param>
            <param name="b">The second value to compare.</param>
            <returns>The maximum of the two values.</returns>
        </member>
        <member name="M:Towel.Statics.MaximumValue``1(``0,``0,System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumValue_Two"/>
        </member>
        <member name="M:Towel.Statics.MaximumValue``2(``0,``0,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumValue_Two"/>
        </member>
        <member name="M:Towel.Statics.XML_MaximumValue">
            <summary>Finds the maximum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the maximum value in.</param>
            <param name="span">The span of values to find the maximum value in.</param>
            <returns>The maximum value in the sequence.</returns>
        </member>
        <member name="M:Towel.Statics.MaximumValue``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumValue"/>
        </member>
        <member name="M:Towel.Statics.MaximumValue``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumValue"/>
        </member>
        <member name="M:Towel.Statics.MaximumValue``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumValue"/>
        </member>
        <member name="M:Towel.Statics.MaximumIndex``3(System.Int32,System.Int32,``1,``2)">
            <summary>Finds the maximum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TGet">The type of the get method.</typeparam>
            <typeparam name="TCompare">The type of method for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="start">The inclusive starting index to find the maximum of.</param>
            <param name="end">The inclusive ending index to find the maximum of.</param>
            <param name="get">The the get method.</param>
            <param name="compare">The method for comparing <typeparamref name="T"/> values.</param>
            <returns>The index of the first occurence of the maximum value in the sequence.</returns>
        </member>
        <member name="M:Towel.Statics.XML_MaximumIndex">
            <summary>Finds the maximum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the maximum value in.</param>
            <param name="span">The span of values to find the maximum value in.</param>
            <returns>The index of the first occurence of the maximum value in the sequence.</returns>
        </member>
        <member name="M:Towel.Statics.MaximumIndex``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumIndex"/>
        </member>
        <member name="M:Towel.Statics.MaximumIndex``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumIndex"/>
        </member>
        <member name="M:Towel.Statics.MaximumIndex``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MaximumIndex"/>
        </member>
        <member name="M:Towel.Statics.XML_Minimum">
            <summary>Finds the minimum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the minimum value in.</param>
            <param name="span">The span of values to find the minimum value in.</param>
            <returns>
            - <see cref="T:System.Int32"/> Index: the index of the first occurence of the minimum value<br/>
            - <typeparamref name="T"/> Value: the minimum value in the sequence
            </returns>
        </member>
        <member name="M:Towel.Statics.Minimum``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_Minimum"/>
        </member>
        <member name="M:Towel.Statics.Minimum``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_Minimum"/>
        </member>
        <member name="M:Towel.Statics.Minimum``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Minimum"/>
        </member>
        <member name="M:Towel.Statics.XML_MinimumValue_Two">
            <summary>Finds the minimum between two values.</summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="a">The first value to compare.</param>
            <param name="b">The second value to compare.</param>
            <returns>The minimum of the two values.</returns>
        </member>
        <member name="M:Towel.Statics.MinimumValue``1(``0,``0,System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumValue_Two"/>
        </member>
        <member name="M:Towel.Statics.MinimumValue``2(``0,``0,``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumValue_Two"/>
        </member>
        <member name="M:Towel.Statics.XML_MinimumValue">
            <summary>Finds the minimum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the minimum value in.</param>
            <param name="span">The span of values to find the minimum value in.</param>
            <returns>The minimum value in the sequence.</returns>
        </member>
        <member name="M:Towel.Statics.MinimumValue``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumValue"/>
        </member>
        <member name="M:Towel.Statics.MinimumValue``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumValue"/>
        </member>
        <member name="M:Towel.Statics.MinimumValue``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumValue"/>
        </member>
        <member name="M:Towel.Statics.XML_MinimumIndex">
            <summary>Finds the minimum value in a sequence.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="values">The values to find the minimum value in.</param>
            <param name="span">The span of values to find the minimum value in.</param>
            <returns>The index of the first occurence of the minimum value in the sequence.</returns>
        </member>
        <member name="M:Towel.Statics.MinimumIndex``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumIndex"/>
        </member>
        <member name="M:Towel.Statics.MinimumIndex``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumIndex"/>
        </member>
        <member name="M:Towel.Statics.MinimumIndex``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_MinimumIndex"/>
        </member>
        <member name="M:Towel.Statics.Range``1(``0@,``0@,System.Action{System.Action{``0}})">
            <summary>Gets the range (minimum and maximum) of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="minimum">The minimum of the set of data.</param>
            <param name="maximum">The maximum of the set of data.</param>
            <param name="stepper">The set of data to get the range of.</param>
            <exception cref="T:System.ArgumentNullException">Throws when stepper is null.</exception>
            <exception cref="T:System.ArgumentException">Throws when stepper is empty.</exception>
        </member>
        <member name="M:Towel.Statics.Range``1(System.Action{System.Action{``0}},``0@,``0@)">
            <summary>Gets the range (minimum and maximum) of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to get the range of.</param>
            <param name="minimum">The minimum of the set of data.</param>
            <param name="maximum">The maximum of the set of data.</param>
            <exception cref="T:System.ArgumentNullException">Throws when stepper is null.</exception>
            <exception cref="T:System.ArgumentException">Throws when stepper is empty.</exception>
        </member>
        <member name="M:Towel.Statics.Range``2(System.ReadOnlySpan{``0},``1)">
            <summary>Finds the minimum and maximum values from a sequence of <typeparamref name="T"/> values.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="span">The sequence of <typeparamref name="T"/> values to filter.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <returns>
            - (<see cref="T:System.Int32"/> Index, <typeparamref name="T"/> Value) Min<br/>
            - (<see cref="T:System.Int32"/> Index, <typeparamref name="T"/> Value) Max
            </returns>
        </member>
        <member name="M:Towel.Statics.Mode``1(System.Action{``0},``0,``0[])">
            <summary>Gets the mode(s) of a data set.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="step">The action to perform on every mode value found.</param>
            <param name="a">The first value of the data set.</param>
            <param name="b">The rest of the data set.</param>
        </member>
        <member name="M:Towel.Statics.Mode``1(System.Action{``0},System.Func{``0,``0,System.Boolean},``0,``0[])">
            <summary>Gets the mode(s) of a data set.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="step">The action to perform on every mode value found.</param>
            <param name="equate">The equality delegate.</param>
            <param name="a">The first value of the data set.</param>
            <param name="b">The rest of the data set.</param>
        </member>
        <member name="M:Towel.Statics.Mode``1(System.Action{``0},System.Func{``0,System.Int32},``0,``0[])">
            <summary>Gets the mode(s) of a data set.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="step">The action to perform on every mode value found.</param>
            <param name="hash">The hash code delegate</param>
            <param name="a">The first value of the data set.</param>
            <param name="b">The rest of the data set.</param>
        </member>
        <member name="M:Towel.Statics.Mode``1(System.Action{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32},``0,``0[])">
            <summary>Gets the mode(s) of a data set.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="step">The action to perform on every mode value found.</param>
            <param name="equate">The equality delegate.</param>
            <param name="hash">The hash code delegate</param>
            <param name="a">The first value of the data set.</param>
            <param name="b">The rest of the data set.</param>
        </member>
        <member name="M:Towel.Statics.Mode``1(System.Action{System.Action{``0}},System.Action{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Gets the mode(s) of a data set.</summary>
            <typeparam name="T">The generic type of the data.</typeparam>
            <param name="stepper">The data set.</param>
            <param name="step">The action to perform on every mode value found.</param>
            <param name="equate">The equality delegate.</param>
            <param name="hash">The hash code delegate</param>
        </member>
        <member name="M:Towel.Statics.Mean``1(``0,``0[])">
            <summary>Computes the mean of a set of numerical values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first value of the set of data to compute the mean of.</param>
            <param name="b">The remaining values in the data set to compute the mean of.</param>
            <returns>The computed mean of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.Mean``1(System.Action{System.Action{``0}})">
            <summary>Computes the mean of a set of numerical values.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the mean of.</param>
            <returns>The computed mean of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.Median``1(System.Func{``0,``0,Towel.CompareResult},``0[])">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="compare">The comparison algorithm to sort the data by.</param>
            <param name="values">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.Median``1(System.Func{``0,``0,Towel.CompareResult},System.Action{System.Action{``0}})">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="compare">The comparison algorithm to sort the data by.</param>
            <param name="stepper">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.Median``1(``0[])">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="values">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.Median``1(System.Action{System.Action{``0}})">
            <summary>Computes the median of a set of data.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of data to compute the median of.</param>
            <returns>The computed median value of the set of data.</returns>
        </member>
        <member name="M:Towel.Statics.GeometricMean``1(System.Action{System.Action{``0}})">
            <summary>Computes the geometric mean of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbres to compute the geometric mean of.</param>
            <returns>The computed geometric mean of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.Variance``1(System.Action{System.Action{``0}})">
            <summary>Computes the variance of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbers to compute the variance of.</param>
            <returns>The computed variance of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.StandardDeviation``1(System.Action{System.Action{``0}})">
            <summary>Computes the standard deviation of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbers to compute the standard deviation of.</param>
            <returns>The computed standard deviation of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.MeanDeviation``1(System.Action{System.Action{``0}})">
            <summary>The mean deviation of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbers to compute the mean deviation of.</param>
            <returns>The computed mean deviation of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.Quantiles``1(System.Int32,System.Action{System.Action{``0}})">
            <summary>Computes the quantiles of a set of data.</summary>
            <typeparam name="T">The generic data type.</typeparam>
            <param name="quantiles">The number of quantiles to compute.</param>
            <param name="stepper">The data stepper.</param>
            <returns>The computed quantiles of the data set.</returns>
        </member>
        <member name="M:Towel.Statics.Occurences``1(``0,``0[])">
            <summary>Counts the number of occurences of each item.</summary>
            <typeparam name="T">The generic type to count the occerences of.</typeparam>
            <param name="a">The first value in the data.</param>
            <param name="b">The rest of the data.</param>
            <returns>The occurence map of the data.</returns>
        </member>
        <member name="M:Towel.Statics.Occurences``1(System.Func{``0,``0,System.Boolean},``0,``0[])">
            <summary>Counts the number of occurences of each item.</summary>
            <typeparam name="T">The generic type to count the occerences of.</typeparam>
            <param name="equate">The equality delegate.</param>
            <param name="a">The first value in the data.</param>
            <param name="b">The rest of the data.</param>
            <returns>The occurence map of the data.</returns>
        </member>
        <member name="M:Towel.Statics.Occurences``1(System.Func{``0,System.Int32},``0,``0[])">
            <summary>Counts the number of occurences of each item.</summary>
            <typeparam name="T">The generic type to count the occerences of.</typeparam>
            <param name="hash">The hash code delegate.</param>
            <param name="a">The first value in the data.</param>
            <param name="b">The rest of the data.</param>
            <returns>The occurence map of the data.</returns>
        </member>
        <member name="M:Towel.Statics.Occurences``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32},``0,``0[])">
            <summary>Counts the number of occurences of each item.</summary>
            <typeparam name="T">The generic type to count the occerences of.</typeparam>
            <param name="equate">The equality delegate.</param>
            <param name="hash">The hash code delegate.</param>
            <param name="a">The first value in the data.</param>
            <param name="b">The rest of the data.</param>
            <returns>The occurence map of the data.</returns>
        </member>
        <member name="M:Towel.Statics.Occurences``1(System.Action{System.Action{``0}},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Counts the number of occurences of each item.</summary>
            <typeparam name="T">The generic type to count the occerences of.</typeparam>
            <param name="stepper">The data to count the occurences of.</param>
            <param name="equate">The equality delegate.</param>
            <param name="hash">The hash code delegate.</param>
            <returns>The occurence map of the data.</returns>
        </member>
        <member name="M:Towel.Statics.HammingDistance``4(System.Int32,``1,``2,``3)">
            <summary>Computes the Hamming distance (using an iterative algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TGetA">The type of get index function for the first sequence.</typeparam>
            <typeparam name="TGetB">The type of get index function for the second sequence.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="length">The length of the sequences.</param>
            <param name="a">The get index function for the first sequence.</param>
            <param name="b">The get index function for the second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Hamming distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.HammingDistance(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Computes the Hamming distance (using an iterative algorithm).</summary>
            <param name="a">The first sequence of the operation.</param>
            <param name="b">The second sequence of the operation.</param>
            <returns>The computed Hamming distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.HammingDistance``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <summary>Computes the Hamming distance (using an iterative algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="a">The first sequence.</param>
            <param name="b">The second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Hamming distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceRecursive``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>Computes the Levenshtein distance (using an recursive algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TGetA">The type of get index function for the first sequence.</typeparam>
            <typeparam name="TGetB">The type of get index function for the second sequence.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="a_length">The length of the first sequence.</param>
            <param name="b_length">The length of the second sequence.</param>
            <param name="a">The get index function for the first sequence.</param>
            <param name="b">The get index function for the second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceRecursive(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Computes the Levenshtein distance (using an recursive algorithm).</summary>
            <param name="a">The first sequence of the operation.</param>
            <param name="b">The second sequence of the operation.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceRecursive``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <summary>Computes the Levenshtein distance (using an recursive algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="a">The first sequence.</param>
            <param name="b">The second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceIterative``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>Computes the Levenshtein distance (using an iterative algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TGetA">The type of get index function for the first sequence.</typeparam>
            <typeparam name="TGetB">The type of get index function for the second sequence.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="a_length">The length of the first sequence.</param>
            <param name="b_length">The length of the second sequence.</param>
            <param name="a">The get index function for the first sequence.</param>
            <param name="b">The get index function for the second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceIterative(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Computes the Levenshtein distance (using an iterative algorithm).</summary>
            <param name="a">The first sequence of the operation.</param>
            <param name="b">The second sequence of the operation.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.LevenshteinDistanceIterative``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <summary>Computes the Levenshtein distance (using an iterative algorithm).</summary>
            <typeparam name="T">The element type of the sequences.</typeparam>
            <typeparam name="TEquate">The type of equality check function.</typeparam>
            <param name="a">The first sequence.</param>
            <param name="b">The second sequence.</param>
            <param name="equate">The equality check function.</param>
            <returns>The computed Levenshtein distance of the two sequences.</returns>
        </member>
        <member name="M:Towel.Statics.XML_FilterOrdered">
            <summary>Filters a sequence to only values that are in order.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TGet">The type of function to get a value at an index.</typeparam>
            <typeparam name="TStep">The type of action to perform on every value that is in order.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> values.</typeparam>
            <param name="start">The starting index of the sequence.</param>
            <param name="end">The ending index of the sequence.</param>
            <param name="get">The function to get a value at an index.</param>
            <param name="step">The action to perform on every value that is in order.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> values.</param>
            <param name="span">The sequence of <typeparamref name="T"/> values to filter.</param>
        </member>
        <member name="M:Towel.Statics.XML_FilterOrderedEnumerable">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrdered"/>
            <param name="enumerable">The sequence of <typeparamref name="T"/> values to filter.</param>
            <returns>The sequence of filtered values.</returns>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrdered"/>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrdered"/>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``1(System.ReadOnlySpan{``0},System.Action{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrdered"/>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``3(System.ReadOnlySpan{``0},``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrdered"/>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrderedEnumerable"/>
        </member>
        <member name="M:Towel.Statics.FilterOrdered``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_FilterOrderedEnumerable"/>
        </member>
        <member name="M:Towel.Statics.XML_IsOrdered">
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TCompare">The type of compare function.</typeparam>
            <typeparam name="TGet">The type of get function.</typeparam>
            <param name="compare">The compare function.</param>
            <param name="get">The get function.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <param name="span">The span to be sorted.</param>
        </member>
        <member name="M:Towel.Statics.IsOrdered``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.IsOrdered``3(System.Int32,System.Int32,``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.IsOrdered``1(System.ReadOnlySpan{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.IsOrdered``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.IsOrdered``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_IsOrdered"/>
        </member>
        <member name="M:Towel.Statics.XML_IsPalindrome">
            <summary>Determines if a sequence is a palindrome.</summary>
            <typeparam name="T">The type of values in the sequence.</typeparam>
            <typeparam name="TGet">The type of method to get a <typeparamref name="T"/> value from an <see cref="T:System.Int32"/> index.</typeparam>
            <typeparam name="TEquate">The type of method for comparing <typeparamref name="T"/> values for equality.</typeparam>
            <param name="start">The inclusive starting index of the palindrome check.</param>
            <param name="end">The inclusive ending index of the palindrome check.</param>
            <param name="get">The method to get a <typeparamref name="T"/> value from an <see cref="T:System.Int32"/> index.</param>
            <param name="equate">The method for comparing <typeparamref name="T"/> values for equality.</param>
            <param name="span">The sequence to check.</param>
            <returns>True if the sequence is a palindrome; False if not.</returns>
        </member>
        <member name="M:Towel.Statics.IsPalindrome``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_IsPalindrome"/>
        </member>
        <member name="M:Towel.Statics.IsPalindrome``3(System.Int32,System.Int32,``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_IsPalindrome"/>
        </member>
        <member name="M:Towel.Statics.IsPalindrome(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.XML_IsPalindrome"/>
        </member>
        <member name="M:Towel.Statics.IsPalindrome``1(System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_IsPalindrome"/>
        </member>
        <member name="M:Towel.Statics.IsPalindrome``2(System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_IsPalindrome"/>
        </member>
        <member name="M:Towel.Statics.XML_IsInterleaved">
            <typeparam name="T">The element type of the sequences.</typeparam>
            <param name="a">The first sequence to determine if <paramref name="c"/> is interleaved of.</param>
            <param name="b">The second sequence to determine if <paramref name="c"/> is interleaved of.</param>
            <param name="c">The sequence to determine if it is interleaved from <paramref name="a"/> and <paramref name="b"/>.</param>
            <param name="equate">The function for equating <typeparamref name="T"/> values.</param>
            <returns>True if <paramref name="c"/> is interleaved of <paramref name="a"/> and <paramref name="b"/> or False if not.</returns>
            <example>
            <code>
            IsInterleaved("abc", "xyz", "axbycz") // True
            IsInterleaved("abc", "xyz", "cbazyx") // False (order not preserved)
            IsInterleaved("abc", "xyz", "012345") // False
            </code>
            </example>
        </member>
        <member name="M:Towel.Statics.XML_IsInterleavedRecursive">
            <summary>
            Determines if <paramref name="c"/> is interleved of <paramref name="a"/> and <paramref name="b"/>,
            meaning that <paramref name="c"/> it contains all values of <paramref name="a"/> and <paramref name="b"/>
            while retaining the order of the respective values. Uses a recursive algorithm.<br/>
            Runtime: O(2^(Min(<paramref name="a"/>.Length + <paramref name="b"/>.Length, <paramref name="c"/>.Length))), Î©(1)<br/>
            Memory: O(1)
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleaved"/>
        </member>
        <member name="M:Towel.Statics.XML_IsInterleavedIterative">
            <summary>
            Determines if <paramref name="c"/> is interleved of <paramref name="a"/> and <paramref name="b"/>,
            meaning that <paramref name="c"/> it contains all values of <paramref name="a"/> and <paramref name="b"/>
            while retaining the order of the respective values. Uses a interative algorithm.<br/>
            Runtime: O(Min(<paramref name="a"/>.Length * <paramref name="b"/>.Length))), Î©(1)<br/>
            Memory: O(<paramref name="a"/>.Length * <paramref name="b"/>.Length)
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleaved"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedRecursive``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedRecursive"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedRecursive(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedRecursive"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedRecursive``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedRecursive"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedIterative``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean})">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedIterative"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedIterative(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedRecursive"/>
        </member>
        <member name="M:Towel.Statics.IsInterleavedIterative``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_IsInterleavedIterative"/>
        </member>
        <member name="M:Towel.Statics.IsReorderOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:Towel.Statics.IsReorderOf``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)"/>
        </member>
        <member name="M:Towel.Statics.IsReorderOf``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},``1,``2)">
            <summary>Checks if two spans are re-orders of each other meaning they contain the same number of each element.</summary>
            <typeparam name="T">The element type of each span.</typeparam>
            <typeparam name="TEquate">The type of method for determining equality of values.</typeparam>
            <typeparam name="THash">The type of method for hashing the values.</typeparam>
            <param name="a">The first span.</param>
            <param name="b">The second span.</param>
            <param name="equate">The method for determining equality of values.</param>
            <param name="hash">The method for hashing the values.</param>
            <returns>True if both spans contain the same number of each element.</returns>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``1(System.Span{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>Determines if the span contains any duplicate values.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="span">The span to look for duplicates in.</param>
            <param name="equate">The function for equating values.</param>
            <param name="hash">The function for hashing values.</param>
            <returns>True if the span contains duplicates.</returns>
        </member>
        <member name="M:Towel.Statics.ContainsDuplicates``3(System.Span{``0},``1,``2)">
            <summary>Determines if the span contains any duplicate values.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <typeparam name="TEquate">The type of function for equating values.</typeparam>
            <typeparam name="THash">The type of function for hashing values.</typeparam>
            <param name="span">The span to look for duplicates in.</param>
            <param name="equate">The function for equating values.</param>
            <param name="hash">The function for hashing values.</param>
            <returns>True if the span contains duplicates.</returns>
        </member>
        <member name="M:Towel.Statics.Contains``1(System.Span{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>Determines if a span contains a value.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="span">The span to check for the value in.</param>
            <param name="value">The value to look for.</param>
            <param name="equate">The function for equating values.</param>
            <returns>True if the value was found.</returns>
        </member>
        <member name="M:Towel.Statics.Contains``2(System.Span{``0},``0,``1)">
            <summary>Determines if a span contains a value.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <typeparam name="TEquate">The type of function for equating values.</typeparam>
            <param name="span">The span to check for the value in.</param>
            <param name="value">The value to look for.</param>
            <param name="equate">The function for equating values.</param>
            <returns>True if the value was found.</returns>
        </member>
        <member name="M:Towel.Statics.Any``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <summary>Determines if a span contains any predicated values.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <param name="span">The span to scan for predicated values in.</param>
            <param name="predicate">The predicate of the values.</param>
            <returns>True if a predicated was found.</returns>
        </member>
        <member name="M:Towel.Statics.Any``2(System.Span{``0},``1)">
            <summary>Determines if a span contains a value.</summary>
            <typeparam name="T">The element type of the span.</typeparam>
            <typeparam name="TPredicate">The function for equating values.</typeparam>
            <param name="span">The span to check for the value in.</param>
            <param name="predicate">The value to look for.</param>
            <returns>True if a predicated was found.</returns>
        </member>
        <member name="M:Towel.Statics.GetLeast``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``1)">
            <summary>Gets the <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> instances.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetLeast``2(System.ReadOnlySpan{``0},System.Int32,``1)">
            <summary>Gets the <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> instances.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetGreatest``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``1)">
            <summary>Gets the <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> instances.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetGreatest``2(System.ReadOnlySpan{``0},System.Int32,``1)">
            <summary>Gets the <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <typeparam name="TCompare">The type of function for comparing <typeparamref name="T"/> instances.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetGreatest``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,Towel.CompareResult})">
            <summary>Gets the <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetGreatest``1(System.ReadOnlySpan{``0},System.Int32,System.Func{``0,``0,Towel.CompareResult})">
            <summary>Gets the <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> greatest values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,Towel.CompareResult})">
            <summary>Gets the <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.GetLeast``1(System.ReadOnlySpan{``0},System.Int32,System.Func{``0,``0,Towel.CompareResult})">
            <summary>Gets the <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</summary>
            <typeparam name="T">The type of <paramref name="values"/>.</typeparam>
            <param name="values">The values to get <paramref name="count"/> values from.</param>
            <param name="count">The number of items to get from <paramref name="values"/>.</param>
            <param name="compare">The function for comparing <typeparamref name="T"/> instances.</param>
            <returns>The <paramref name="count"/> least values from <paramref name="values"/> in <strong>no particular order</strong>.</returns>
        </member>
        <member name="M:Towel.Statics.CombineRanges``1(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``0}})">
            <summary>Simplifies a sequence of ranges by merging ranges without gaps between them.</summary>
            <typeparam name="T">The type of values in the sequances of ranges to combine.</typeparam>
            <param name="ranges">The ranges to be simplified.</param>
            <returns>A potentially smaller sequence of ranges that have been merged if there were no gaps in no particular order.</returns>
        </member>
        <member name="M:Towel.Statics.Reverse``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.Reverse``3(System.Int32,System.Int32,``1,``2)"/>
        </member>
        <member name="M:Towel.Statics.Reverse``3(System.Int32,System.Int32,``1,``2)">
            <summary>Reverses the values in an <see cref="T:System.Int32"/> indexed sequence.</summary>
            <typeparam name="T">The type of values to reverse.</typeparam>
            <typeparam name="TGet">The type of the get function.</typeparam>
            <typeparam name="TSet">The type of the set function.</typeparam>
            <param name="start">The starting index of the reverse.</param>
            <param name="end">The ending index of the reverse.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
        </member>
        <member name="M:Towel.Statics.XML_Shuffle">
            <summary>
            Sorts values into a randomized order.<br/>
            Runtime: O(n)<br/>
            Memory: O(1)
            </summary>
            <typeparam name="T">The type of values to shuffle.</typeparam>
            <typeparam name="TGet">The type of the get function.</typeparam>
            <typeparam name="TSet">The type of the set function.</typeparam>
            <param name="start">The starting index of the shuffle.</param>
            <param name="end">The ending index of the shuffle.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
            <param name="random">The random to shuffle with.</param>
            <param name="span">The span to shuffle.</param>
        </member>
        <member name="M:Towel.Statics.Shuffle``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_Shuffle"/>
        </member>
        <member name="M:Towel.Statics.Shuffle``3(System.Int32,System.Int32,``1,``2,System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_Shuffle"/>
        </member>
        <member name="M:Towel.Statics.Shuffle``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_Shuffle"/>
        </member>
        <member name="M:Towel.Statics.Shuffle``1(System.Span{``0},System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_Shuffle"/>
        </member>
        <member name="M:Towel.Statics.Shuffle``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_Shuffle"/>
        </member>
        <member name="M:Towel.Statics.XML_Sort">
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TCompare">The type of compare function.</typeparam>
            <typeparam name="TGet">The type of get function.</typeparam>
            <typeparam name="TSet">The type of set function.</typeparam>
            <param name="compare">The compare function.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <param name="array">The array to be sorted.</param>
            <param name="span">The span to be sorted.</param>
        </member>
        <member name="M:Towel.Statics.XML_SortBubble">
            <summary>
            Sorts values using the bubble sort algorithm.<br/>
            Runtime: Î©(n), Îµ(n^2), O(n^2)<br/>
            Memory: O(1)<br/>
            Stable: True
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortBubble``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortBubble"/>
        </member>
        <member name="M:Towel.Statics.SortBubble``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBubble"/>
        </member>
        <member name="M:Towel.Statics.SortBubble``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortBubble"/>
        </member>
        <member name="M:Towel.Statics.SortBubble``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBubble"/>
        </member>
        <member name="M:Towel.Statics.XML_SortSelection">
            <summary>
            Sorts values using the selection sort algoritm.<br/>
            Runtime: Î©(n^2), Îµ(n^2), O(n^2)<br/>
            Memory: O(1)<br/>
            Stable: False
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortSelection``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortSelection"/>
        </member>
        <member name="M:Towel.Statics.SortSelection``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortSelection"/>
        </member>
        <member name="M:Towel.Statics.SortSelection``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortSelection"/>
        </member>
        <member name="M:Towel.Statics.SortSelection``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortSelection"/>
        </member>
        <member name="M:Towel.Statics.XML_SortInsertion">
            <summary>
            Sorts values using the insertion sort algorithm.<br/>
            Runtime: Î©(n), Îµ(n^2), O(n^2)<br/>
            Memory: O(1)<br/>
            Stable: True
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortInsertion``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortInsertion"/>
        </member>
        <member name="M:Towel.Statics.SortInsertion``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortInsertion"/>
        </member>
        <member name="M:Towel.Statics.SortInsertion``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortInsertion"/>
        </member>
        <member name="M:Towel.Statics.SortInsertion``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortInsertion"/>
        </member>
        <member name="M:Towel.Statics.XML_SortQuick">
            <summary>
            Sorts values using the quick sort algorithm.<br/>
            Runtime: Î©(n*ln(n)), Îµ(n*ln(n)), O(n^2)<br/>
            Memory: ln(n)<br/>
            Stable: False
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortQuick``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortQuick"/>
        </member>
        <member name="M:Towel.Statics.SortQuick``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortQuick"/>
        </member>
        <member name="M:Towel.Statics.SortQuick``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortQuick"/>
        </member>
        <member name="M:Towel.Statics.SortQuick``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortQuick"/>
        </member>
        <member name="M:Towel.Statics.XML_SortMerge">
            <summary>
            Sorts values using the merge sort algorithm.<br/>
            Runtime: Î©(n*ln(n)), Îµ(n*ln(n)), O(n*ln(n))<br/>
            Memory: Î˜(n)<br/>
            Stable: True
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortMerge``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortMerge"/>
        </member>
        <member name="M:Towel.Statics.SortMerge``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortMerge"/>
        </member>
        <member name="M:Towel.Statics.SortMerge``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortMerge"/>
        </member>
        <member name="M:Towel.Statics.SortMerge``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortMerge"/>
        </member>
        <member name="M:Towel.Statics.XML_SortHeap">
            <summary>
            Sorts values using the heap sort algorithm.<br/>
            Runtime: Î©(n*ln(n)), Îµ(n*ln(n)), O(n^2)<br/>
            Memory: O(1)<br/>
            Stable: False
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortHeap``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortHeap"/>
        </member>
        <member name="M:Towel.Statics.SortHeap``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortHeap"/>
        </member>
        <member name="M:Towel.Statics.SortHeap``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortHeap"/>
        </member>
        <member name="M:Towel.Statics.SortHeap``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortHeap"/>
        </member>
        <member name="M:Towel.Statics.XML_SortOddEven">
            <summary>
            Sorts values using the odd even sort algorithm.<br/>
            Runtime: Î©(n), Îµ(n^2), O(n^2)<br/>
            Memory: O(1)<br/>
            Stable: True
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortOddEven``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortOddEven"/>
        </member>
        <member name="M:Towel.Statics.SortOddEven``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortOddEven"/>
        </member>
        <member name="M:Towel.Statics.SortOddEven``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortOddEven"/>
        </member>
        <member name="M:Towel.Statics.SortOddEven``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortOddEven"/>
        </member>
        <member name="M:Towel.Statics.XML_SortBogo">
            <summary>
            Sorts values using the bogo sort algorithm.<br/>
            Runtime: Î©(n), Îµ(n*n!), O(âˆž)<br/>
            Memory: O(1)<br/>
            Stable: False
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult},System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``4(System.Int32,System.Int32,``1,``2,``3,System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``5(System.Int32,System.Int32,``1,``2,``3,``4)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult},System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``2(System.Span{``0},``1,System.Random)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.SortBogo``3(System.Span{``0},``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_SortBogo"/>
        </member>
        <member name="M:Towel.Statics.XML_SortSlow">
            <summary>Sorts values using the slow sort algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortSlow``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortSlow"/>
        </member>
        <member name="M:Towel.Statics.SortSlow``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortSlow"/>
        </member>
        <member name="M:Towel.Statics.SortSlow``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortSlow"/>
        </member>
        <member name="M:Towel.Statics.SortSlow``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortSlow"/>
        </member>
        <member name="M:Towel.Statics.XML_SortGnome">
            <summary>Sorts values using the gnome sort algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortGnome``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortGnome"/>
        </member>
        <member name="M:Towel.Statics.SortGnome``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortGnome"/>
        </member>
        <member name="M:Towel.Statics.SortGnome``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortGnome"/>
        </member>
        <member name="M:Towel.Statics.SortGnome``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortGnome"/>
        </member>
        <member name="M:Towel.Statics.XML_SortComb">
            <summary>Sorts values using the comb sort algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortComb``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortComb"/>
        </member>
        <member name="M:Towel.Statics.SortComb``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortComb"/>
        </member>
        <member name="M:Towel.Statics.SortComb``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortComb"/>
        </member>
        <member name="M:Towel.Statics.SortComb``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortComb"/>
        </member>
        <member name="M:Towel.Statics.XML_SortShell">
            <summary>Sorts values using the shell sort algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortShell``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortShell"/>
        </member>
        <member name="M:Towel.Statics.SortShell``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortShell"/>
        </member>
        <member name="M:Towel.Statics.SortShell``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortShell"/>
        </member>
        <member name="M:Towel.Statics.SortShell``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortShell"/>
        </member>
        <member name="M:Towel.Statics.XML_SortCocktail">
            <summary>Sorts values using the cocktail sort algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortCocktail``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortCocktail"/>
        </member>
        <member name="M:Towel.Statics.SortCocktail``4(System.Int32,System.Int32,``3,``1,``2)">
            <inheritdoc cref="M:Towel.Statics.XML_SortCocktail"/>
        </member>
        <member name="M:Towel.Statics.SortCocktail``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortCocktail"/>
        </member>
        <member name="M:Towel.Statics.SortCocktail``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortCocktail"/>
        </member>
        <member name="M:Towel.Statics.XML_SortCycle">
            <summary>Sorts values using the cycle algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortCycle``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortCycle"/>
        </member>
        <member name="M:Towel.Statics.SortCycle``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortCycle"/>
        </member>
        <member name="M:Towel.Statics.SortCycle``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortCycle"/>
        </member>
        <member name="M:Towel.Statics.SortCycle``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortCycle"/>
        </member>
        <member name="M:Towel.Statics.XML_SortPancake">
            <summary>Sorts values using the pancake algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortPancake``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortPancake"/>
        </member>
        <member name="M:Towel.Statics.SortPancake``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortPancake"/>
        </member>
        <member name="M:Towel.Statics.SortPancake``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortPancake"/>
        </member>
        <member name="M:Towel.Statics.SortPancake``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortPancake"/>
        </member>
        <member name="M:Towel.Statics.XML_SortStooge">
            <summary>Sorts values using the stooge algorithm.</summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortStooge``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortStooge"/>
        </member>
        <member name="M:Towel.Statics.SortStooge``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortPancake"/>
        </member>
        <member name="M:Towel.Statics.SortStooge``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortStooge"/>
        </member>
        <member name="M:Towel.Statics.SortStooge``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortStooge"/>
        </member>
        <member name="M:Towel.Statics.XML_SortTim">
            <summary>
            Sorts values using the Tim sort algorithm.<br/>
            Runtime: Î©(n), Îµ(n*ln(n)), O(n*ln(n))<br/>
            Memory: O(n)<br/>
            Stable: True
            </summary>
            <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
        </member>
        <member name="M:Towel.Statics.SortTim``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortHeap"/>
        </member>
        <member name="M:Towel.Statics.SortTim``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortTim"/>
        </member>
        <member name="M:Towel.Statics.SortTim``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortTim"/>
        </member>
        <member name="M:Towel.Statics.SortTim``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortTim"/>
        </member>
        <member name="M:Towel.Statics.SortCounting(System.Int32,System.Int32,System.Func{System.Int32,System.UInt32},System.Action{System.Int32,System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortCounting``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortCounting``1(System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.SortCounting``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortCounting``2(System.Int32,System.Int32,``0,``1)">
            <inheritdoc cref="M:Towel.Statics.SortCounting``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortCounting``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>
            Sorts values using the counting sort algorithm.<br/>
            Runtime: Î˜(Max(<paramref name="select"/>(n)))<br/>
            Memory: Î˜(Max(<paramref name="select"/>(n)))<br/>
            Stable: True
            </summary>
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TSelect">The type of method for selecting an <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</typeparam>
            <typeparam name="TGet">The type of get function.</typeparam>
            <typeparam name="TSet">The type of set function.</typeparam>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <param name="select">The method for selecting <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
        </member>
        <member name="M:Towel.Statics.SortCounting(System.Span{System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortCounting``2(System.Span{``0},``1)"/>
        </member>
        <member name="M:Towel.Statics.SortCounting``1(System.Span{``0},System.Func{``0,System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortCounting``2(System.Span{``0},``1)"/>
        </member>
        <member name="M:Towel.Statics.SortCounting``2(System.Span{``0},``1)">
            <summary>
            Sorts values using the counting sort algorithm.<br/>
            Runtime: Î˜(Max(<paramref name="select"/>(<paramref name="span"/>)))<br/>
            Memory: Î˜(Max(<paramref name="select"/>(<paramref name="span"/>)))<br/>
            Stable: True
            </summary>
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TSelect">The type of method for selecting an <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</typeparam>
            <param name="span">The span to be sorted.</param>
            <param name="select">The method for selecting <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</param>
        </member>
        <member name="M:Towel.Statics.SortRadix(System.Int32,System.Int32,System.Func{System.Int32,System.UInt32},System.Action{System.Int32,System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortRadix``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortRadix``1(System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Func{System.Int32,``0},System.Action{System.Int32,``0})">
            <inheritdoc cref="M:Towel.Statics.SortRadix``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortRadix``2(System.Int32,System.Int32,``0,``1)">
            <inheritdoc cref="M:Towel.Statics.SortRadix``4(System.Int32,System.Int32,``1,``2,``3)"/>
        </member>
        <member name="M:Towel.Statics.SortRadix``4(System.Int32,System.Int32,``1,``2,``3)">
            <summary>
            Sorts values using the radix sort algorithm.
            </summary>
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TSelect">The type of method for selecting an <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</typeparam>
            <typeparam name="TGet">The type of get function.</typeparam>
            <typeparam name="TSet">The type of set function.</typeparam>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <param name="select">The method for selecting <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
        </member>
        <member name="M:Towel.Statics.SortRadix(System.Span{System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortRadix``2(System.Span{``0},``1)"/>
        </member>
        <member name="M:Towel.Statics.SortRadix``1(System.Span{``0},System.Func{``0,System.UInt32})">
            <inheritdoc cref="M:Towel.Statics.SortRadix``2(System.Span{``0},``1)"/>
        </member>
        <member name="M:Towel.Statics.SortRadix``2(System.Span{``0},``1)">
            <summary>
            Sorts values using the radix sort algorithm.
            </summary>
            <typeparam name="T">The type of values to sort.</typeparam>
            <typeparam name="TSelect">The type of method for selecting an <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</typeparam>
            <param name="span">The span to be sorted.</param>
            <param name="select">The method for selecting <see cref="T:System.Int32"/> values from <typeparamref name="T"/> values.</param>
        </member>
        <member name="M:Towel.Statics.SortPidgeonHole(System.Int32,System.Int32,System.Func{System.Int32,System.Int32},System.Action{System.Int32,System.Int32})">
            <inheritdoc cref="M:Towel.Statics.SortPidgeonHole``2(System.Int32,System.Int32,``0,``1)"/>
        </member>
        <member name="M:Towel.Statics.SortPidgeonHole``2(System.Int32,System.Int32,``0,``1)">
            <summary>
            Sorts values using the pidgeon hole sort algorithm.
            </summary>
            <typeparam name="TGet">The type of get function.</typeparam>
            <typeparam name="TSet">The type of set function.</typeparam>
            <param name="start">The starting index of the sort.</param>
            <param name="end">The ending index of the sort.</param>
            <param name="get">The get function.</param>
            <param name="set">The set function.</param>
        </member>
        <member name="M:Towel.Statics.SortPidgeonHole(System.Span{System.Int32})">
            <summary>
            Sorts values using the pidgeon hole sort algorithm.
            </summary>
            <param name="span">The span to be sorted.</param>
        </member>
        <member name="M:Towel.Statics.XML_SortIntro">
             <summary>
             Sorts values using the introspective sort algorithm.<br/>
             Runtime: Î©(n*ln(n)), Îµ(n*ln(n)), O(n*ln(n))<br/>
             Memory: Î˜(n)<br/>
             Stable: False
             </summary>
             <inheritdoc cref="M:Towel.Statics.XML_Sort"/>
             <citation>
             The code for introspective sort was forked from the dotnet/runtime repo. Here is their license:
             https://github.com/dotnet/runtime/blob/358ee3c9f61d8c11f7cac067307db1b2d6690f3c/src/libraries/System.Private.CoreLib/src/System/Array.cs#L2027
            
             The MIT License (MIT)
            
             Copyright(c) .NET Foundation and Contributors
            
             All rights reserved.
            
             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files(the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:
            
             The above copyright notice and this permission notice shall be included in all
             copies or substantial portions of the Software.
            
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
             SOFTWARE.
             </citation>
        </member>
        <member name="M:Towel.Statics.SortIntro``1(System.Int32,System.Int32,System.Func{System.Int32,``0},System.Action{System.Int32,``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortIntro"/>
        </member>
        <member name="M:Towel.Statics.SortIntro``4(System.Int32,System.Int32,``1,``2,``3)">
            <inheritdoc cref="M:Towel.Statics.XML_SortIntro"/>
        </member>
        <member name="M:Towel.Statics.SortIntro``1(System.Span{``0},System.Func{``0,``0,Towel.CompareResult})">
            <inheritdoc cref="M:Towel.Statics.XML_SortIntro"/>
        </member>
        <member name="M:Towel.Statics.SortIntro``2(System.Span{``0},``1)">
            <inheritdoc cref="M:Towel.Statics.XML_SortIntro"/>
        </member>
        <member name="T:Towel.Statics.Int32Hash">
            <summary>Hashing function for <see cref="T:System.Int32"/>.</summary>
        </member>
        <member name="M:Towel.Statics.Int32Hash.Invoke(System.Int32)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="T:Towel.Statics.Int32Equate">
            <summary>Equality checking function for <see cref="T:System.Int32"/>.</summary>
        </member>
        <member name="M:Towel.Statics.Int32Equate.Invoke(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.Statics.Int32Compare">
            <summary>Comparing function for <see cref="T:System.Int32"/>.</summary>
        </member>
        <member name="M:Towel.Statics.Int32Compare.Invoke(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.Statics.CharEquate">
            <summary>Equality checking function for <see cref="T:System.Char"/>.</summary>
        </member>
        <member name="M:Towel.Statics.CharEquate.Invoke(System.Char,System.Char)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.Statics.CharHash">
            <summary>Hashing function for <see cref="T:System.Char"/>.</summary>
        </member>
        <member name="M:Towel.Statics.CharHash.Invoke(System.Char)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="T:Towel.Statics.StringEquate">
            <summary>Equality checking function for <see cref="T:System.String"/>.</summary>
        </member>
        <member name="M:Towel.Statics.StringEquate.Invoke(System.String,System.String)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="T:Towel.Statics.StringHash">
            <summary>Hashing function for <see cref="T:System.String"/>.</summary>
        </member>
        <member name="M:Towel.Statics.StringHash.Invoke(System.String)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="T:Towel.Statics.Identity`1">
            <summary>Built in function type to return the value passed in.</summary>
            <typeparam name="T">The type of value to be passed in and returned.</typeparam>
        </member>
        <member name="M:Towel.Statics.Identity`1.Invoke(`0)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="T:Towel.Statics.StepBreakFromAction`2">
            <summary>Built in struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values.</typeparam>
            <typeparam name="TStep">The Step function.</typeparam>
        </member>
        <member name="M:Towel.Statics.StepBreakFromAction`2.Invoke(`0)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="M:Towel.Statics.StepBreakFromAction`2.op_Implicit(`1)~Towel.Statics.StepBreakFromAction{`0,`1}">
            <summary>Implicitly wraps runtime computation inside a compile time struct.</summary>
            <param name="step">The runtime Step delegate.</param>
        </member>
        <member name="T:Towel.Statics.CompareInvert`2">
            <summary>Inverts the results of a comparison.</summary>
            <typeparam name="T">The types being compared.</typeparam>
            <typeparam name="TCompare">The type of the compare function.</typeparam>
        </member>
        <member name="M:Towel.Statics.CompareInvert`2.Invoke(`0,`0)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="M:Towel.Statics.CompareInvert`2.op_Implicit(`1)~Towel.Statics.CompareInvert{`0,`1}">
            <summary>Inverts a <typeparamref name="TCompare"/>.</summary>
            <param name="compare">The <typeparamref name="TCompare"/> to invert.</param>
        </member>
        <member name="T:Towel.Statics.SiftFromCompareAndValue`2">
            <summary>Built in Compare struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values to compare.</typeparam>
            <typeparam name="TCompare">The compare function.</typeparam>
        </member>
        <member name="M:Towel.Statics.SiftFromCompareAndValue`2.Invoke(`0)">
            <inheritdoc cref="M:System.Func`2.Invoke(`0)"/>
        </member>
        <member name="M:Towel.Statics.SiftFromCompareAndValue`2.#ctor(`0,`1)">
            <summary>Creates a compile-time-resolved sifting function to be passed into another type.</summary>
            <param name="value">The value for future values to be compared against.</param>
            <param name="compare">The compare function.</param>
        </member>
        <member name="T:Towel.Statics.PredicateFromEquateAndValue`2">
            <summary>Built in Compare struct for runtime computations.</summary>
            <typeparam name="T">The generic type of the values to compare.</typeparam>
            <typeparam name="TEquate">The equality check function.</typeparam>
        </member>
        <member name="M:Towel.Statics.PredicateFromEquateAndValue`2.Invoke(`0)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="M:Towel.Statics.PredicateFromEquateAndValue`2.#ctor(`0,`1)">
            <summary>Creates a compile-time-resolved sifting function to be passed into another type.</summary>
            <param name="value">The value for future values to be compared against.</param>
            <param name="equate">The compare function.</param>
        </member>
        <member name="T:Towel.Statics.StepStatusContinue">
            <summary>Compile time resulution to the <see cref="F:Towel.StepStatus.Continue"/> value.</summary>
        </member>
        <member name="M:Towel.Statics.StepStatusContinue.Invoke">
            <summary>Returns <see cref="F:Towel.StepStatus.Continue"/>.</summary>
            <returns><see cref="F:Towel.StepStatus.Continue"/></returns>
        </member>
        <member name="T:Towel.Statics.RandomNextIntMinValueIntMaxValue">
            <summary>Struct wrapper for the <see cref="M:System.Random.Next(System.Int32,System.Int32)"/> method as an <see cref="T:Towel.IFunc`3"/>.</summary>
        </member>
        <member name="M:Towel.Statics.RandomNextIntMinValueIntMaxValue.Invoke(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Func`3.Invoke(`0,`1)"/>
        </member>
        <member name="M:Towel.Statics.RandomNextIntMinValueIntMaxValue.op_Implicit(System.Random)~Towel.Statics.RandomNextIntMinValueIntMaxValue">
            <summary>Converts a <see cref="T:System.Random"/> to a <see cref="T:Towel.Statics.RandomNextIntMinValueIntMaxValue"/>.</summary>
            <param name="random">The <see cref="T:System.Random"/> to convert into a <see cref="T:Towel.Statics.RandomNextIntMinValueIntMaxValue"/>.</param>
        </member>
        <member name="T:Towel.Statics.Action_ReadOnlySpan`1">
            <summary>Encapsulates a method that has a single <see cref="T:System.ReadOnlySpan`1"/> parameter and does not return a value.</summary>
            <typeparam name="T">The type of the <see cref="T:System.ReadOnlySpan`1"/> parameter of the method that this delegate encapsulates.</typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Towel.Statics.IAction_ReadOnlySpan`1">
            <inheritdoc cref="T:Towel.Statics.Action_ReadOnlySpan`1"/>
        </member>
        <member name="M:Towel.Statics.IAction_ReadOnlySpan`1.Invoke(System.ReadOnlySpan{`0})">
            <inheritdoc cref="M:Towel.Statics.Action_ReadOnlySpan`1.Invoke(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="T:Towel.Statics.Action_ReadOnlySpan_Runtime`1">
            <inheritdoc cref="T:Towel.Statics.Action_ReadOnlySpan`1"/>
        </member>
        <member name="M:Towel.Statics.Action_ReadOnlySpan_Runtime`1.Invoke(System.ReadOnlySpan{`0})">
            <inheritdoc cref="M:Towel.Statics.Action_ReadOnlySpan`1.Invoke(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:Towel.Statics.Action_ReadOnlySpan_Runtime`1.op_Implicit(Towel.Statics.Action_ReadOnlySpan{`0})~Towel.Statics.Action_ReadOnlySpan_Runtime{`0}">
            <summary>Wraps an <see cref="T:Towel.Statics.Action_ReadOnlySpan`1"/> in an <see cref="T:Towel.Statics.Action_ReadOnlySpan_Runtime`1"/>.</summary>
            <param name="action">The <see cref="T:Towel.Statics.Action_ReadOnlySpan`1"/> wrapped in an <see cref="T:Towel.Statics.Action_ReadOnlySpan_Runtime`1"/>.</param>
        </member>
        <member name="F:Towel.Statics.Continue">
            <summary>Stepper was not broken.</summary>
        </member>
        <member name="F:Towel.Statics.Break">
            <summary>Stepper was broken.</summary>
        </member>
        <member name="F:Towel.Statics.Goal">
            <summary>The Goal was found.</summary>
        </member>
        <member name="F:Towel.Statics.Less">
            <summary>The left operand is less than the right operand.</summary>
        </member>
        <member name="F:Towel.Statics.Equal">
            <summary>The left operand is equal to the right operand.</summary>
        </member>
        <member name="F:Towel.Statics.Greater">
            <summary>The left operand is greater than the right operand.</summary>
        </member>
        <member name="F:Towel.Statics.None">
            <summary>There is no bound.</summary>
        </member>
        <member name="F:Towel.Statics.Default">
            <summary>The default case in a Switch statement (true).</summary>
        </member>
        <member name="M:Towel.Statics.Switch(System.ValueTuple{Towel.Statics.SwitchSyntax.Condition,System.Action}[])">
            <summary>Syntax sugar Switch statements.</summary>
            <param name="possibleActions">The possible actions of the Switch statement.</param>
        </member>
        <member name="M:Towel.Statics.Switch``1(``0)">
            <summary>Syntax sugar Switch statements.</summary>
            <typeparam name="T">The generic type parameter to the Switch statement.</typeparam>
            <param name="value">The value argument of the Switch statement.</param>
            <returns>The delegate for the Switch statement.</returns>
        </member>
        <member name="T:Towel.Statics.SwitchSyntax">
            <summary>Definitions for Switch syntax.</summary>
        </member>
        <member name="T:Towel.Statics.SwitchSyntax.ParamsAction`2">
            <summary>Delegate with params intended to be used with the Switch syntax.</summary>
            <typeparam name="TA">The first type in the value tuples in the array.</typeparam>
            <typeparam name="TB">The second type in the value tuples in the array.</typeparam>
            <param name="values">The param values.</param>
        </member>
        <member name="T:Towel.Statics.SwitchSyntax.Keyword">
            <summary>Intended to be used with Switch syntax.</summary>
        </member>
        <member name="F:Towel.Statics.SwitchSyntax.Keyword.Default">
            <summary>The default keyword for the the Switch syntax.</summary>
        </member>
        <member name="T:Towel.Statics.SwitchSyntax.Condition`1">
            <summary>Represents the result of a conditional expression inside Switch syntax.</summary>
            <typeparam name="T">The generic type of the Switch condition for equality checks.</typeparam>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition`1.Resolve(`0)">
            <summary>Resolves the condition to a bool.</summary>
            <param name="b">The right value to compare this condition to.</param>
            <returns>The result of the condition.</returns>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition`1.op_Implicit(`0)~Towel.Statics.SwitchSyntax.Condition{`0}">
            <summary>Casts a <typeparamref name="T"/> to a bool using an equality check.</summary>
            <param name="value">The value this condition will compare with.</param>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition`1.op_Implicit(System.Boolean)~Towel.Statics.SwitchSyntax.Condition{`0}">
            <summary>Uses the bool as the condition result.</summary>
            <param name="result">The <see cref="T:System.Boolean"/>result of this condition.</param>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition`1.op_Implicit(Towel.Statics.SwitchSyntax.Keyword)~Towel.Statics.SwitchSyntax.Condition{`0}">
            <summary>Converts a keyword to a condition result (for "Default" case).</summary>
            <param name="keyword"><see cref="F:Towel.Statics.SwitchSyntax.Keyword.Default"/></param>
        </member>
        <member name="F:Towel.Statics.SwitchSyntax.Value`1.A">
            <summary>The value of this condition for an equality check.</summary>
        </member>
        <member name="T:Towel.Statics.SwitchSyntax.Condition">
            <summary>Represents the result of a conditional expression inside Switch syntax.</summary>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition.Resolve">
            <summary>Resolves the condition to a bool.</summary>
            <returns>The result of the condition.</returns>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition.op_Implicit(System.Boolean)~Towel.Statics.SwitchSyntax.Condition">
            <summary>Uses the bool as the condition result.</summary>
            <param name="result">The <see cref="T:System.Boolean"/>result of this condition.</param>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition.op_Implicit(Towel.Statics.SwitchSyntax.Keyword)~Towel.Statics.SwitchSyntax.Condition">
            <summary>Converts a keyword to a condition result (for "Default" case).</summary>
            <param name="keyword"><see cref="F:Towel.Statics.SwitchSyntax.Keyword.Default"/></param>
        </member>
        <member name="M:Towel.Statics.SwitchSyntax.Condition.op_Implicit(Towel.Statics.SwitchSyntax.Condition)~System.Boolean">
            <summary>Converts a condition to a bool using the Resolve method.</summary>
            <param name="condition">The condition to resolve to a <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="P:Towel.Statics.Chance">
            <summary>Allows chance syntax with "using static Towel.Syntax;".</summary>
            <example>25% Chance</example>
        </member>
        <member name="T:Towel.Statics.ChanceSyntax">
            <summary>Struct that allows percentage syntax that will be evaluated at runtime.</summary>
        </member>
        <member name="M:Towel.Statics.ChanceSyntax.op_Modulus(System.Double,Towel.Statics.ChanceSyntax)">
            <summary>Creates a chance from a percentage that will be evaluated at runtime.</summary>
            <param name="percentage">The value of the percentage.</param>
            <param name="chance">The chance syntax struct object.</param>
            <returns>True if the the chance hits. False if not.</returns>
        </member>
        <member name="T:Towel.Statics.Inequality`1">
            <summary>Used for inequality syntax.</summary>
            <typeparam name="T">The generic type of elements the inequality is being used on.</typeparam>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_Implicit(`0)~Towel.Statics.Inequality{`0}">
            <summary>Contructs a new <see cref="T:Towel.Statics.Inequality`1"/>.</summary>
            <param name="a">The initial value of the running inequality.</param>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_GreaterThan(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds a greater than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than operation.</param>
            <returns>A running inequality with the additonal greater than operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_LessThan(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds a less than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than operation.</param>
            <returns>A running inequality with the additonal less than operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_GreaterThanOrEqual(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds a greater than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than or equal operation.</param>
            <returns>A running inequality with the additonal greater than or equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_LessThanOrEqual(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds a less than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than or equal operation.</param>
            <returns>A running inequality with the additonal less than or equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_Equality(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds an equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the equal operation.</param>
            <returns>A running inequality with the additonal equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.op_Inequality(Towel.Statics.Inequality{`0},`0)">
            <summary>Adds an inequal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the inequal operation.</param>
            <returns>A running inequality with the additonal inequal operation.</returns>
        </member>
        <member name="M:Towel.Statics.Inequality`1.ToString">
            <summary>This member is not intended to be invoked.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.Inequality`1.Equals(System.Object)">
            <summary>This member is not intended to be invoked.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.Inequality`1.GetHashCode">
            <summary>This member is not intended to be invoked.</summary>
            <inheritdoc/>
        </member>
        <member name="T:Towel.Statics.OperatorValidated">
            <summary>Helper type for inequality syntax. Contains an Inequality type that has been operator validated.</summary>
        </member>
        <member name="T:Towel.Statics.OperatorValidated.Inequality`1">
            <summary>Used for inequality syntax.</summary>
            <typeparam name="T">The generic type of elements the inequality is being used on.</typeparam>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_Implicit(Towel.Statics.OperatorValidated.Inequality{`0})~System.Boolean">
            <summary>Converts this running inequality into the result of the expression.</summary>
            <param name="inequality">The inequality to convert into the result of the expression.</param>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_GreaterThan(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a greater than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than operation.</param>
            <returns>A running inequality with the additonal greater than operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_LessThan(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a less than operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than operation.</param>
            <returns>A running inequality with the additonal less than operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_GreaterThanOrEqual(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a greater than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the greater than or equal operation.</param>
            <returns>A running inequality with the additonal greater than or equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_LessThanOrEqual(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds a less than or equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the less than or equal operation.</param>
            <returns>A running inequality with the additonal less than or equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_Equality(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds an equal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the equal operation.</param>
            <returns>A running inequality with the additonal equal operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.op_Inequality(Towel.Statics.OperatorValidated.Inequality{`0},`0)">
            <summary>Adds an inequal operation to a running inequality.</summary>
            <param name="a">The current running inequality and left hand operand.</param>
            <param name="b">The value of the right hand operand of the inequal operation.</param>
            <returns>A running inequality with the additonal inequal operation.</returns>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.ToString">
            <summary>Converts the result of this inequality to a <see cref="T:System.String"/>.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.Equals(System.Object)">
            <summary>This member is not intended to be invoked.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.OperatorValidated.Inequality`1.GetHashCode">
            <summary>This member is not intended to be invoked.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.â±¯``1(``0[])">
            <summary>Universal Quantification Operator.</summary>
            <typeparam name="T">The element type of the universal quantification to declare.</typeparam>
            <param name="values">The values of the universal quantification.</param>
            <returns>The declared universal quantification.</returns>
        </member>
        <member name="T:Towel.Statics.UniversalQuantification`1">
            <summary>Universal Quantification.</summary>
            <typeparam name="T">The element type of the universal quantification.</typeparam>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.#ctor(`0[])">
            <summary>Not intended to be invoked directly.</summary>
            <param name="array">The array value of the universal quantification.</param>
        </member>
        <member name="P:Towel.Statics.UniversalQuantification`1.Length">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.StepperBreak``1(``0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.ToArray">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="P:Towel.Statics.UniversalQuantification`1.Item(System.Int32)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="P:Towel.Statics.UniversalQuantification`1.Count">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="P:Towel.Statics.UniversalQuantification`1.IsReadOnly">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.Add(`0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.Clear">
            <summary>Not intended to be invoked directly.</summary>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.Contains(`0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.CopyTo(`0[],System.Int32)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.IndexOf(`0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.Insert(System.Int32,`0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.Remove(`0)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.RemoveAt(System.Int32)">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.GetEnumerator">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Not intended to be invoked directly.</summary>
            <inheritdoc/>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.ReadOnlyMemory{`0}">
            <summary>Converts a universal quantification to a memory.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Memory{`0}">
            <summary>Converts a universal quantification to a memory.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.ReadOnlySpan{`0}">
            <summary>Converts a universal quantification to a span.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Span{`0}">
            <summary>Converts a universal quantification to a span.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~`0[]">
            <summary>Converts a universal quantification to an array.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.List{`0}">
            <summary>Converts a universal quantification to a <see cref="T:System.Collections.Generic.List`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.HashSet{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.HashSet`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.LinkedList{`0}">
            <summary>Converts a universal quantification to a <see cref="T:System.Collections.Generic.LinkedList`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.Stack{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.Stack`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.Queue{`0}">
            <summary>Converts a universal quantification to an <see cref="T:System.Collections.Generic.Queue`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Collections.Generic.SortedSet{`0}">
            <summary>Converts a universal quantification to a sorted <see cref="T:System.Collections.Generic.SortedSet`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Action{System.Action{`0}}">
            <summary>Converts a universal quantification to an Action&lt;Action&lt;T&gt;&gt;.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~System.Func{System.Func{`0,Towel.StepStatus},Towel.StepStatus}">
            <summary>Converts a universal quantification to an Func&lt;Func&lt;T, StepStatus&gt;, StepStatus&gt;.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~Towel.DataStructures.Array{`0}">
            <summary>Converts a universal quantification to an <see cref="T:Towel.DataStructures.Array`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~Towel.DataStructures.ListArray{`0}">
            <summary>Converts a universal quantification to an <see cref="T:Towel.DataStructures.ListArray`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.UniversalQuantification`1.op_Implicit(Towel.Statics.UniversalQuantification{`0})~Towel.DataStructures.StackArray{`0}">
            <summary>Converts a universal quantification to an <see cref="T:Towel.DataStructures.StackArray`1"/>.</summary>
            <param name="universalQuantification">The universal quantification to be converted.</param>
        </member>
        <member name="M:Towel.Statics.SineTaylorSeries``1(Towel.Measurements.Angle{``0},System.Predicate{``0})">
            <summary>Computes the sine ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the sine ratio of.</param>
            <param name="predicate">Determines if coputation should continue or is accurate enough.</param>
            <returns>The taylor series computed sine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.SineSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the sine ratio of an angle using the system's sine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the sine ratio of.</param>
            <returns>The sine ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.SineQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the sine ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated sine ratio of.</param>
            <returns>The quadratic estimation of the sine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.CosineTaylorSeries``1(Towel.Measurements.Angle{``0},System.Predicate{``0})">
            <summary>Computes the cosine ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cosine ratio of.</param>
            <param name="predicate">Determines if coputation should continue or is accurate enough.</param>
            <returns>The taylor series computed cosine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.CosineSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cosine ratio of an angle using the system's cosine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cosine ratio of.</param>
            <returns>The cosine ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.CosineQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cosine ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cosine ratio of.</param>
            <returns>The quadratic estimation of the cosine ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.TangentTaylorSeries``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the tangent ratio of an angle using the relative talor series. Accurate but slow.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the tangent ratio of.</param>
            <returns>The taylor series computed tangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.TangentSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the tangent ratio of an angle using the system's tangent function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the tangent ratio of.</param>
            <returns>The tangent ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.TangentQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the tangent ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated tangent ratio of.</param>
            <returns>The quadratic estimation of the tangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.CosecantSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cosecant ratio of an angle using the system's sine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cosecant ratio of.</param>
            <returns>The cosecant ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.CosecantQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cosecant ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cosecant ratio of.</param>
            <returns>The quadratic estimation of the cosecant ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.SecantSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the secant ratio of an angle using the system's cosine function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the secant ratio of.</param>
            <returns>The secant ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.SecantQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the secant ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated secant ratio of.</param>
            <returns>The quadratic estimation of the secant ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.CotangentSystem``1(Towel.Measurements.Angle{``0})">
            <summary>Computes the cotangent ratio of an angle using the system's tangent function. WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the cotangent ratio of.</param>
            <returns>The cotangent ratio of the provided angle.</returns>
            <remarks>WARNING! CONVERSION TO/FROM DOUBLE (possible loss of significant figures).</remarks>
        </member>
        <member name="M:Towel.Statics.CotangentQuadratic``1(Towel.Measurements.Angle{``0})">
            <summary>Estimates the cotangent ratio using piecewise quadratic equations. Fast but NOT very accurate.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The angle to compute the quadratic estimated cotangent ratio of.</param>
            <returns>The quadratic estimation of the cotangent ratio of the provided angle.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator(System.Runtime.CompilerServices.ITuple)">
            <summary>Gets an enumerator for a tuple.</summary>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.Tuple{``0,``0,``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="M:Towel.Statics.GetEnumerator``1(System.ValueTuple{``0,``0,``0,``0,``0,``0,``0})">
            <summary>Gets an enumerator for a tuple.</summary>
            <typeparam name="T">The type of values in the tuple.</typeparam>
            <param name="tuple">The tuple to get an enumerator for.</param>
            <returns>An enumerator for a tuple.</returns>
        </member>
        <member name="F:Towel.Statics.NotIntended">
            <summary>Related: https://github.com/dotnet/roslyn/issues/49568</summary>
        </member>
        <member name="F:Towel.Statics.Stackalloc">
            <summary>The max <see cref="T:System.Byte"/>s to stackalloc.</summary>
        </member>
        <member name="F:Towel.Statics.MultiplyAddImplementation`1.Function">
            <summary>a * b + c</summary>
        </member>
        <member name="F:Towel.Statics.D_subtract_A_multiply_B_divide_C`1.Function">
            <summary>d - a * b / c</summary>
        </member>
        <member name="M:Towel.Statics.Swap``1(``0@,``0@)">
            <summary>Swaps two values.</summary>
            <typeparam name="T">The type of values to swap.</typeparam>
            <param name="a">The first value of the swap.</param>
            <param name="b">The second value of the swap.</param>
        </member>
        <member name="M:Towel.Statics.Swap``3(System.Int32,System.Int32,``1,``2)">
            <summary>Swaps two values.</summary>
            <typeparam name="T">The type of values to swap.</typeparam>
            <typeparam name="TGet">The type of the get method.</typeparam>
            <typeparam name="TSet">The type of the set method.</typeparam>
            <param name="a">The index of the first value to swap.</param>
            <param name="b">The index of the second value to swap.</param>
            <param name="get">The the get method.</param>
            <param name="set">The the set method.</param>
        </member>
        <member name="M:Towel.Statics.sourcedirectory(System.String)">
            <summary>Gets the directory path of the current location in source code.</summary>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <returns>The directory path of the current location in source code.</returns>
        </member>
        <member name="M:Towel.Statics.sourcefilepath(System.String)">
            <summary>Gets the file path of the current location in source code.</summary>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <returns>The file path of the current location in source code.</returns>
        </member>
        <member name="M:Towel.Statics.sourcemembername(System.String)">
            <summary>Gets the member name of the current location in source code.</summary>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
            <returns>The member name of the current location in source code.</returns>
        </member>
        <member name="M:Towel.Statics.sourcelinenumber(System.Int32)">
            <summary>Gets the line number of the current location in source code.</summary>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>.</param>
            <returns>The line number of the current location in source code.</returns>
        </member>
        <member name="M:Towel.Statics.sourceof``1(``0,System.String)">
            <summary>Gets the source code and evaluation of an expression.</summary>
            <typeparam name="T">The type the expression will evaluate to.</typeparam>
            <param name="expression">The expression to evaluate and get the source of.</param>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/>.</param>
            <returns>The source code and evaluation of the expression.</returns>
        </member>
        <member name="M:Towel.Statics.sourceof``1(``0,System.String@,System.String)">
            <summary>Gets the source code and evaluation of an expression.</summary>
            <typeparam name="T">The type the expression will evaluate to.</typeparam>
            <param name="expression">The expression to evaluate and get the source of.</param>
            <param name="source">The source code of the expression.</param>
            <param name="default">Intended to leave default. This value is set by the compiler via <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/>.</param>
            <returns>The evaluation of the expression.</returns>
        </member>
        <member name="M:Towel.Statics.TryParse``1(System.String)">
            <summary>Tries to parse a <see cref="T:System.String"/> into a value of the type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type to parse the <see cref="T:System.String"/> into a value of.</typeparam>
            <param name="string">The <see cref="T:System.String"/> to parse into a value ot type <typeparamref name="T"/>.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Success: true if the parse was successful or false if not<br/>
            - <typeparamref name="T"/> Value: the value if the parse was successful or default if not
            </returns>
        </member>
        <member name="M:Towel.Statics.Hash``1(``0)">
            <summary>Static wrapper for the instance based "object.GetHashCode" function.</summary>
            <typeparam name="T">The generic type of the hash operation.</typeparam>
            <param name="value">The item to get the hash code of.</param>
            <returns>The computed hash code using the base GetHashCode instance method.</returns>
        </member>
        <member name="M:Towel.Statics.Convert``2(``0)">
            <summary>Converts <paramref name="a"/> from <typeparamref name="TA"/> to <typeparamref name="TB"/>.</summary>
            <typeparam name="TA">The type of the value to convert.</typeparam>
            <typeparam name="TB">The type to convert the value to.</typeparam>
            <param name="a">The value to convert.</param>
            <returns>The <paramref name="a"/> value of <typeparamref name="TB"/> type.</returns>
        </member>
        <member name="M:Towel.Statics.Join(System.Range,System.Func{System.Int32,System.String},System.String)">
            <summary>Iterates a <see cref="T:System.Range"/> and joins the results of a System.Func&lt;int, string&gt; seperated by a <see cref="T:System.String"/> <paramref name="seperator"/>.</summary>
            <param name="range">The range of values to use use on the &lt;System.Func{int, string&gt; <paramref name="func"/>.</param>
            <param name="func">The System.Func&lt;int, string&gt;.</param>
            <param name="seperator">The <see cref="T:System.String"/> seperator to join the values with.</param>
            <returns>The resulting <see cref="T:System.String"/> of the join.</returns>
        </member>
        <member name="M:Towel.Statics.Equate``1(``0,``0)">
            <summary>Checks for equality of two values [<paramref name="a"/> == <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Towel.Statics.Equate``1(``0,``0,``0[])">
            <summary>Checks for equality among multiple values [<paramref name="a"/> == <paramref name="b"/> == <paramref name="c"/> == ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="c">The remaining operands of the equality check.</param>
            <returns>True if all operands are equal or false if not.</returns>
        </member>
        <member name="M:Towel.Statics.Inequate``3(``0,``1)">
            <summary>Checks for inequality of two values [<paramref name="a"/> != <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the inequality.</returns>
        </member>
        <member name="M:Towel.Statics.Inequate``1(``0,``0)">
            <summary>Checks for inequality of two values [<paramref name="a"/> != <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the inequality check.</param>
            <param name="b">The second operand of the inequality check.</param>
            <returns>The result of the inequality check.</returns>
        </member>
        <member name="M:Towel.Statics.LessThan``3(``0,``1)">
            <summary>Checks if one value is less than another [<paramref name="a"/> &lt; <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the less than operation.</returns>
        </member>
        <member name="M:Towel.Statics.LessThan``1(``0,``0)">
            <summary>Checks if one value is less than another [<paramref name="a"/> &lt; <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than check.</param>
            <param name="b">The second operand of the less than check.</param>
            <returns>The result of the less than check.</returns>
        </member>
        <member name="M:Towel.Statics.GreaterThan``3(``0,``1)">
            <summary>Checks if one value is greater than another [<paramref name="a"/> &gt; <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the greater than operation.</returns>
        </member>
        <member name="M:Towel.Statics.GreaterThan``1(``0,``0)">
            <summary>Checks if one value is greater than another [<paramref name="a"/> &gt; <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than check.</param>
            <param name="b">The second operand of the greater than check.</param>
            <returns>The result of the greater than check.</returns>
        </member>
        <member name="M:Towel.Statics.LessThanOrEqual``3(``0,``1)">
            <summary>Checks if one value is less than or equal to another [<paramref name="a"/> &lt;= <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the less than or equal to operation.</returns>
        </member>
        <member name="M:Towel.Statics.LessThanOrEqual``1(``0,``0)">
            <summary>Checks if one value is less than or equal to another [<paramref name="a"/> &lt;= <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the less than or equal to check.</param>
            <param name="b">The second operand of the less than or equal to check.</param>
            <returns>The result of the less than or equal to check.</returns>
        </member>
        <member name="M:Towel.Statics.GreaterThanOrEqual``3(``0,``1)">
            <summary>Checks if one value is less greater or equal to another [<paramref name="a"/> &gt;= <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the greater than or equal to operation.</returns>
        </member>
        <member name="M:Towel.Statics.GreaterThanOrEqual``1(``0,``0)">
            <summary>Checks if one value is greater than or equal to another [<paramref name="a"/> &gt;= <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the greater than or equal to check.</param>
            <param name="b">The second operand of the greater than or equal to check.</param>
            <returns>The result of the greater than or equal to check.</returns>
        </member>
        <member name="M:Towel.Statics.Compare``1(``0,``0)">
            <summary>Compares two values.</summary>
            <typeparam name="T">The type of values to compare.</typeparam>
            <param name="a">The first value of the comparison.</param>
            <param name="b">The second value of the comparison.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:Towel.Statics.Negation``2(``0)">
            <summary>Negates a value [-<paramref name="a"/>].</summary>
            <typeparam name="TA">The type of the value to negate.</typeparam>
            <typeparam name="TB">The resulting type of the negation.</typeparam>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation [-<paramref name="a"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Negation``1(``0)">
            <summary>Negates a value [-<paramref name="a"/>].</summary>
            <typeparam name="T">The type of the value to negate.</typeparam>
            <param name="a">The value to negate.</param>
            <returns>The result of the negation [-<paramref name="a"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Addition``3(``0,``1)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Addition``1(``0,``0)">
            <summary>Adds two values [<paramref name="a"/> + <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Addition``1(``0,``0,``0,``0[])">
            <summary>Adds multiple values [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand of the addition.</param>
            <param name="b">The second operand of the addition.</param>
            <param name="c">The third operand of the addition.</param>
            <param name="d">The remaining operands of the addition.</param>
            <returns>The result of the addition [<paramref name="a"/> + <paramref name="b"/> + <paramref name="c"/> + ...].</returns>
        </member>
        <member name="M:Towel.Statics.Addition``1(System.Action{System.Action{``0}})">
            <summary>Adds multiple values [step1 + step2 + step3 + ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper of the values to add.</param>
            <returns>The result of the addition [step1 + step2 + step3 + ...].</returns>
        </member>
        <member name="M:Towel.Statics.Subtraction``3(``0,``1)">
            <summary>Subtracts two values [<paramref name="a"/> - <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Subtraction``1(``0,``0)">
            <summary>Subtracts two values [<paramref name="a"/> - <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Subtraction``1(``0,``0,``0,``0[])">
            <summary>Subtracts multiple values [<paramref name="a"/> - <paramref name="b"/> - <paramref name="c"/> - ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <param name="c">The third operand.</param>
            <param name="d">The remaining values.</param>
            <returns>The result of the subtraction [<paramref name="a"/> - <paramref name="b"/> - <paramref name="c"/> - ...].</returns>
        </member>
        <member name="M:Towel.Statics.Subtraction``1(System.Action{System.Action{``0}})">
            <summary>Subtracts multiple numeric values [step1 - step2 - step3 - ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the subtraction [step1 - step2 - step3 - ...].</returns>
        </member>
        <member name="M:Towel.Statics.Multiplication``3(``0,``1)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Multiplication``1(``0,``0)">
            <summary>Multiplies two values [<paramref name="a"/> * <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Multiplication``1(``0,``0,``0,``0[])">
            <summary>Multiplies multiple values [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <param name="c">The third operand.</param>
            <param name="d">The remaining values.</param>
            <returns>The result of the multiplication [<paramref name="a"/> * <paramref name="b"/> * <paramref name="c"/> * ...].</returns>
        </member>
        <member name="M:Towel.Statics.Multiplication``1(System.Action{System.Action{``0}})">
            <summary>Multiplies multiple values [step1 * step2 * step3 * ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the multiplication [step1 * step2 * step3 * ...].</returns>
        </member>
        <member name="M:Towel.Statics.Division``3(``0,``1)">
            <summary>Divides two values [<paramref name="a"/> / <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Division``1(``0,``0)">
            <summary>Divides two values [<paramref name="a"/> / <paramref name="b"/>].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Division``1(``0,``0,``0,``0[])">
            <summary>Divides multiple values [<paramref name="a"/> / <paramref name="b"/> / <paramref name="c"/> / ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="a">The first operand of the division.</param>
            <param name="b">The second operand of the division.</param>
            <param name="c">The third operand of the division.</param>
            <param name="d">The remaining values of the division.</param>
            <returns>The result of the division [<paramref name="a"/> / <paramref name="b"/> / <paramref name="c"/> / ...].</returns>
        </member>
        <member name="M:Towel.Statics.Division``1(System.Action{System.Action{``0}})">
            <summary>Divides multiple values [step1 / step2 / step3 / ...].</summary>
            <typeparam name="T">The type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the division [step1 / step2 / step3 / ...].</returns>
        </member>
        <member name="M:Towel.Statics.Remainder``3(``0,``1)">
            <summary>Remainders two values [<paramref name="a"/> % <paramref name="b"/>].</summary>
            <typeparam name="TA">The type of the left operand.</typeparam>
            <typeparam name="TB">The type of the right operand.</typeparam>
            <typeparam name="TC">The type of the return.</typeparam>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>The result of the remainder operation [<paramref name="a"/> % <paramref name="b"/>].</returns>
        </member>
        <member name="M:Towel.Statics.Remainder``1(``0,``0)">
            <summary>Modulos two numeric values [<paramref name="a"/> % <paramref name="b"/>].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Statics.Remainder``1(``0,``0,``0,``0[])">
            <summary>Modulos multiple numeric values [<paramref name="a"/> % <paramref name="b"/> % <paramref name="c"/> % ...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the modulation.</param>
            <param name="b">The second operand of the modulation.</param>
            <param name="c">The third operand of the modulation.</param>
            <param name="d">The remaining values of the modulation.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Statics.Remainder``1(System.Action{System.Action{``0}})">
            <summary>Modulos multiple numeric values [step_1 % step_2 % step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the modulation.</returns>
        </member>
        <member name="M:Towel.Statics.Inversion``1(``0)">
            <summary>Inverts a numeric value [1 / a].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to invert.</param>
            <returns>The result of the inversion.</returns>
        </member>
        <member name="M:Towel.Statics.Power``1(``0,``0)">
            <summary>Powers two numeric values [a ^ b].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The second operand of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Statics.Power``1(``0,``0,``0,``0[])">
            <summary>Powers multiple numeric values [a ^ b ^ c...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the power.</param>
            <param name="b">The second operand of the power.</param>
            <param name="c">The third operand of the power.</param>
            <param name="d">The remaining values of the power.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Statics.Power``1(System.Action{System.Action{``0}})">
            <summary>Powers multiple numeric values [step_1 ^ step_2 ^ step_3...].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The stepper containing the values.</param>
            <returns>The result of the power.</returns>
        </member>
        <member name="M:Towel.Statics.SquareRoot``1(``0)">
            <summary>Square roots a numeric value [âˆša].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The numeric value to square root.</param>
            <returns>The result of the square root.</returns>
        </member>
        <member name="M:Towel.Statics.Root``1(``0,``0)">
            <summary>Roots two numeric values [a ^ (1 / b)].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The base of the root.</param>
            <param name="b">The root of the operation.</param>
            <returns>The result of the root.</returns>
        </member>
        <member name="M:Towel.Statics.Logarithm``1(``0,``0)">
            <summary>Computes the logarithm of a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="value">The value to compute the logarithm of.</param>
            <param name="base">The base of the logarithm to compute.</param>
            <returns>The computed logarithm value.</returns>
        </member>
        <member name="M:Towel.Statics.IsInteger``1(``0)">
            <summary>Determines if a numerical value is an integer.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine integer status of.</param>
            <returns>Whether or not the value is an integer.</returns>
        </member>
        <member name="M:Towel.Statics.IsNonNegative``1(``0)">
            <summary>Determines if a numerical value is non-negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine non-negative status of.</param>
            <returns>Whether or not the value is non-negative.</returns>
        </member>
        <member name="M:Towel.Statics.IsNegative``1(``0)">
            <summary>Determines if a numerical value is negative.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine negative status of.</param>
            <returns>Whether or not the value is negative.</returns>
        </member>
        <member name="M:Towel.Statics.IsPositive``1(``0)">
            <summary>Determines if a numerical value is positive.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine positive status of.</param>
            <returns>Whether or not the value is positive.</returns>
        </member>
        <member name="M:Towel.Statics.IsEven``1(``0)">
            <summary>Determines if a numerical value is even.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine even status of.</param>
            <returns>Whether or not the value is even.</returns>
        </member>
        <member name="M:Towel.Statics.IsOdd``1(``0)">
            <summary>Determines if a numerical value is odd.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine odd status of.</param>
            <returns>Whether or not the value is odd.</returns>
        </member>
        <member name="M:Towel.Statics.IsPrime``1(``0)">
            <summary>Determines if a numerical value is prime.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to determine prime status of.</param>
            <returns>Whether or not the value is prime.</returns>
        </member>
        <member name="M:Towel.Statics.AbsoluteValue``1(``0)">
            <summary>Gets the absolute value of a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to get the absolute value of.</param>
            <returns>The absolute value of the provided value.</returns>
        </member>
        <member name="M:Towel.Statics.Clamp``1(``0,``0,``0)">
            <summary>Gets a value restricted to a minimum and maximum range.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="value">The value to clamp.</param>
            <param name="minimum">The minimum of the range to clamp the value by.</param>
            <param name="maximum">The maximum of the range to clamp the value by.</param>
            <returns>The value restricted to the provided range.</returns>
        </member>
        <member name="M:Towel.Statics.EqualToLeniency``1(``0,``0,``0)">
            <summary>Checks for equality between two numeric values with a range of possibly leniency.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the equality check.</param>
            <param name="b">The second operand of the equality check.</param>
            <param name="leniency">The allowed distance between the values to still be considered equal.</param>
            <returns>True if the values are within the allowed leniency of each other. False if not.</returns>
        </member>
        <member name="M:Towel.Statics.GreatestCommonFactor``1(``0,``0,``0[])">
            <summary>Computes the greatest common factor of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="a">The first operand of the greatest common factor computation.</param>
            <param name="b">The second operand of the greatest common factor computation.</param>
            <param name="c">The remaining operands of the greatest common factor computation.</param>
            <returns>The computed greatest common factor of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.GreatestCommonFactor``1(System.Action{System.Action{``0}})">
            <summary>Computes the greatest common factor of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="stepper">The set of numbers to compute the greatest common factor of.</param>
            <returns>The computed greatest common factor of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.LeastCommonMultiple``1(``0,``0,``0[])">
            <summary>Computes the least common multiple of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The first operand of the least common muiltiple computation.</param>
            <param name="b">The second operand of the least common muiltiple computation.</param>
            <param name="c">The remaining operands of the least common muiltiple computation.</param>
            <returns>The computed least common least common multiple of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.LeastCommonMultiple``1(System.Action{System.Action{``0}})">
            <summary>Computes the least common multiple of a set of numbers.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="stepper">The set of numbers to compute the least common multiple of.</param>
            <returns>The computed least common least common multiple of the set of numbers.</returns>
        </member>
        <member name="M:Towel.Statics.LinearInterpolation``1(``0,``0,``0,``0,``0)">
            <summary>Linearly interpolations a value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="x">The value along the first dimension to compute the linear interpolation for.</param>
            <param name="x0">A known starting point along the first dimension.</param>
            <param name="x1">A known ending point along the first dimension.</param>
            <param name="y0">A known starting point along the second dimension.</param>
            <param name="y1">A known ending point along the second dimension.</param>
            <returns>The linearly interpolated value.</returns>
        </member>
        <member name="M:Towel.Statics.Factorial``1(``0)">
            <summary>Computes the factorial of a numeric value [<paramref name="a"/>!] == [<paramref name="a"/> * (<paramref name="a"/> - 1) * (<paramref name="a"/> - 2) * ... * 1].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The integer value to compute the factorial of.</param>
            <returns>The computed factorial value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is not an integer value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the parameter is less than zero.</exception>
        </member>
        <member name="M:Towel.Statics.CombinationsCount``1(``0,``0[])">
            <summary>Computes the combinations of <paramref name="N"/> values using the <paramref name="n"/> grouping definitions.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="N">The number of values to compute the combinations of.</param>
            <param name="n">The groups and how many values fall into each group.</param>
            <returns>The computed number of combinations.</returns>
        </member>
        <member name="M:Towel.Statics.BinomialCoefficient``1(``0,``0)">
            <summary>Computes the Binomial coefficient (N choose n).</summary>
            <typeparam name="T">The numeric type of the computation.</typeparam>
            <param name="N">The size of the entire set (N choose n).</param>
            <param name="n">The size of the subset (N choose n).</param>
            <returns>The computed binomial coefficient (N choose n).</returns>
        </member>
        <member name="M:Towel.Statics.Exponential``1(``0)">
            <summary>Computes the exponentional of a value [e ^ <paramref name="a"/>].</summary>
            <typeparam name="T">The generic type of the operation.</typeparam>
            <param name="a">The value to compute the exponentional of.</param>
            <returns>The exponential of the value [e ^ <paramref name="a"/>].</returns>
        </member>
        <member name="M:Towel.Statics.NaturalLogarithm``1(``0)">
            <summary>Computes the natural logarithm of a value [ln(<paramref name="a"/>)].</summary>
            <typeparam name="T">The generic type of the operation.</typeparam>
            <param name="a">The value to compute the natural log of.</param>
            <returns>The natural log of the provided value [ln(<paramref name="a"/>)].</returns>
        </member>
        <member name="M:Towel.Statics.LinearRegression2D``1(System.Action{System.Action{``0,``0}},``0@,``0@)">
            <summary>Computes the best fit line from a set of points in 2D space [y = slope * x + y_intercept].</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="points">The points to compute the best fit line of.</param>
            <param name="slope">The slope of the computed best fit line [y = slope * x + y_intercept].</param>
            <param name="y_intercept">The y intercept of the computed best fit line [y = slope * x + y_intercept].</param>
        </member>
        <member name="M:Towel.Statics.FactorPrimes``1(``0,System.Action{``0})">
            <summary>Factors the primes numbers of a numeric integer value.</summary>
            <typeparam name="T">The numeric type of the operation.</typeparam>
            <param name="a">The value to factor the prime numbers of.</param>
            <param name="step">The action to perform on all found prime factors.</param>
        </member>
        <member name="T:Towel.StepStatus">
            <summary>Status of iteration.</summary>
        </member>
        <member name="F:Towel.StepStatus.Continue">
            <summary>Stepper was not broken.</summary>
        </member>
        <member name="F:Towel.StepStatus.Break">
            <summary>Stepper was broken.</summary>
        </member>
        <member name="T:Towel.ISteppable`1">
            <summary>Polymorphism base for all data structures in the Towel framework.</summary>
            <typeparam name="T">The type of values stored in this data structure.</typeparam>
        </member>
        <member name="M:Towel.ISteppable`1.StepperBreak``1(``0)">
            <summary>Traverses values and invokes a function on every <typeparamref name="T"/> value.</summary>
            <typeparam name="TStep">The type of function to invoke on every <typeparamref name="T"/> value.</typeparam>
            <param name="step">The function to invoke on every <typeparamref name="T"/> value.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="T:Towel.Steppable">
            <summary>Static members for <see cref="T:Towel.ISteppable`1"/>.</summary>
        </member>
        <member name="M:Towel.Steppable.Stepper``1(Towel.ISteppable{``0},System.Action{``0})">
            <summary>Traverses values and invokes a function on every <typeparamref name="T"/> value.</summary>
            <typeparam name="T">The type of value to traverse.</typeparam>
            <param name="steppable">The values to step though.</param>
            <param name="step">The function to invoke on every <typeparamref name="T"/> value.</param>
        </member>
        <member name="M:Towel.Steppable.Stepper``2(Towel.ISteppable{``0},``1)">
            <summary>Traverses values and invokes a function on every <typeparamref name="T"/> value.</summary>
            <typeparam name="T">The type of value to traverse.</typeparam>
            <typeparam name="TStep">The type of function to invoke on every <typeparamref name="T"/> value.</typeparam>
            <param name="steppable">The values to step though.</param>
            <param name="step">The function to invoke on every <typeparamref name="T"/> value.</param>
        </member>
        <member name="M:Towel.Steppable.StepperBreak``1(Towel.ISteppable{``0},System.Func{``0,Towel.StepStatus})">
            <summary>Traverses values and invokes a function on every <typeparamref name="T"/> value.</summary>
            <typeparam name="T">The type of value to traverse.</typeparam>
            <param name="steppable">The values to step though.</param>
            <param name="step">>The function to invoke on every <typeparamref name="T"/> value.</param>
            <returns>The status of the traversal.</returns>
        </member>
        <member name="T:Towel.TagAttribute">
            <summary>A value-based "tag" attribute.</summary>
        </member>
        <member name="M:Towel.TagAttribute.#ctor(System.Object,System.Object)">
            <summary>Creates a new value-based "tag" attribute.</summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Towel.TagAttributeExtensions">
            <summary>Extension methods for reflection types and <see cref="T:Towel.TagAttribute"/>.</summary>
        </member>
        <member name="M:Towel.TagAttributeExtensions.GetTag(System.Reflection.MemberInfo,System.Object)">
            <summary>Gets a <see cref="T:Towel.TagAttribute"/> on a <see cref="T:System.Reflection.MemberInfo"/>.</summary>
            <param name="memberInfo">The type to get the <see cref="T:Towel.TagAttribute"/> of.</param>
            <param name="tag">The tag to get the value of.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Found: True if the tag was found; False if not or if multiple tags were found (ambiguous).<br/>
            - <see cref="T:System.Object"/> Value: The value if found or default if not.
            </returns>
        </member>
        <member name="M:Towel.TagAttributeExtensions.GetTag(System.Reflection.ParameterInfo,System.Object)">
            <summary>Gets a <see cref="T:Towel.TagAttribute"/> on a <see cref="T:System.Reflection.ParameterInfo"/>.</summary>
            <param name="parameterInfo">The type to get the <see cref="T:Towel.TagAttribute"/> of.</param>
            <param name="tag">The tag to get the value of.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Found: True if the tag was found; False if not or if multiple tags were found (ambiguous).<br/>
            - <see cref="T:System.Object"/> Value: The value if found or default if not.
            </returns>
        </member>
        <member name="M:Towel.TagAttributeExtensions.GetTag``1(``0,System.Object)">
            <summary>Gets a <see cref="T:Towel.TagAttribute"/> on a <see cref="T:System.Reflection.MemberInfo"/>.</summary>
            <typeparam name="TEnum">The type of enum to get the atributes on its fields.</typeparam>
            <param name="enumValue">The type of enum field to get the <see cref="T:Towel.TagAttribute"/> of.</param>
            <param name="tag">The tag to get the value of.</param>
            <returns>
            - <see cref="T:System.Boolean"/> Found: True if the tag was found; False if not or if multiple tags were found (ambiguous).<br/>
            - <see cref="T:System.Object"/> Value: The value if found or default if not.
            </returns>
        </member>
        <member name="T:Towel_Testing.SStringBuilder">
            <summary>Represents a <see cref="T:System.String"/> in the process of being built.</summary>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.#ctor(System.Span{System.Char})">
            <summary>Constructs a new <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <see cref="T:System.Span`1"/> to initialize.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.Append(System.Char)">
            <summary>Appends a <see cref="T:System.Char"/> to this <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="value">The <see cref="T:System.Char"/> to append to this <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.Append(System.ReadOnlySpan{System.Char})">
            <summary>Appends a <see cref="T:System.Char"/> span to this <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <see cref="T:System.Char"/> span to append to this <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.AppendLine(System.Char)">
            <summary>Appends a <see cref="T:System.Char"/> followed by <see cref="P:System.Environment.NewLine"/>.</summary>
            <param name="value">The <see cref="T:System.Char"/> to append.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.AppendLine(System.ReadOnlySpan{System.Char})">
            <summary>Appends a <see cref="T:System.Char"/> span followed by <see cref="P:System.Environment.NewLine"/>.</summary>
            <param name="span">The <see cref="T:System.Char"/> span to append.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.AppendLine">
            <summary>Appends a <see cref="P:System.Environment.NewLine"/>.</summary>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.op_Implicit(System.Span{System.Char})~Towel_Testing.SStringBuilder">
            <summary>Converts a <see cref="T:System.Span`1"/> to a <see cref="T:Towel.SpanBuilder`1"/>.</summary>
            <param name="span">The <see cref="T:System.Span`1"/> to convert to a <see cref="T:Towel.SpanBuilder`1"/>.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.op_Implicit(Towel_Testing.SStringBuilder)~System.String">
            <summary>Converts a <see cref="T:Towel_Testing.SStringBuilder"/> to a <see cref="T:System.String"/>.</summary>
            <param name="sStringBuilder">The <see cref="T:Towel_Testing.SStringBuilder"/> to convert to a <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Towel_Testing.SStringBuilder.ToString">
            <inheritdoc cref="M:System.Text.StringBuilder.ToString"/>
        </member>
    </members>
</doc>
